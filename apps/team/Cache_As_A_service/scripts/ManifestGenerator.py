import os
from ConfigLoader import getAllKingdoms
from ConfigLoader import getConfiguration
from ConfigLoader import getConfigurationForGroup
from ConfigLoader import getClusterNamesForGroup
from string import Template
import argparse
import json
from sets import Set
configFileName = "metadata/config/Configuration.xls";

parser = argparse.ArgumentParser()
parser.add_argument('-group_name', action='store', dest='group_name',
                    help='Deployment Group name from Config file.')
parser.add_argument('-metadata_dir', action='store', dest='metadata_dir',
                    help='Path of the directory where metadata is present.')
parser.add_argument('-output_dir', action='store', dest='output_dir',
                    help='Path of the directory where manifest will be generated.')
arguments = parser.parse_args()
output_dir = arguments.output_dir
group_name = arguments.group_name
metadata_dir = arguments.metadata_dir


def loadTemplates():
    # load metrics publisher template
    metricsPubTemplateFileName = "metadata/templates/metrics-publisher-manifest.yaml";
    metricsPubTemplateFilePath = os.path.join(metadata_dir, metricsPubTemplateFileName);
    metricsPubTemplateFile = open(metricsPubTemplateFilePath, "r");
    loadTemplates.metricsPubTemplate = Template(metricsPubTemplateFile.read());

    # load general redis temaplate
    redisTemplateFileName = "metadata/templates/redis-manifest.yaml";
    redisTemplateFilePath = os.path.join(metadata_dir, redisTemplateFileName);
    redisTemplateFile = open(redisTemplateFilePath, "r");
    loadTemplates.redisTemplate = Template(redisTemplateFile.read());

    # load pc redis template
    pcRedisTemplateFileName = "metadata/templates/redis-manifest-pc.yaml";
    pcRedisTemplateFilePath = os.path.join(metadata_dir, pcRedisTemplateFileName);
    pcRedisTemplateFile = open(pcRedisTemplateFilePath, "r");
    loadTemplates.pcRedisTemplate = Template(pcRedisTemplateFile.read());


def main():
    # load kingdom details
    kingdoms = getAllKingdoms(metadata_dir)
    kingdomData = []

    podsDetailsFilePath = os.path.join(metadata_dir, 'metadata/config/PodList.txt');
    podOutfile = open(podsDetailsFilePath, 'w')
    podNames = Set()

    for kingdomName, kingdomDetail in sorted(kingdoms.items()):
        spods = kingdomDetail.getSpods()
        spodData = []
        for spodName, spodDetail in sorted(spods.items()):
            clusters = spodDetail.getClusters()
            clusterNameData = []
            for clusterName, clusterDetail in sorted(clusters.items()):
                clusterData = []
                cluster = clusters[clusterName]
                serverPort = cluster.getSrvPort()
                mgmtPort = cluster.getMgmtPort()
                redisPort = cluster.getRedisPort()
                redisCount = cluster.getRedisCount()
                clusterData.append({'server_port': serverPort})
                clusterData.append({'mgmt_port': mgmtPort})
                clusterData.append({'redis_port': redisPort})
                clusterData.append({'redis_count': redisCount})
                isDRDeployment = cluster.getIsDRDeployment()

                #if isDRDeployment == 'No':
                podName = clusterName.split('-')[1]
                podName = kingdomName +","+spodName+","+podName
                if( podName not in podNames):
                    podNames.add(podName)
                    podOutfile.write(podName+"\n")

                clusterNameData.append({clusterName: clusterData})
            spodData.append({spodName: clusterNameData})
        kingdomData.append({kingdomName: spodData})

    podOutfile.close()

    jsonStr = json.dumps(kingdomData, sort_keys=True, indent=4)

    genKingdomDetailsFilePath = os.path.join(metadata_dir, 'metadata/config/ClusterDetails.json');
    outfile = open(genKingdomDetailsFilePath, 'w')
    outfile.write("#This is a autogenerated files based on metadata/config/ClusterDetails.xls. Never hand edit this file\n")
    outfile.write(jsonStr)
    outfile.close()

    # validate -- To-Do : Ram
    # validateKingdom(kingdoms)

    # Load Templates
    loadTemplates();

    configMap = getConfiguration(metadata_dir)
    #Dump config in json for history tracking
    groupData = []

    for config in configMap:
        configData = []
        paramValDictForDefault = configMap[config]
        for k, v in paramValDictForDefault.items():
            configData.append({k: v})
        groupData.append({config:configData})

    jsonStr = json.dumps(groupData, sort_keys=True, indent=4)

    generatedConfigJsonFilePath = os.path.join(metadata_dir, 'metadata/config/Configuration.json');
    outfile = open(generatedConfigJsonFilePath, 'w')
    outfile.write("#This is a autogenerated files based on metadata/config/Consfiguration.xls. Never hand edit this file\n")
    outfile.write(jsonStr)
    outfile.close()

    # Manifests Generation
    configMapForGrp = getConfigurationForGroup(configMap, group_name)
    MetricsPublisherImageVersion = configMapForGrp['metricsPublisherDockerImgVer']
    RedisAnnouncerImageVersion = configMapForGrp['redisAnnouncerDockerImgVer']
    metricsPublisherContainerMemoryLimit = configMapForGrp['metricsPublisherContainerMemoryLimit']
    metricsPublisherContainerMemoryRequest = configMapForGrp['metricsPublisherContainerMemoryRequest']

    clusterForGroup = getClusterNamesForGroup(metadata_dir, group_name)
    for kingdomName in kingdoms:
        kingdom = kingdoms[kingdomName];
        spods = kingdom.getSpods();
        for spodName in spods:
            spod = spods[spodName];
            clusters = spod.getClusters();
            for clusterName in clusters:
                if clusterName in clusterForGroup:
                    cluster = clusters[clusterName];
                    serverPort = cluster.getSrvPort();
                    mgmtPort = cluster.getMgmtPort();
                    redisPort = cluster.getRedisPort();
                    redisCount = cluster.getRedisCount();

                    generateMetricsPublisherManifest(clusterName, MetricsPublisherImageVersion, serverPort, mgmtPort,
                                                     kingdomName, spodName, metricsPublisherContainerMemoryLimit,
                                                     metricsPublisherContainerMemoryRequest );
                    generateRedisManifest(clusterName, RedisAnnouncerImageVersion, redisPort, redisCount, kingdomName,
                                          spodName, configMapForGrp);


def generateMetricsPublisherManifest(clusterName, MetricsPublisherImageVersion, serverPort, mgmtPort, kingdomName,
                                     spodName, metricsPublisherContainerMemoryLimit, metricsPublisherContainerMemoryRequest):
    metricsPublisherTemplateSubstitues = {'ClusterName': clusterName,
                                          'MetricsPublisherImageVersion': MetricsPublisherImageVersion,
                                          'ServerPort': serverPort,
                                          'ManagementPort': mgmtPort,
                                          'MetricsPublisherContainerMemoryLimit': metricsPublisherContainerMemoryLimit,
                                          'MetricsPublisherContainerMemoryRequest': metricsPublisherContainerMemoryRequest};
    metricsPublisherManifest = loadTemplates.metricsPubTemplate.substitute(metricsPublisherTemplateSubstitues);
    manifestDirName = ''.join([kingdomName, '-', spodName, '-metrics-publisher-', clusterName]);
    manifestDirectory = os.path.join(output_dir,
                                     manifestDirName);
    createManifestFile(manifestDirectory, metricsPublisherManifest);
    updatePoolMapFile(manifestDirName, kingdomName, spodName);


def generateRedisManifest(clusterName, RedisAnnouncerImageVersion, redisPort, redisCount, kingdomName, spodName,
                          configMap):
    redisMaxMemory = int(configMap['redisMaxMemory'])
    redisContainerMaxMemory = configMap['redisContainerMaxMemory']
    redisContainerMemoryRequest = configMap['redisContainerMemoryRequest']
    announcerContainerMemory = configMap['announcerContainerMaxMemory']
    announcerContainerMemoryRequest = configMap['announcerContainerMemoryRequest']

    redisTemplateSubstitues = {'ClusterName': clusterName,
                               'RedisImageVersion': RedisAnnouncerImageVersion,
                               'Port': redisPort,
                               'RedisInstanceCount': redisCount,
                               'RedisContainerMemoryLimit': redisContainerMaxMemory,
                               'RedisContainerMemoryRequest': redisContainerMemoryRequest,
                               'RedisMemory': redisMaxMemory,
                               'AnnouncerContainerMemoryLimit': announcerContainerMemory,
                               'AnnouncerContainerMemoryRequest': announcerContainerMemoryRequest
                               };

    if clusterName.endswith("pc1"):
        redisManifest = loadTemplates.pcRedisTemplate.substitute(redisTemplateSubstitues);
    else:
        redisManifest = loadTemplates.redisTemplate.substitute(redisTemplateSubstitues);

    manifestDirName = ''.join([kingdomName, '-', spodName, '-redis-', clusterName, '-', str(redisPort)]);
    manifestDirectory = os.path.join(output_dir,
                                     manifestDirName);
    createManifestFile(manifestDirectory, redisManifest);
    updatePoolMapFile(manifestDirName, kingdomName, spodName);


def createManifestFile(directory, manifestFileContent):
    if not os.path.exists(directory):
        os.makedirs(directory)

    fileName = os.path.join(directory, "manifest.yaml");
    outputFile = open(fileName, 'w');

    outputFile.write(manifestFileContent);
    outputFile.close();


def updatePoolMapFile(manifestDirName, kingdomName, spodName):
    poolMapFileName = 'pool-map.yaml';
    poolMapFileNamePath = os.path.join(output_dir, poolMapFileName);

    poolMapFileReader = open(poolMapFileNamePath, "r");
    lines = poolMapFileReader.readlines();
    poolMapFileReader.close();

    entryExists = None
    for line in lines:
        if manifestDirName in line:
            entryExists = True;

    if not entryExists:
        poolMapFileWriter = open(poolMapFileNamePath, "a");
        poolMapFileWriter.write('  ' + manifestDirName + ':\n');
        poolMapFileWriter.write('    - ' + kingdomName + '/' + kingdomName + '-' + spodName + '-sam_caas');
        poolMapFileWriter.write('\n');
        poolMapFileWriter.close()

main()
