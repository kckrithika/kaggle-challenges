#!/bin/bash

# Default Values
version="0.1"
_arg_for="all"
_arg_build_dir=""
_arg_json_only=false

die() {
	local _ret=$2
	test -n "$_ret" || _ret=1
	echo "$1" >&2
	test "$_PRINT_HELP" = yes && print_help >&2
	exit ${_ret}
}

print_help () {
	printf 'casam manifest generator\nUsage: %s [-b|--build-dir <build-dr>] [-f|--for <region/env>] [-j|--json-only] [-v|--version] [-h|--help]\n\n' "$0"
	printf '\t%s\n' "-b,--build-dir: Build ouptput dir. (default: 'build')"
	printf '\t%s\n' "-f,--for: Generate manifest only for an env (default: all)"
	printf '\t%s\n' "-j,--json-only: Generate the manifest in json-format. By default the generated manifest is in YAML format"
	printf '\t%s\n' "-v,--version: Prints version"
	printf '\t%s\n\n' "-h,--help: Prints help"
}

parse_commandline () {
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in

			-b|--build-dir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				if ! [[ $2 = *[!\ ]* ]]; then
  					die "Missing value for the optional argument '$_key'." 1
				fi
				_arg_build_dir="$2"
				shift
				;;
			--build-dir=*)
				_arg_build_dir="${_key##--build-dir=}"
				;;
			-b*)
				_arg_build_dir="${_key##-b}"
				;;

			-f|--for)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				if ! [[ $2 = *[!\ ]* ]]; then
  					die "Missing value for the optional argument '$_key'." 1
				fi
				_arg_for="$2"
				shift
				;;
			--for=*)
				_arg_for="${_key##--for=}"
				;;
			-f*)
				_arg_for="${_key##-f}"
				;;

			-j|--json-only)
				_arg_json_only=true
				;;

			-v|--version)
				echo casam manifest generator v$version
				exit 0
				;;
			-v*)
				echo casam manifest generator v$version
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "Error: Unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

compile_jsonnet () {
	if [ ! -f $1 ]; then
    	die "Template file for the specified environment is does not exist '$1'." 1
	fi
	printf '.'
	bdir="`dirname ${1}`" 
	region=$( cd ${bdir}/.. && basename ${PWD} )
	env=$(basename $(dirname ${1}))
	mkdir -p ${_arg_build_dir}/${region}-${env}
	jsonnet "${1}" > ${_arg_build_dir}/${region}-${env}/manifest.json

	if [[ $_arg_json_only == false ]]; then
		$ROOTDIR/scripts/json2yaml --json ${_arg_build_dir}/${region}-${env}/manifest.json --yaml ${_arg_build_dir}/${region}-${env}/manifest.yaml
		rm ${_arg_build_dir}/${region}-${env}/manifest.json
	fi
}

parse_commandline "$@"

DIR="`dirname ${0}`" 
ROOTDIR="`( cd ${DIR}/.. && pwd )`"  # absolutized and normalized

if [[ $_arg_build_dir = "" ]]; then
    _arg_build_dir="${ROOTDIR}"
fi

echo "Generate for env : $_arg_for"
echo "Build Dir        : $_arg_build_dir"
echo "JSON Only        : $_arg_json_only"

r=($(echo "$_arg_for" | tr '/' '\n'))

if ( [[ "${r[0]}" == "all" ]]  ) ; then
	for i in `find ${ROOTDIR} -name "*.jsonnet"` ;
	do
		compile_jsonnet ${i}
	done;
elif [[ -z "${r[0]}" ]] || [[ -z "${r[1]}" ]]; then
	die "Invalid environment selector. Valid format is <region/env>. Ex. 'prd/mist61-a'" 1
else
	compile_jsonnet ${ROOTDIR}/templates/${r[0]}/${r[1]}/manifest.jsonnet
fi

printf '\nDone. \n'