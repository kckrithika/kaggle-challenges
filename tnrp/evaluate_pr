#!/bin/bash -e

#Exit on first error
set -e

# Check if json files conforms to jsonnets
ensureLatestJsons() {
pushd ./sam-internal/k8s-in
./build.sh > /dev/null
popd
if [[ `git status --porcelain` ]]; then
  echo "build.sh output does not match applied changes"
  git status
  exit 1
fi
}

#exitIfMergeCommitFound checks if there are any
#merge commits introduced by the current branch
#which are not present in the origin/master.
#If it finds any merge commits, it calls exit.
exitIfMergeCommitFound() {
  GIT_CURRENT_BRANCH=$(git name-rev --name-only HEAD)
  tnrpBotName='tnrp-ro@salesforce.com'
  #Find count of all the merge commits that are
  #present in the current branch but not in origin/master.
  #Merge commits by tnrp bot are ignored.
  key="commit"
  mergeCommits=$(git log origin/master..$GIT_CURRENT_BRANCH --merges --pretty=format:"$key %H %P %an" |grep -v $tnrpBotName | grep -c $key) || true
  #Find count of all non merge commits that are
  #present in the current branch but not in origin/master.
  #Commits by tnrp bot are ignored.
  nonMergeCommits=$(git log origin/master..$GIT_CURRENT_BRANCH --no-merges --pretty=format:"$key %H %P %an" |grep -v $tnrpBotName | grep -c $key) || true
  echo "PR has ${mergeCommits} merge commits and ${nonMergeCommits} normal commits"
  if [ "$mergeCommits" -ne "0" ]
  then
    echo "Merge commits are not allowed in PRs"
    echo "For help removing them see http://stackoverflow.com/questions/21115596/remove-a-merge-commit-keeping-current-changes"
    exit 1
  fi
}

readOnlyGitToken="ef11904af720485500651dedc5c513303bc3a5d3"

exitIfApproverNAuthorAreSame() {

    author=$(curl https://$readOnlyGitToken@git.soma.salesforce.com/api/v3/repos/sam/manifests/pulls/$STAGE_PULL_REQUEST_ID |  python -c 'import json,sys;obj=json.load(sys.stdin);print obj["user"]["login"]' | tr '-' '.')

    echo "Pull request author is $author"

    approver=$(basename $STAGE_GO_TRIGGER_USER @salesforce.com)

    if [ "$author" == "$approver" ]; then
        echo "$author and $approver are same"
        exit 1
    fi
}

echo -e "\nEvaluating PR\n"

ensureLatestJsons

exitIfMergeCommitFound

/opt/sam/aclrepo  --repo manifests --pr=$STAGE_PULL_REQUEST_ID --userId=$STAGE_GO_TRIGGER_USER

#scratch pad for SMB output with PR changes
prOutputDir=/tmp/PR_$STAGE_PULL_REQUEST_ID

rm -rf $prOutputDir || true

mkdir $prOutputDir

/opt/sam/sam-manifest-builder --root='./' --swaggerspecdir='/opt/sam/swagger-spec' -output $prOutputDir -validationExceptionsFile=./sam-internal/validation-whitelist.yaml -internalpassthrough k8s-out,sdn,authorizer -imagefileoutdir $prOutputDir -validateonly

cp -r --parents sam-internal/k8s-out $prOutputDir/
cp -r --parents sam-internal/sdn $prOutputDir/
cp -r --parents sam-internal/authorizer $prOutputDir/

#A branch without PR changes.
origBranch=br_$STAGE_PULL_REQUEST_ID

#scratch pad for SMB output without PR changes
origOutputDir=/tmp/$origBranch

rm -rf $origOutputDir || true
mkdir $origOutputDir

git pull origin master:$origBranch
git checkout $origBranch


/opt/sam/sam-manifest-builder --root='./' --swaggerspecdir='/opt/sam/swagger-spec' -output $origOutputDir -validationExceptionsFile=./sam-internal/validation-whitelist.yaml -internalpassthrough k8s-out,sdn,authorizer -imagefileoutdir $origOutputDir -validateonly

cp -r --parents sam-internal/k8s-out $origOutputDir/
cp -r --parents sam-internal/sdn $origOutputDir/
cp -r --parents sam-internal/authorizer $origOutputDir/

#Switch back to the last branch
git checkout -

git branch -D $origBranch

if ! diff -wr --exclude=prd "$origOutputDir/sam-internal" "$prOutputDir/sam-internal"; then
    exitIfApproverNAuthorAreSame
fi

#Ignore hashes.yaml and the prd folder
#Ignore control-estate.yaml
difference=$(diff -wr -x hashes.yaml -x control-estate.yaml --exclude=prd $origOutputDir/goal-state $prOutputDir/goal-state)
if [ ! -z $difference ]; then
    exitIfApproverNAuthorAreSame
fi


prdRepo=ops0-artifactrepo1-0-prd.data.sfdc.net

prdPrefix=ops0-artifactrepo2-0-prd.data.sfdc.net

exitCode=0

sort $origOutputDir/image-promotion.yaml -o $origOutputDir/image-promotion.yaml
sort $prOutputDir/image-promotion.yaml -o $prOutputDir/image-promotion.yaml

for anImage in $(diff $origOutputDir/image-promotion.yaml $prOutputDir/image-promotion.yaml | grep ">" | sed -e "s/^> - image: //");
do
    echo "Checking if image $anImage is valid"
    imageNTag=$(echo $anImage| sed -e "s/.*sfdc.net\///" )
    image=$(echo $imageNTag | cut -d ':' -f 1)
    tag=$(echo $imageNTag | cut -d ':' -f 2)
    if [[ $anImage != *"$prdRepo"* ]]; then
        imagePath="https://$prdPrefix/v2/$image/manifests/$tag"
    else
        imagePath="https://$prdRepo/v2/$image/manifests/$tag"
    fi
    if curl $imagePath | grep -q "MANIFEST_UNKNOWN"; then
        echo $imagePath is missing
        exitCode=1
    fi
done
exit $exitCode
