apiVersion: v1
data:
  container.conf.erb: "<%# INPUT DEFINITIONS %>\n<%# Collect log files in /var/log/container
    %>\ninput(\n  type=\"imfile\"\n  File=\"/var/log/containers/*.log\"\n  Tag=\"kubernetes\"\n
    \ ruleset=\"kubernetes_dockercontainers_ruleset\"\n  addmetadata=\"on\"\n  escapelf=\"off\"\n
    \ discardTruncatedMsg=\"on\"\n)\n\n<%# ------- Start of definition of schema templates
    ------- %>\n\n<%# Align universal schema envelope %>\ntemplate(name=\"tpl_containers_log\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-envelope:1\\\",\\\"data\\\":{\")\n
    \ constant(value=\"\\\"event\\\":\")\n  property(name=\"$!event\")\n  constant(value=\",\")\n
    \ property(name=\"hostname\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!logdata!time\"
    outname=\"event_timestamp\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"timegenerated\"
    outname=\"agent_timestamp\" dateFormat=\"rfc3339\" date.inUTC=\"on\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!owner\" outname=\"owner\" format=\"jsonfr\")\n
    \ constant(value=\",\\\"annotations\\\": \")\n  property(name=\"$!annotations\")\n
    \ constant(value=\"}}\\n\")\n}\n\n<%# kubernetes container logs event %>\ntemplate(name=\"kubernetes_event\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"kubernetes:1\\\",\\\"data\\\":{\")\n
    \ property(name=\"$!logdata!log\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"syslogfacility-text\" outname=\"facility\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!severity\" outname=\"severity\" format=\"jsonfr\")\n
    \ constant(value=\"}}\\n\")\n}\n\n<%# rsyslog base annotations %>\ntemplate(name
    = \"kubernetes_annotation_rsyslog_base\" \n         type=\"string\" \n         string=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"rsyslog-base:1\\\",\\\"data\\\":{\\\"dc\\\":\\\"<%=
    config.cluster%>\\\",\\\"node\\\":\\\"<%= config.node %>\\\",\\\"superpod\\\":\\\"NONE\\\",\\\"source\\\":\\\"<%=
    config.project_id %>\\\",\\\"source_type\\\":\\\"container-streaming\\\",\\\"index\\\":\\\"true\\\"}}\")\n\n<%#
    container logs anotations %>\ntemplate(name = \"kubernetes_annotation_kubernetes_container\"
    type=\"list\") {\n  constant(value = \"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"kubernetes-container:1\\\",\\\"data\\\":\")\n
    \ property(name = \"$!kubernetes_container_data\")\n  constant(value = \"}\")\n}\n\nruleset(name
    = \"kubernetes_dockercontainers_ruleset\") {\n  <%# mmjsonparse to parse log message
    %>\n  action(type=\"mmjsonparse\" cookie=\"\" container=\"$!logdata\")\n  \n  if
    $!logdata!stream == 'stderr' then {\n    set $!severity = \"error\";\n  } else
    {\n    set $!severity = \"info\";\n  }\n\n  <%# ------------ parsing kubernetes
    container annotation information -------------%>\n  <%# retrieve file name from
    /var/log/containers/kube-proxy-gke-gao-collection-poc-larger-pool-7372f548-5v3r_kube-system_kube-proxy-7a7cad04f5245c7d12f05e380b9f3a77098d01ff36184529c245e57463c3686a.log
    %>\n  set $!file_name = field($!metadata!filename, 47, 5);\n\n  <%# [POD name]_[namespace]_[container-name-container-UID].log
    %>\n  <%# kube-dns-788979dc8f-q7zzr_kube-system_prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log
    %>\n  set $!kubernetes_container_data!pod = field($!file_name, 95, 1);\n  set
    $!kubernetes_container_data!namespace = field($!file_name, 95, 2);\n\n  <%# [container-name-container-UID].log
    %>\n  <%# prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log
    %>\n  set $!container_info = field($!filename, 95, 3);\n  set $!kubernetes_container_data!container_id
    = re_extract($!container_info, \"-([^-]+).log\", 0, 1, \"\");\n  set $!kubernetes_container_data!container_name
    = substring($!container_info, 0, strlen($!container_info) - 5 - strlen($!kubernetes_container_data!container_id));\n\n
    \ <%# forces the annotation to be indexed in splunk %>\n  set $!kubernetes_container_data!index
    = \"true\";\n\n  <%# ------------ end of parsing kubernetes container annotations
    ----------------%>\n  \n\n  <%# container logs event %>\n  set $!event = exec_template(\"kubernetes_event\");\n\n
    \ <%# kubernetes app log annotation array %>\n  set $!annotations = \"[\" & exec_template(\"kubernetes_annotation_kubernetes_container\")
    & \", \" & exec_template(\"kubernetes_annotation_rsyslog_base\") & \"]\";\n\n
    \ <%# action(\n    name=\"syslog_file_action\"\n    type=\"omfile\"\n    file=\"/var/log/kubernetes_dockercontainers_ruleset.log\"\n
    \   template=\"tpl_containers_log\"\n  ) %>\n\n  <%# Output action %>\n  action(\n
    \   type=\"omkafka\"\n    name=\"kafka_kubernetes_kafka_action\"\n    broker=\"<%=
    config.broker_vip %>\"\n    template=\"tpl_containers_log\"\n    topic= \"<%=
    config.kafka_topic %>\"\n    keepFailedMessages=\"on\"\n    partitions.auto=\"on\"\n
    \   resubmitOnFailure=\"off\"\n    reopenonhup=\"on\"\n    action.resumeRetryCount=\"-1\"\n
    \   confParam=[\n      \"batch.num.messages=10000\",\n      \"client.id=collections.rsyslog.syslog\",\n
    \     \"compression.codec=gzip\",\n      \"max.in.flight.requests.per.connection=2\",\n
    \     \"message.max.bytes=1000000\",\n      \"queue.buffering.max.ms=5000\",\n
    \     \"retries=2\",\n      \"retry.backoff.ms=100\",\n      \"socket.keepalive.enable=true\",\n
    \     \"security.protocol=ssl\",\n      \"ssl.ca.location=/etc/pki_service/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem\",\n
    \     \"ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  ) & stop\n\n}\n<%# ----
    / End of definition for docker containers tenant ---- %>\n"
  general.conf.erb: "<%# General file based logs %>\n<%# Needed env variables:\n  -
    log_type\n  - file_path\n  - start_regex (optional)\n  - pod (TBD)\n  - owner\n
    \ - broker_vip\n  - kafka_topic %>\n<%# -------------------------------------------------
    %>\n<%# INPUT DEFINITIONS %>\ninput(\n  type=\"imfile\"\n  File=\"<%=config.file_path%>\"\n
    \ PersistStateInterval=\"50000\"\n<%- if config.include? :start_regex -%>  \n
    \ startmsg.regex=\"<%=config.start_regex%>\"\n  readTimeout = \"5\"\n<%- else
    -%>\n  readMode=\"0\"\n<%- end -%>\n  Tag=\"<%=config.log_type%>\"\n  ruleset=\"ruleset_<%=config.log_type%>\"\n
    \ addmetadata=\"on\"\n  escapelf=\"off\"\n  discardTruncatedMsg=\"on\"\n)\n\n<%#
    Output Template%>\ntemplate(name=\"tpl_<%=config.log_type%>\" type=\"list\") {\n
    \ constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-flatten:1\\\",\\\"data\\\":{\")\n
    \ property(name=\"msg\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"$!source_type\" outname=\"source_type\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!datacenter\" outname=\"dc\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!superpod\" outname=\"superpod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!pod\" outname=\"pod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!metadata!filename\" outname=\"source\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!hostname\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!node\" format=\"jsonfr\")  \n  constant(value=\",\")\n
    \ property(name=\"timegenerated\" outname=\"agent_timestamp\" dateFormat=\"rfc3339\"
    date.inUTC=\"on\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!owner\"
    outname=\"owner\" format=\"jsonfr\")\n  constant(value=\"}}\\n\")\n}\n\n<%# RULESET
    DEFINITION %>\nruleset(name=\"ruleset_<%=config.log_type%>\") {\n\n  <%# Template
    Spec %>\n  set $!datacenter = \"<%=config.cluster%>\";\n  set $!superpod = \"NONE\";\n
    \ <%# TODO pod - sfdc-pod or k8s pod %>\n  set $!pod = \"<%= config.pod %>\";\n
    \ set $!owner = \"<%= config.owner %>\";\n  set $!source_type = \"<%= config.owner
    %>\" + \":\" + \"\"<%= config.log_type %>\"\";\n  set $!node = \"<%=config.node%>\";\n\n
    \ <%# Output action %>\n  action(\n    type=\"omkafka\"\n    name=\"kafka_<%=
    config.log_type %>\"\n    broker=\"<%= config.broker_vip %>\"\n    template=\"tpl_<%=
    config.log_type %>\"\n    topic=\"<%= config.kafka_topic %>\"\n    partitions.auto=\"on\"\n
    \   resubmitOnFailure=\"on\"\n    reopenonhup=\"on\"\n    action.resumeRetryCount=\"-1\"\n
    \   confParam=[\n      \"batch.num.messages=10000\",\n      \"compression.codec=gzip\",\n
    \     \"max.in.flight.requests.per.connection=2\",\n      \"message.max.bytes=1000000\",\n
    \     \"queue.buffering.max.ms=5000\",\n      \"retries=3\",\n      \"retry.backoff.ms=1000\",\n
    \     \"socket.keepalive.enable=true\",\n      \"security.protocol=ssl\",\n      \"ssl.ca.location=/etc/pki_service/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem\",\n
    \     \"ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  )\n}\n\n<%# END OF FILE
    %>"
  jetty.conf.erb: "<%# INPUT DEFINITIONS %>\ninput(\n  type=\"imfile\"\n  File=\"/home/sfdc/logs/solr/*.jvmgc.log_*\"\n
    \ PersistStateInterval=\"50000\"\n  Tag=\"solr_jetty\"\n  ruleset=\"ruleset_solr_jetty\"\n
    \ startmsg.regex=\"^([[:digit:]]{4}-(0[1-9]|1[0-2])-(0?[1-9]|[12][[:digit:]]|3[01]))([[:space:]]|T)(([01][[:digit:]]|2[0-3]):[0-5][[:digit:]]:([0-5][[:digit:]]|6[01]))[,|\\\\.][[:digit:]]{3}`\"\n
    \ readTimeout = \"5\"\n  addmetadata=\"on\"\n  escapelf=\"off\"\n  discardTruncatedMsg=\"on\"\n)\n\n<%#
    Output Template%>\ntemplate(name=\"tpl_jetty\" type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-flatten:1\\\",\\\"data\\\":{\")\n
    \ property(name=\"msg\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"$!source_type\" outname=\"source_type\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!datacenter\" outname=\"dc\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!superpod\" outname=\"superpod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!pod\" outname=\"pod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!metadata!filename\" outname=\"source\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!hostname\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!node\" format=\"jsonfr\")  \n  constant(value=\",\")\n
    \ property(name=\"timegenerated\" outname=\"agent_timestamp\" dateFormat=\"rfc3339\"
    date.inUTC=\"on\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!owner\"
    outname=\"owner\" format=\"jsonfr\")\n  constant(value=\"}}\\n\")\n}\n\n<%# RULESET
    DEFINITION %>\nruleset(name=\"ruleset_solr_jetty\" queue.type=\"LinkedList\" queue.size=\"5000\"
    queue.lightdelaymark=\"3000\" queue.fulldelaymark=\"4000\") {\n\n  <%# Template
    Spec %>\n  set $!datacenter = \"<%= config.cluster %>\";\n  set $!superpod = \"NONE\";\n
    \ set $!pod = \"<%= config.node %>\";\n  set $!owner = \"Search\";\n  set $!source_type
    = \"solr_jvmgclog\";\n\n  <%# Output action %>\n  action(\n    type=\"omkafka\"\n
    \   name=\"kafka_solr_jetty\"\n    broker= \"<%= config.broker_vip %>\"\n    template=\"tpl_jetty\"\n
    \   topic= \"<%= config.kafka_topic %>\"\n    partitions.auto=\"on\"\n    resubmitOnFailure=\"off\"\n
    \   reopenonhup=\"on\"\n    action.resumeRetryCount=\"-1\"\n    confParam=[\n
    \     \"batch.num.messages=10000\",\n      \"client.id=collections.rsyslog.test\",\n
    \     \"compression.codec=gzip\",\n      \"max.in.flight.requests.per.connection=2\",\n
    \     \"message.max.bytes=1000000\",\n      \"queue.buffering.max.ms=5000\",\n
    \     \"retries=86400\",\n      \"retry.backoff.ms=1000\",\n      \"socket.keepalive.enable=true\",\n
    \     \"security.protocol=ssl\",\n      \"ssl.ca.location=/etc/pki_service/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem\",\n
    \     \"ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  )\n}\n"
  journal.conf.erb: |+
    <%# syslog related schema annotations %>
    template(name="syslog_annotation" type="string" string="{\"schema_type\":\"json-schema\",\"schema_id\":\"rsyslog-base:1\",\"uuid\":\"%uuid%\",\"environment\":\"TechOps\",\"data\":{\"dc\":\"<%= config.cluster %>\",\"node\":\"<%= config.node %>\",\"superpod\":\"NONE\",\"source\":\"%programname%\",\"source_type\":\"syslog\",\"index\":\"true\"}}")


    <%# Universal schema for stdout and stderr streaming  %>
    template(name="tpl_syslog" type="list") {
      constant(value="{\"schema_type\":\"json-schema\",\"schema_id\":\"event-envelope:1\",\"data\":{")
      constant(value="\"event\":")
      property(name="$!event")
      constant(value=",")
      property(name="hostname" format="jsonfr")
      constant(value=",")
      property(name="timegenerated" outname="event_timestamp" dateFormat="rfc3339" date.inUTC="on" format="jsonfr")
      constant(value=",")
      property(name="timegenerated" outname="agent_timestamp" dateFormat="rfc3339" date.inUTC="on" format="jsonfr")
      constant(value=",")
      property(name="$!owner" outname="owner" format="jsonfr")
      constant(value=",\"annotations\": ")
      property(name="$!annotations")
      constant(value="}}\n")
    }


    <%# RULESET DEFINITION %>
    ruleset(name="ruleset_imjounal_syslog" queue.type="LinkedList" queue.size="10000" queue.discardmark="9000" queue.lightdelaymark="10000" queue.fulldelaymark="10000" queue.discardseverity="5") {

      <%# # Template Spec %>
      set $!event!schema_type = "json-schema";
      set $!event!schema_id = "syslog:1";
      set $!event!data!message = $msg;
      set $!owner = "rsyslog";
      set $!event!data!facility = $syslogfacility-text;
      set $!event!data!severity = $syslogseverity-text;
      set $!event!data!priority = $syslogpriority-text;
      set $!annotations = "[" & exec_template("syslog_annotation") & "]";

      <%# debugging %>
      <%# action(name="imjournal_syslog"
        type="omfile"
        template="tpl_syslog"
        File="/var/log/imjournal_syslog.log"
      ) %>

      <%# # Output action %>
      action(
        type="omkafka"
        name="kafka_imjournal_syslog"
        broker="<%=config.broker_vip%>"
        template="tpl_syslog"
        topic="<%=config.kafka_topic%>"
        partitions.auto="on"
        resubmitOnFailure="off"
        reopenonhup="on"
        action.resumeRetryCount="0"
        confParam=[
          "batch.num.messages=10000",
          "client.id=collections.rsyslog.syslog",
          "compression.codec=gzip",
          "max.in.flight.requests.per.connection=2",
          "message.max.bytes=1000000",
          "queue.buffering.max.ms=5000",
          "retries=2",
          "retry.backoff.ms=100",
          "socket.keepalive.enable=true",
          "security.protocol=ssl",
          "ssl.ca.location=/etc/pki_service/ca/cacerts.pem",
          "ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem",
          "ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem"
        ]
        topicConfParam=[
          "acks=-1"
        ]
      )
    }

    <%# process imjournal logs %>
    if $inputname == 'imjournal' then {
        call ruleset_imjounal_syslog
    }

  rsyslog.conf: "global (\n  workdirectory = \"/var/spool/rsyslog\"\n  maxMessageSize
    = \"900k\"\n)\n\nmodule(load = \"imfile\")\nmodule(load = \"omkafka\")\nmodule(load
    = \"omprog\")\nmodule(load = \"mmexternal\")\nmodule(load = \"mmjsonparse\")\nmodule(load
    = \"omstdout\")\nmodule(load = \"impstats\"\n       interval=\"120\"\n       severity=\"7\"\n
    \      ruleset=\"ruleset_stdout\")\n\nruleset(name=\"ruleset_impstats\") {\n  call
    ruleset_stdout\n  action(type=\"omprog\"\n       name=\"pki_mointor\"\n       binary=\"/usr/local/bin/pki_cert_monitor.py
    /etc/pki_service/root/rsyslog_agent\"\n       queue.type=\"LinkedList\"\n       queue.saveOnShutdown=\"off\"\n
    \      queue.workerThreads=\"1\"\n       action.execOnlyOnceEveryInterval=\"1800\"\n
    \      action.resumeInterval=\"5\"\n       killUnresponsive=\"on\"\n       forceSingleInstance=\"on\")\n}\n\nruleset(name=\"ruleset_stdout\")
    {  \n  action(type=\"omstdout\")\n}\n\n$IncludeConfig /etc/rsyslog.d/*.conf"
  solr.conf.erb: "<%# INPUT DEFINITIONS %>\ninput(\n  type=\"imfile\"\n  File=\"/home/sfdc/logs/solr/*.gmt.log\"\n
    \ PersistStateInterval=\"50000\"\n  Tag=\"solr\"\n  ruleset=\"ruleset_solr\"\n
    \ startmsg.regex=\"^([[:alnum:]]{1,})`[[:digit:]]{14}.[[:digit:]]{3}`\"\n  readTimeout
    = \"5\"\n  addmetadata=\"on\"\n  escapelf=\"off\"\n  discardTruncatedMsg=\"on\"\n)\n\n<%#
    Output Template%>\ntemplate(name=\"tpl_solr\" type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-flatten:1\\\",\\\"data\\\":{\")\n
    \ property(name=\"msg\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"$!source_type\" outname=\"source_type\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!datacenter\" outname=\"dc\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!superpod\" outname=\"superpod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!pod\" outname=\"pod\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!metadata!filename\" outname=\"source\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!hostname\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!node\" format=\"jsonfr\")  \n  constant(value=\",\")\n
    \ property(name=\"timegenerated\" outname=\"agent_timestamp\" dateFormat=\"rfc3339\"
    date.inUTC=\"on\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!owner\"
    outname=\"owner\" format=\"jsonfr\")\n  constant(value=\"}}\\n\")\n}\n\n<%# RULESET
    DEFINITION %>\nruleset(name=\"ruleset_solr\" queue.type=\"LinkedList\" queue.size=\"5000\"
    queue.lightdelaymark=\"3000\" queue.fulldelaymark=\"4000\") {\n\n  <%# Template
    Spec %>\n  set $!datacenter = \"<%= config.cluster %>\";\n  set $!superpod = \"NONE\";\n
    \ set $!pod = \"<%= config.node %>\";\n  set $!owner = \"Search\";\n  set $!source_type
    = \"solr6\";\n\n  <%# Output action %>\n  action(\n    type=\"omkafka\"\n    name=\"kafka_solr\"\n
    \   broker= \"<%= config.broker_vip %>\"\n    template=\"tpl_solr\"\n    topic=
    \"<%= config.kafka_topic %>\"\n    partitions.auto=\"on\"\n    resubmitOnFailure=\"off\"\n
    \   reopenonhup=\"on\"\n    action.resumeRetryCount=\"-1\"\n    confParam=[\n
    \     \"batch.num.messages=10000\",\n      \"client.id=collections.rsyslog.test\",\n
    \     \"compression.codec=gzip\",\n      \"max.in.flight.requests.per.connection=2\",\n
    \     \"message.max.bytes=1000000\",\n      \"queue.buffering.max.ms=5000\",\n
    \     \"retries=86400\",\n      \"retry.backoff.ms=1000\",\n      \"socket.keepalive.enable=true\",\n
    \     \"security.protocol=ssl\",\n      \"ssl.ca.location=/etc/pki_service/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem\",\n
    \     \"ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  )\n}\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    pcn: deploy
  name: rsyslog-configmap
  namespace: sam-system
