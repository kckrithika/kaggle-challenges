apiVersion: v1
data:
  container.conf.erb: "<%# INPUT DEFINITIONS %>\n<%# Collect log files in /var/log/container
    %>\ninput(\n  type=\"imfile\"\n  File=\"/var/log/containers/*.log\"\n  PersistStateInterval=\"500\"\n
    \ Tag=\"kubernetes\"\n  ruleset=\"kubernetes_dockercontainers_ruleset\"\n  addmetadata=\"on\"\n
    \ escapelf=\"off\"\n  discardTruncatedMsg=\"on\"\n)\n\n<%# ------- Start of definition
    of schema templates ------- %>\n\n<%# Align universal schema envelope %>\ntemplate(name=\"tpl_containers_log\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-envelope:1\\\",\\\"data\\\":{\")\n
    \ constant(value=\"\\\"event\\\":\")\n  property(name=\"$!event\")\n  constant(value=\",\")\n
    \ property(name=\"$!hostname\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!logdata!time\"
    outname=\"event_timestamp\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"timegenerated\"
    outname=\"agent_timestamp\" dateFormat=\"rfc3339\" date.inUTC=\"on\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!owner\" outname=\"owner\" format=\"jsonfr\")\n
    \ constant(value=\",\\\"annotations\\\": \")\n  property(name=\"$!annotations\")\n
    \ constant(value=\"}}\\n\")\n}\n\n<%# kubernetes container logs event %>\ntemplate(name=\"kubernetes_event\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"kubernetes:1\\\",\\\"data\\\":{\")\n
    \ property(name=\"$!logdata!log\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"$!severity\" outname=\"severity\" format=\"jsonfr\")\n  constant(value=\"}}\\n\")\n}\n\n<%#
    rsyslog base annotations %>\ntemplate(name = \"kubernetes_annotation_rsyslog_base\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"rsyslog-base:1\\\",\\\"data\\\":{\")\n
    \ constant(value=\"\\\"source\\\": \\\"journald\\\"\")\n  constant(value=\",\\\"source_type\\\":
    \\\"container_app_log\\\"\")\n  constant(value=\",\")\n  property(name=\"$!datacenter\"
    outname=\"dc\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!substrate\"
    outname=\"substrate\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!account\"
    outname=\"account\" format=\"jsonfr\")\n  constant(value=\",\\\"region\\\": \\\"<%=config.region%>\\\"\")\n
    \ constant(value=\",\\\"zone\\\": \\\"<%=config.zone%>\\\"\")\n  constant(value=\"}\\n\")\n}\n\n<%#
    container logs anotations %>\ntemplate(name = \"kubernetes_annotation_kubernetes_container\"
    type=\"list\") {\n  constant(value = \"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"kubernetes-container:1\\\",\\\"data\\\":\")\n
    \ property(name = \"$!kubernetes_container_data\")\n  constant(value = \"}\")\n}\n\nruleset(name
    = \"kubernetes_dockercontainers_ruleset\") {\n  <%# mmjsonparse to parse log message
    %>\n  action(type=\"mmjsonparse\" cookie=\"\" container=\"$!logdata\")\n  \n  set
    $!hostname = \"<%=config.node%>\";\n\n  if $!logdata!stream == 'stderr' then {\n
    \   set $!severity = \"error\";\n  } else {\n    set $!severity = \"info\";\n
    \ }\n\n  <%# ------------ parsing kubernetes container annotation information
    -------------%>\n  <%# retrieve file name from /var/log/containers/kube-proxy-gke-gao-collection-poc-larger-pool-7372f548-5v3r_kube-system_kube-proxy-7a7cad04f5245c7d12f05e380b9f3a77098d01ff36184529c245e57463c3686a.log
    %>\n  set $!file_name = field($!metadata!filename, 47, 5);\n\n  <%# [POD name]_[namespace]_[container-name-container-UID].log
    %>\n  <%# kube-dns-788979dc8f-q7zzr_kube-system_prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log
    %>\n  <%# rsyslog-daemonset-bsnxr_sam-system_config-gen-container-050479f11abc5957e7b46cc6e28c5843ffa400703d9a9f0897325ad4965ccd1f.log
    %>\n  set $!kubernetes_container_data!io.k8s.pod.name = field($!file_name, 95,
    1);\n  set $!kubernetes_container_data!io.k8s.pod.namespace = field($!file_name,
    95, 2);\n  set $!kubernetes_container_data!io.k8s.cluster.name = \"<%=config.cluster%>\";\n\n
    \ <%# [container-name-container-UID].log %>\n  <%# prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log
    %>\n  set $!container_info = field($!file_name, 95, 3);\n  set $!kubernetes_container_data!io.k8s.container_name
    = substring($!container_info, 0, strlen($!container_info) - 5 - strlen($!kubernetes_container_data!container_id));\n\n
    \ <%# forces the annotation to be indexed in splunk %>\n  set $!kubernetes_container_data!index
    = \"true\";\n\n  <%# ------------ end of parsing kubernetes container annotations
    ----------------%>\n  \n\n  <%# container logs event %>\n  set $!event = exec_template(\"kubernetes_event\");\n\n
    \ <%# kubernetes app log annotation array %>\n  set $!datacenter = \"<%=config.include?(:kingdom)
    ? config.kingdom : 'mvp'%>\";\n  set $!substrate = \"<%=config.include?(:substrate)
    ? config.substrate : 'gcp' %>\";\n  set $!account = \"<%=config.include?(:account_name)
    ? config.account_name : config.project_id %>\";\n  set $!annotations = \"[\" &
    exec_template(\"kubernetes_annotation_kubernetes_container\") & \", \" & exec_template(\"kubernetes_annotation_rsyslog_base\")
    & \"]\";\n\n  <%# action(\n    name=\"syslog_file_action\"\n    type=\"omfile\"\n
    \   file=\"/var/log/kubernetes_dockercontainers_ruleset.log\"\n    template=\"tpl_containers_log\"\n
    \ ) %>\n\n  <%# Output action %>\n  action(\n    type=\"omkafka\"\n    name=\"kafka_kubernetes_kafka_action\"\n
    \   broker=\"<%= config.broker_vip %>\"\n    template=\"tpl_containers_log\"\n
    \   topic= \"<%= config.kafka_topic %>\"\n    keepFailedMessages=\"on\"\n    partitions.auto=\"on\"\n
    \   resubmitOnFailure=\"off\"\n    reopenonhup=\"on\"\n    action.resumeRetryCount=\"-1\"\n
    \   confParam=[\n      \"batch.num.messages=10000\",\n      \"client.id=collections.rsyslog.syslog\",\n
    \     \"compression.codec=gzip\",\n      \"max.in.flight.requests.per.connection=2\",\n
    \     \"message.max.bytes=1000000\",\n      \"queue.buffering.max.ms=5000\",\n
    \     \"retries=2\",\n      \"retry.backoff.ms=100\",\n      \"socket.keepalive.enable=true\",\n
    \     \"security.protocol=ssl\",\n      \"ssl.ca.location=/cert1/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/cert1/client/certificates/client.pem\",\n      \"ssl.key.location=/cert1/client/keys/client-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  ) & stop\n\n}\n<%# ----
    / End of definition for docker containers tenant ---- %>\n"
  core.conf.erb: "<%# INPUT DEFINITIONS %>\ninput(\n  type=\"imfile\"\n  File=\"/home/sfdc/logs/sfdc/*.gmt.log\"\n
    \ PersistStateInterval=\"50000\"\n  startmsg.regex=\"^([[:alnum:]]{1,})`[[:digit:]]{14}.[[:digit:]]{3}`\"\n
    \ readTimeout = \"5\"\n  Tag=\"core\"\n  ruleset=\"ruleset_core\"\n  addmetadata=\"on\"\n
    \ escapelf=\"off\"\n  discardTruncatedMsg=\"on\"\n)\n\n<%# Output Template%>\ntemplate(name
    = \"tpl_core\" type=\"list\") {\n  constant(value=\"{\\\"@version\\\": \\\"20\\\"\")\n
    \ constant(value=\",\\\"type\\\": \\\"core\\\"\")\n  constant(value=\",\")\n  property(name=\"$!host\"
    outname=\"host\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!pod\"
    outname=\"pod\" format=\"jsonfr\")\n  constant(value=\",\\\"datacenter\\\": \\\"<%=config.datacenter%>\\\"\")\n
    \ constant(value=\",\\\"superpod\\\": \\\"NONE\\\"\")\n  constant(value=\",\")\n
    \ property(name=\"msg\" outname=\"message\" format=\"jsonf\")\n  constant(value=\",\")\n
    \ property(name=\"$!metadata!filename\" outname=\"path\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"$!ts_generated\" outname=\"timestamp_produce\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!ts_raw\" outname=\"raw_timestamp\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!log_record_type\"
    outname=\"log_record_type\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!uuid\"
    outname=\"uuid\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!appversion\"
    outname=\"appversion\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!apptype\"
    outname=\"apptype\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!filedate\"
    outname=\"filedate\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!role\"
    outname=\"role\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!substrate\"
    outname=\"dc\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!account\"
    outname=\"dc\" format=\"jsonfr\")\n  constant(value=\",\\\"region\\\": \\\"<%=config.region%>\\\"\")\n
    \ constant(value=\",\\\"zone\\\": \\\"<%=config.zone%>\\\"\")\n  constant(value=\",
    \\\"latency\\\": 0}\\n\")\n}\n\n# 20171103184919.875 --> 2017-11-03T18:49:19.875Z\ntemplate(name=\"tpl_origin_ts\"
    type=\"list\") {\n  property(name=\"$!ts_raw\" position.from=\"1\" position.to=\"4\")\n
    \ constant(value=\"-\")\n  property(name=\"$!ts_raw\" position.from=\"5\" position.to=\"6\")\n
    \ constant(value=\"-\")\n  property(name=\"$!ts_raw\" position.from=\"7\" position.to=\"8\")\n
    \ constant(value=\"T\")\n  property(name=\"$!ts_raw\" position.from=\"9\" position.to=\"10\")\n
    \ constant(value=\":\")\n  property(name=\"$!ts_raw\" position.from=\"11\" position.to=\"12\")\n
    \ constant(value=\":\")\n  property(name=\"$!ts_raw\" position.from=\"13\" position.to=\"18\")\n
    \ constant(value=\"Z\")\n}\n\n# 2017-12-14T08:01:17.267119+00:00 -> 2017-12-14T08:01:17.267Z\ntemplate(name=\"tpl_generated_ts\"
    type=\"list\") {\n  property(name=\"timegenerated\" dateFormat=\"rfc3339\" position.from=\"1\"
    position.to=\"23\")\n  constant(value=\"Z\")\n}\n\n<%# RULESET DEFINITION %>\nruleset(name=\"ruleset_core\")
    {\n\n  <%# Template Spec %>\n  set $!log_record_type = field($msg, 96, 1);\n  set
    $!ts_raw = field($msg, 96, 2);\n  set $!ts = exec_template(\"tpl_origin_ts\");\n
    \ set $!ts_generated = exec_template(\"tpl_generated_ts\");\n  # filename - mist61.sfdc.debug-perf-core-6b86b5c8b7-7r6f7.app.20180907.214.gmt.log\n
    \ set $!filename = field($!metadata!filename, 47, 5);\n  set $!host = field($!filename,
    46, 3);\n  set $!pod = field($!host, 45, 1);\n  set $!apptype = field($!filename,
    46, 2);\n  set $!role = field($!filename, 46, 4);\n  set $!filedate = field($!filename,
    46, 5);\n  set $!appversion = field($!filename, 46, 6);\n  set $!uuid = $!ts_raw
    & field($msg, 96, 16) & field($!host, 45, 4) & \"-\" & field($!host, 45, 5);\n
    \ \n  <%# Output action %>\n  action(\n    type=\"omkafka\"\n    name=\"kafka_core\"\n
    \   broker=\"<%=config.broker_vip%>\"\n    template=\"tpl_core\"\n    topic=\"<%=config.kafka_topic%>\"\n
    \   partitions.auto=\"on\"\n    resubmitOnFailure=\"on\"\n    reopenonhup=\"on\"\n
    \   action.resumeRetryCount=\"-1\"\n    confParam=[\n      \"batch.num.messages=10000\",\n
    \     \"compression.codec=gzip\",\n      \"max.in.flight.requests.per.connection=2\",\n
    \     \"message.max.bytes=1000000\",\n      \"queue.buffering.max.ms=5000\",\n
    \     \"retries=86400\",\n      \"retry.backoff.ms=1000\",\n      \"socket.keepalive.enable=true\",\n
    \     \"security.protocol=ssl\",\n      \"ssl.ca.location=/cert1/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/cert1/client/certificates/client.pem\",\n      \"ssl.key.location=/cert1/client/keys/client-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  )\n}\n\n<%# END OF FILE
    %>"
  general.conf.erb: |-
    input(
      type="imfile"
      File="<%=config.file_path%>"
      PersistStateInterval="50000"
    <%- if config.include? :start_regex -%>
      startmsg.regex="<%=config.start_regex%>"
      readTimeout="5"
    <%- else -%>
      readMode="0"
    <%- end -%>
      Tag="<%=config.log_type%>"
      ruleset="ruleset_<%=config.log_type%>"
      addmetadata="on"
      escapelf="off"
      discardTruncatedMsg="on"
    )

    template(name="tpl_<%=config.log_type%>" type="list") {
      constant(value="{\"schema_type\":\"json-schema\",\"schema_id\":\"event-flatten:1\",\"data\":{")
      property(name="msg" outname="message" format="jsonf")
      constant(value=",")
      property(name="$!source_type" outname="source_type" format="jsonfr")
      constant(value=",")
      property(name="$!datacenter" outname="dc" format="jsonfr")
      constant(value=",")
      property(name="$!superpod" outname="superpod" format="jsonfr")
      constant(value=",")
      property(name="$!metadata!filename" outname="source" format="jsonfr")
      constant(value=",")
      property(name="$!hostname" format="jsonfr")
      constant(value=",")
      property(name="timegenerated" outname="agent_timestamp" dateFormat="rfc3339" date.inUTC="on" format="jsonfr")
      constant(value=",")
      property(name="$!owner" outname="owner" format="jsonfr")
      constant(value=",")
      property(name="$!substrate" outname="substrate" format="jsonfr")
      constant(value=",")
      property(name="$!account" outname="account" format="jsonfr")
      constant(value=",\"region\": \"<%=config.region%>\"")
      constant(value=",\"zone\": \"<%=config.zone%>\"")
      constant(value="}}\n")
    }

    ruleset(name="ruleset_<%=config.log_type%>") {

      <%# Template Spec %>
      set $!datacenter = "<%=config.include?(:kingdom) ? config.kingdom : 'mvp'%>";
      set $!substrate = "<%=config.include?(:substrate) ? config.substrate : 'gcp' %>";
      set $!account = "<%=config.include?(:account_name) ? config.account_name : config.project_id %>";
      set $!superpod = "NONE";
      set $!owner = "<%= config.owner %>";
      set $!source_type = "<%= config.owner %>" + ":" + "<%= config.log_type %>";
      set $!hostname = "<%=config.node%>";

      <%# Output action %>
      action(
        type="omkafka"
        name="kafka_<%= config.log_type %>"
        broker="<%= config.broker_vip %>"
        template="tpl_<%= config.log_type %>"
        topic="<%= config.kafka_topic %>"
        partitions.auto="on"
        resubmitOnFailure="on"
        reopenonhup="on"
        action.resumeRetryCount="-1"
        confParam=[
          "batch.num.messages=10000",
          "compression.codec=gzip",
          "max.in.flight.requests.per.connection=2",
          "message.max.bytes=1000000",
          "queue.buffering.max.ms=5000",
          "retries=3",
          "retry.backoff.ms=1000",
          "socket.keepalive.enable=true",
          "security.protocol=ssl",
          "ssl.ca.location=/cert1/ca/cacerts.pem",
          "ssl.certificate.location=/cert1/client/certificates/client.pem",
          "ssl.key.location=/cert1/client/keys/client-key.pem"
        ]
        topicConfParam=[
          "acks=-1"
        ]
      )
    }

    <%# END OF FILE %>
  journal.conf.erb: "module(load=\"imjournal\" StateFile=\"/var/spool/rsyslog/imjournal.state\")\n\n<%#
    syslog related schema annotations %>\ntemplate(name = \"syslog_annotation\" type=\"list\")
    {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"syslog-base:1\\\",\\\"data\\\":{\")\n
    \ constant(value=\"\\\"uuid\\\": \\\"%uuid%\\\"\")\n  constant(value=\",\\\"environment\\\":
    \\\"TechOps\\\"\")\n  constant(value=\",\\\"source\\\": \\\"%programname%\\\"\")\n
    \ constant(value=\",\\\"source_type\\\": \\\"%source_type%\\\"\")\n  constant(value=\",\\\"index\\\":
    \\\"true\\\"\")\n  constant(value=\",\")\n  property(name=\"$!datacenter\" outname=\"dc\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!substrate\" outname=\"substrate\"
    format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"$!account\" outname=\"account\"
    format=\"jsonfr\")\n  constant(value=\",\\\"region\\\": \\\"<%=config.region%>\\\"\")\n
    \ constant(value=\",\\\"zone\\\": \\\"<%=config.zone%>\\\"\")\n  constant(value=\"}\\n\")\n}\n\n<%#
    Universal schema for stdout and stderr streaming  %>\ntemplate(name=\"tpl_syslog\"
    type=\"list\") {\n  constant(value=\"{\\\"schema_type\\\":\\\"json-schema\\\",\\\"schema_id\\\":\\\"event-envelope:1\\\",\\\"data\\\":{\")\n
    \ constant(value=\"\\\"event\\\":\")\n  property(name=\"$!event\")\n  constant(value=\",\")\n
    \ property(name=\"$!hostname\" format=\"jsonfr\")\n  constant(value=\",\")\n  property(name=\"timegenerated\"
    outname=\"event_timestamp\" dateFormat=\"rfc3339\" date.inUTC=\"on\" format=\"jsonfr\")\n
    \ constant(value=\",\")\n  property(name=\"timegenerated\" outname=\"agent_timestamp\"
    dateFormat=\"rfc3339\" date.inUTC=\"on\" format=\"jsonfr\")\n  constant(value=\",\")\n
    \ property(name=\"$!owner\" outname=\"owner\" format=\"jsonfr\")\n  constant(value=\",\\\"annotations\\\":
    \")\n  property(name=\"$!annotations\")\n  constant(value=\"}}\\n\")\n}\n\n\n<%#
    RULESET DEFINITION %>\nruleset(name=\"ruleset_imjounal_syslog\" queue.type=\"LinkedList\"
    queue.size=\"10000\" queue.discardmark=\"9000\" queue.lightdelaymark=\"10000\"
    queue.fulldelaymark=\"10000\" queue.discardseverity=\"5\") {\n\n  <%# # Template
    Spec %>\n  set $!hostname = \"<%=config.node%>\";\n  set $!event!schema_type =
    \"json-schema\";\n  set $!event!schema_id = \"syslog:1\";\n  set $!event!data!message
    = $msg;\n  set $!owner = \"rsyslog\";\n  set $!event!data!facility = $syslogfacility-text;\n
    \ set $!event!data!severity = $syslogseverity-text;\n  set $!event!data!priority
    = $syslogpriority-text;\n  \n  set $!datacenter = \"<%=config.include?(:kingdom)
    ? config.kingdom : 'mvp'%>\";\n  set $!substrate = \"<%=config.include?(:substrate)
    ? config.substrate : 'gcp' %>\";\n  set $!account = \"<%=config.include?(:account_name)
    ? config.account_name : config.project_id %>\";\n  set $!annotations = \"[\" &
    exec_template(\"syslog_annotation\") & \"]\";\n\n  <%# debugging %>\n  <%# action(name=\"imjournal_syslog\"\n
    \   type=\"omfile\"\n    template=\"tpl_syslog\"\n    File=\"/var/log/imjournal_syslog.log\"\n
    \ ) %>\n\n  <%# # Output action %>\n  action(\n    type=\"omkafka\"\n    name=\"kafka_imjournal_syslog\"\n
    \   broker=\"<%=config.broker_vip%>\"\n    template=\"tpl_syslog\"\n    topic=\"<%=config.kafka_topic%>\"\n
    \   partitions.auto=\"on\"\n    resubmitOnFailure=\"off\"\n    reopenonhup=\"on\"\n
    \   action.resumeRetryCount=\"0\"\n    confParam=[\n      \"batch.num.messages=10000\",\n
    \     \"client.id=collections.rsyslog.syslog\",\n      \"compression.codec=gzip\",\n
    \     \"max.in.flight.requests.per.connection=2\",\n      \"message.max.bytes=1000000\",\n
    \     \"queue.buffering.max.ms=5000\",\n      \"retries=2\",\n      \"retry.backoff.ms=100\",\n
    \     \"socket.keepalive.enable=true\",\n      \"security.protocol=ssl\",\n      \"ssl.ca.location=/cert1/ca/cacerts.pem\",\n
    \     \"ssl.certificate.location=/cert1/client/certificates/client.pem\",\n      \"ssl.key.location=/cert1/client/keys/client-key.pem\"\n
    \   ]\n    topicConfParam=[\n      \"acks=-1\"\n    ]\n  )\n}\n\n<%# process imjournal
    logs %>\nif $inputname == 'imjournal' then {\n    call ruleset_imjounal_syslog\n}\n\n"
  manifests.yaml: |-
    templates:
      - input: container.conf.erb
        output: /etc/rsyslog.d/40-container.conf
      - input: journal.conf.erb
        output: /etc/rsyslog.d/30-journal.conf
    data:
      datacenter: "<%=config.datacenter%>"
      substrate: "<%=config.substrate%>"
      region: "<%=config.substrate%>"
      zone: "<%=config.substrate%>"
      broker_vip: "<%=config.broker_vip%>"
      kafka_topic: "<%=config.general_topic%>"
  rsyslog.conf: "global (\n  workdirectory = \"/var/spool/rsyslog\"\n  maxMessageSize
    = \"900k\"\n)\n\nmodule(load = \"imfile\")\nmodule(load = \"omkafka\")\nmodule(load
    = \"omprog\")\nmodule(load = \"mmexternal\")\nmodule(load = \"mmjsonparse\")\nmodule(load
    = \"omstdout\")\nmodule(load = \"impstats\"\n       interval=\"120\"\n       severity=\"7\"\n
    \      ruleset=\"ruleset_stdout\")\n\nruleset(name=\"ruleset_impstats\") {\n  call
    ruleset_stdout\n  action(type=\"omprog\"\n       name=\"pki_mointor\"\n       binary=\"/usr/local/bin/pki_cert_monitor.py
    /cert1/client\"\n       queue.type=\"LinkedList\"\n       queue.saveOnShutdown=\"off\"\n
    \      queue.workerThreads=\"1\"\n       action.execOnlyOnceEveryInterval=\"1800\"\n
    \      action.resumeInterval=\"5\"\n       killUnresponsive=\"on\"\n       forceSingleInstance=\"on\")\n}\n\nruleset(name=\"ruleset_stdout\")
    {  \n  action(type=\"omstdout\")\n}\n\n$IncludeConfig /etc/rsyslog.d/*.conf"
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    pcn: deploy
  name: rsyslog-configmap
  namespace: sam-system
