apiVersion: v1
data:
  forwarder.conf.erb: |
    input(
        type="imudp"
        port="<%= config.listen_port %>"
        ruleset="rs_omhttp_funnel"
    )

    template(name="tpl_echo" type="string" string="%rawmsg%")

    ruleset(name="rs_omhttp_funnel" queue.type="LinkedList" queue.size="5000" queue.lightdelaymark="3000" queue.fulldelaymark="4000") {

        action(
            name="action_funnel_forward"
            type="omhttp"
            template="tpl_echo"

            server="<%= config.funnel_vip %>"
            serverport="<%= config.funnel_port %>"
            restpath="funnel/v1/publishBatch?avroSchemaFingerprint=AVG7NnlcHNdk4t_zn2JBnQ"
            usehttps="<%= config.funnel_https %>"

            batch="on"
            batch.maxsize="300"
            batch.maxbytes="1000000" # ~1Mb
            batch.format="jsonarray"

            compress="on"
            retry="on"
            retry.ruleset="rs_omhttp_funnel_retry" # Retry once
        )
    }

    ruleset(name="rs_omhttp_funnel_retry" queue.type="LinkedList" queue.size="5000" queue.lightdelaymark="3000" queue.fulldelaymark="4000") {
        action(
            name="action_funnel_forward_retry"
            type="omhttp"
            template="tpl_echo"

            server="<%= config.funnel_vip %>"
            serverport="<%= config.funnel_port %>"
            restpath="funnel/v1/publishBatch?avroSchemaFingerprint=AVG7NnlcHNdk4t_zn2JBnQ"
            usehttps="<%= config.funnel_https %>"

            batch="on"
            batch.maxsize="300"
            batch.maxbytes="1000000" # ~1Mb
            batch.format="jsonarray"

            compress="on"
            retry="off"
        )
    }
  rsyslog.conf: |-
    # rsyslog conf to read from UDP and forward as-is to Funnel

    module(load="impstats")
    module(load="imudp")
    module(load="omkafka")
    module(load="omstdout")
    module(load="mmjsonparse")

    # load statistics
    module(load="impstats" interval="120" format="json")

    # throw most things to stdout
    action(type="omstdout")

    $IncludeConfig /etc/rsyslog.d/*.conf
  scraper.yaml.erb: |
    metric_filters:
      - cpu.usage.system
      - cpu.usage.total
      - cpu.usage.user
      - cpu.load_average
      - network.tx_dropped
      - network.rx_errors
      - network.rx_bytes
      - network.tx_errors
      - network.rx_packets
      - network.tx_bytes
      - network.rx_dropped
      - network.tx_packets
      - memory.cache
      - memory.container_data.pgfault
      - memory.rss
      - memory.failcnt
      - memory.working_set
      - memory.usage
      - memory.container_data.pgmajfault

    # Optionally specify tag_name
    # Format: <label_name>=<tag_name>
    # Extract label_name and forward as tag_name
    label_filters:
      - io.kubernetes.container.name
      - io.kubernetes.pod.name
      - io.kubernetes.pod.namespace

    substrate: <%= config.include?(:substrate) ? config.substrate : 'gcp' %>
    region: <%= config.region %>
    zone: <%= config.zone %>
    kingdom: <%= config.include?(:kingdom) ? config.kingdom : 'mvp' %>
    superpod: NONE
    cluster: <%= config.cluster %>
    account_name: <%= config.include?(:account_name) ? config.account_name : config.project_id %>
    scrape_interval: 120
    forward_host: 127.0.0.1
    forward_port: <%= config.forward_port %>
    cadvisor_base_url: <%= config.cadvisor_host.empty? ? config.node : config.cadvisor_host %>:<%= config.cadvisor_port %>
    node: <%= config.node %>
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    pcn: deploy
  name: cadvisor-configmap
  namespace: sam-system
