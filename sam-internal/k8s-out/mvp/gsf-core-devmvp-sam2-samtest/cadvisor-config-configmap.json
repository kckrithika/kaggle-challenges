{
   "apiVersion": "v1",
   "data": {
      "forwarder.conf.erb": "input(\n    type=\"imudp\"\n    port=\"<%= config.listen_port %>\"\n    ruleset=\"rs_omhttp_funnel\"\n)\n\ntemplate(name=\"tpl_echo\" type=\"string\" string=\"%rawmsg%\")\n\nruleset(name=\"rs_omhttp_funnel\" queue.type=\"LinkedList\" queue.size=\"5000\" queue.lightdelaymark=\"3000\" queue.fulldelaymark=\"4000\") {\n\n    action(\n        name=\"action_funnel_forward\"\n        type=\"omhttp\"\n        template=\"tpl_echo\"\n\n        server=\"<%= config.funnel_vip %>\"\n        serverport=\"<%= config.funnel_port %>\"\n        restpath=\"funnel/v1/publishBatch?avroSchemaFingerprint=AVG7NnlcHNdk4t_zn2JBnQ\"\n        usehttps=\"<%= config.funnel_https %>\"\n\n        batch=\"on\"\n        batch.maxsize=\"300\"\n        batch.maxbytes=\"1000000\" # ~1Mb\n        batch.format=\"jsonarray\"\n\n        compress=\"on\"\n        retry=\"on\"\n        retry.ruleset=\"rs_omhttp_funnel_retry\" # Retry once\n    )\n}\n\nruleset(name=\"rs_omhttp_funnel_retry\" queue.type=\"LinkedList\" queue.size=\"5000\" queue.lightdelaymark=\"3000\" queue.fulldelaymark=\"4000\") {\n    action(\n        name=\"action_funnel_forward_retry\"\n        type=\"omhttp\"\n        template=\"tpl_echo\"\n\n        server=\"<%= config.funnel_vip %>\"\n        serverport=\"<%= config.funnel_port %>\"\n        restpath=\"funnel/v1/publishBatch?avroSchemaFingerprint=AVG7NnlcHNdk4t_zn2JBnQ\"\n        usehttps=\"<%= config.funnel_https %>\"\n\n        batch=\"on\"\n        batch.maxsize=\"300\"\n        batch.maxbytes=\"1000000\" # ~1Mb\n        batch.format=\"jsonarray\"\n\n        compress=\"on\"\n        retry=\"off\"\n    )\n}\n",
      "rsyslog.conf": "# rsyslog conf to read from UDP and forward as-is to Funnel\n\nmodule(load=\"impstats\")\nmodule(load=\"imudp\")\nmodule(load=\"omkafka\")\nmodule(load=\"omstdout\")\nmodule(load=\"mmjsonparse\")\n\n# load statistics\nmodule(load=\"impstats\" interval=\"120\" format=\"json\")\n\n# throw most things to stdout\naction(type=\"omstdout\")\n\n$IncludeConfig /etc/rsyslog.d/*.conf",
      "scraper.yaml.erb": "metric_filters:\n  - cpu.usage.system\n  - cpu.usage.total\n  - cpu.usage.user\n  - cpu.load_average\n  - network.tx_dropped\n  - network.rx_errors\n  - network.rx_bytes\n  - network.tx_errors\n  - network.rx_packets\n  - network.tx_bytes\n  - network.rx_dropped\n  - network.tx_packets\n  - memory.cache\n  - memory.container_data.pgfault\n  - memory.rss\n  - memory.failcnt\n  - memory.working_set\n  - memory.usage\n  - memory.container_data.pgmajfault\n\n# Optionally specify tag_name\n# Format: <label_name>=<tag_name>\n# Extract label_name and forward as tag_name\nlabel_filters:\n  - io.kubernetes.container.name\n  - io.kubernetes.pod.name\n  - io.kubernetes.pod.namespace\n\nsubstrate: <%= config.include?(:substrate) ? config.substrate : 'gcp' %>\nregion: <%= config.region %>\nzone: <%= config.zone %>\nkingdom: <%= config.include?(:kingdom) ? config.kingdom : 'mvp' %>\nsuperpod: NONE\ncluster: <%= config.cluster %>\naccount_name: <%= config.include?(:account_name) ? config.account_name : config.project_id %>\nscrape_interval: 120\nforward_host: 127.0.0.1\nforward_port: <%= config.forward_port %>\ncadvisor_base_url: <%= config.cadvisor_host.empty? ? config.node : config.cadvisor_host %>:<%= config.cadvisor_port %>\nnode: <%= config.node %>\n"
   },
   "kind": "ConfigMap",
   "metadata": {
      "labels": {
         "pcn": "deploy"
      },
      "name": "cadvisor-configmap",
      "namespace": "sam-system"
   }
}
