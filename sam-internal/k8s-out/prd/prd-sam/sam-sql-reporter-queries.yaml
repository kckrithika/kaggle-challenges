apiVersion: v1
data:
  sam-sql-queries.json: |-
    {
      "queries": [
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByControlEstate",
          "sql": "SELECT min(diff_seconds), avg(diff_seconds), max(diff_seconds), ControlEstate \nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ControlEstate FROM k8s_resource ) AS ss\nGROUP BY ControlEstate"
        },
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByHour",
          "sql": "SELECT Count(*) as Count, avg(diff_seconds), std(diff_seconds), min(diff_seconds), max(diff_seconds), FROM_UNIXTIME(ProduceTime / 1000000000, \"%y-%m-%d %k\") as DayHour\nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ProduceTime FROM k8s_resource ) AS ss\nGROUP BY DayHour;"
        },
        {
          "name": "Host-Os-Versions-Aggregate",
          "sql": "SELECT kernelVersion, COUNT(*) FROM nodeDetailView GROUP BY kernelVersion ORDER BY kernelVersion DESC"
        },
        {
          "name": "Host-Os-Versions",
          "sql": "SELECT Name, kernelVersion FROM nodeDetailView ORDER BY kernelVersion DESC"
        },
        {
          "name": "Hosts-All",
          "sql": "SELECT * FROM nodeDetailView"
        },
        {
          "name": "Hosts-Not-Ready-Sam",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND NOT Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Not-Ready-Ceph",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Docker-Version",
          "sql": "SELECT ControlEstate, Name, containerRuntimeVersion FROM nodeDetailView ORDER BY containerRuntimeVersion"
        },
        {
          "name": "Hosts-Kube-Version",
          "sql": "SELECT Name, kubeletVersion, Ready FROM nodeDetailView ORDER BY kubeletVersion"
        },
        {
          "name": "Hosts-Kube-Version-Aggregate",
          "sql": "SELECT Kingdom, kubeletVersion, COUNT(*) FROM nodeDetailView GROUP BY Kingdom, kubeletVersion ORDER BY kubeletVersion"
        },
        {
          "name": "Resource-Types-By-Kingdom",
          "sql": "SELECT ControlEstate, ApiKind, Count(*) FROM ( SELECT ControlEstate, ApiKind, IsTombstone FROM k8s_resource where IsTombstone \u003c\u003e 1) AS ss GROUP BY ControlEstate, ApiKind ORDER BY ControlEstate"
        },
        {
          "name": "Bad-Customer-Deployments-Production",
          "sql": "SELECT * FROM\n(\n  SELECT\n    ControlEstate,\n    Namespace, \n    Name,\n    JSON_EXTRACT(Payload, '$.metadata.annotations.\"smb.sam.data.sfdc.net/emailTo\"') AS email,\n    JSON_EXTRACT(Payload, '$.spec.replicas') AS desiredReplicas,\n    JSON_EXTRACT(Payload, '$.status.availableReplicas') AS availableReplicas, \n    JSON_EXTRACT(Payload, '$.status.replicas') AS replicas,\n    JSON_EXTRACT(Payload, '$.status.readyReplicas') AS readyReplicas,\n    JSON_EXTRACT(Payload, '$.status.updatedReplicas') AS updatedReplicas,\n    CONCAT('http://dashboard-',SUBSTR(ControlEstate, 1, 3),'-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/',Namespace,'/',Name,'?namespace=',Namespace) AS Url\n  FROM k8s_resource\n  WHERE ApiKind = 'Deployment'\n) AS ss\nWHERE\n  ( Namespace != 'sam-watchdog' AND Namespace != 'sam-system' AND Namespace != 'csc-sam') AND\n  (availableReplicas != desiredReplicas OR availableReplicas IS NULL) AND\n  NOT ControlEstate LIKE 'prd-%' AND\n  desiredReplicas != 0"
        },
        {
          "name": "Bad-Pods-By-Host-Production",
          "sql": "select * from (\nselect\n        NodeName,\n        NodeUrl,\n        SUM(PendingCount) AS PendingCount,\n        SUM(FailedCount) AS FailedCount,\n        SUM(SucceededCount) AS SucceededCount,\n        SUM(OtherCount) AS OtherCount,\n        SUM(RunningCount) AS RunningCount,\n        GROUP_CONCAT(CustomerPodWithIssue SEPARATOR '; ') AS CustomerPodWithIssue,\n        GROUP_CONCAT(SystemPodWithIssue SEPARATOR '; ') AS SystemPodWithIssue\nfrom (\n        select\n                NodeName,\n                CASE WHEN Phase = 'Pending' THEN 1 ELSE 0 END AS PendingCount,\n                CASE WHEN Phase = 'Failed' THEN 1 ELSE 0 END AS FailedCount,\n                CASE WHEN Phase = 'Succeeded' THEN 1 ELSE 0 END AS SucceededCount,\n                CASE WHEN Phase != 'Running' AND Phase != 'Pending' AND Phase != 'Failed' AND Phase != 'Succeeded' THEN 1 ELSE 0 END AS OtherCount,\n                CASE WHEN Phase = 'Running' THEN 1 ELSE 0 END AS RunningCount,\n                CASE WHEN Phase != 'Running' AND (Namespace = 'sam-system' OR Namespace = 'sam-watchdog' OR Namespace = 'csc-sam') THEN Name ELSE NULL END AS SystemPodWithIssue,\n                CASE WHEN Phase != 'Running' AND (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam') THEN Name ELSE NULL END AS CustomerPodWithIssue,\n                NodeUrl\n        from\n                podDetailView\n        where\n                Kingdom != 'prd'\n                AND NodeName is not NULL\n                AND NOT (NodeName like '%samminionceph%')\n) as ss\ngroup by NodeName, NodeUrl\n) as ss2\nwhere (PendingCount+FailedCount+SucceededCount+OtherCount)\u003e0\norder by PendingCount+FailedCount+SucceededCount+OtherCount desc"
        },
        {
          "name": "Bad-Customer-Pods",
          "sql": "select\n        Kingdom, Namespace, Name AS PodName, Phase, NodeName, PodUrl, NodeUrl\nfrom\n        podDetailView\nwhere\n        Kingdom != 'prd'\n        and not (NodeName like '%samminionceph%')\n        and (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam')\n        and Phase != 'Running'"
        },
        {
          "name": "Image-Pull-Errors",
          "sql": "select\n  ControlEstate,\n  Namespace,\n  Payload-\u003e\u003e'$.message' as Message,\n  Payload-\u003e\u003e'$.source.host' as Host,\n  Payload-\u003e\u003e'$.involvedObject.kind' as InvolvedObjKind,\n  Payload-\u003e\u003e'$.involvedObject.name' as InvolvedObjName,\n  Payload-\u003e\u003e'$.involvedObject.namespace' as InvolvedObjNamespace\nfrom\n  k8s_resource\nwhere\n  ApiKind like 'Event' and\n  Payload-\u003e\u003e'$.message' like '%ImagePullBackOff%'"
        },
        {
          "name": "Sam-App-Pod-Age-All-Kingdoms",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest',\n  SUM(CASE WHEN ControlEstate = 'frf-sam' then Count else 0 END) as 'FrfSam',\n  SUM(CASE WHEN ControlEstate = 'phx-sam' then Count else 0 END) as 'PhxSam',\n  SUM(CASE WHEN ControlEstate = 'par-sam' then Count else 0 END) as 'ParSam',\n  SUM(CASE WHEN ControlEstate = 'ord-sam' then Count else 0 END) as 'OrdSam',\n  SUM(CASE WHEN ControlEstate = 'iad-sam' then Count else 0 END) as 'IadSam',\n  SUM(CASE WHEN ControlEstate = 'hnd-sam' then Count else 0 END) as 'HndSam',\n  SUM(CASE WHEN ControlEstate = 'dfw-sam' then Count else 0 END) as 'DfwSam',\n  SUM(CASE WHEN ControlEstate = 'ukb-sam' then Count else 0 END) as 'UkbSam',\n  SUM(CASE WHEN ControlEstate = 'cdu-sam' then Count else 0 END) as 'CduSam',\n  SUM(CASE WHEN ControlEstate = 'syd-sam' then Count else 0 END) as 'SydSam',\n  SUM(CASE WHEN ControlEstate = 'yhu-sam' then Count else 0 END) as 'YhuSam',\n  SUM(CASE WHEN ControlEstate = 'yul-sam' then Count else 0 END) as 'YulSam',\n  SUM(CASE WHEN ControlEstate = 'chx-sam' then Count else 0 END) as 'ChxSam',\n  SUM(CASE WHEN ControlEstate = 'wax-sam' then Count else 0 END) as 'WaxSam'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        },
        {
          "name": "Sam-App-Pod-Age-Prd",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        }
      ]
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: samsqlqueries
  namespace: sam-system
