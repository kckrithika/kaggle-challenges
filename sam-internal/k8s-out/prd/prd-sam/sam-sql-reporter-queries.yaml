apiVersion: v1
data:
  sam-sql-queries.json: |-
    {
      "queries": [
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'prd-samdev' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'prd-samdev'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'prd-samdev'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'prd-samdev'\n          union all\n          select 'prd-samdev' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samdev' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'prd-samdev'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'prd-samdev' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - R\u0026D - prd-samdev",
          "note": "This view gives an overview of everything running on prd-samdev.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'prd-samtest' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'prd-samtest'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'prd-samtest'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'prd-samtest'\n          union all\n          select 'prd-samtest' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtest' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'prd-samtest'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'prd-samtest' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - R\u0026D - prd-samtest",
          "note": "This view gives an overview of everything running on prd-samtest.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'prd-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'prd-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'prd-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'prd-sam'\n          union all\n          select 'prd-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'prd-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'prd-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - R\u0026D - prd-sam",
          "note": "This view gives an overview of everything running on prd-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'prd-samtwo' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'prd-samtwo'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'prd-samtwo'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'prd-samtwo'\n          union all\n          select 'prd-samtwo' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'prd-samtwo' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'prd-samtwo'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'prd-samtwo' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - R\u0026D - prd-samtwo",
          "note": "This view gives an overview of everything running on prd-samtwo.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'xrd-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'xrd-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'xrd-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'xrd-sam'\n          union all\n          select 'xrd-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'xrd-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'xrd-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'xrd-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - R\u0026D - xrd-sam",
          "note": "This view gives an overview of everything running on xrd-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'cdg-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'cdg-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'cdg-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'cdg-sam'\n          union all\n          select 'cdg-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'cdg-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'cdg-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'cdg-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - cdg-sam",
          "note": "This view gives an overview of everything running on cdg-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'cdu-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'cdu-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'cdu-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'cdu-sam'\n          union all\n          select 'cdu-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'cdu-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'cdu-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'cdu-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - cdu-sam",
          "note": "This view gives an overview of everything running on cdu-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'chx-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'chx-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'chx-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'chx-sam'\n          union all\n          select 'chx-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'chx-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'chx-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'chx-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - chx-sam",
          "note": "This view gives an overview of everything running on chx-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'dfw-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'dfw-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'dfw-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'dfw-sam'\n          union all\n          select 'dfw-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'dfw-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'dfw-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'dfw-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - dfw-sam",
          "note": "This view gives an overview of everything running on dfw-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'frf-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'frf-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'frf-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'frf-sam'\n          union all\n          select 'frf-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'frf-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'frf-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'frf-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - frf-sam",
          "note": "This view gives an overview of everything running on frf-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'hnd-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'hnd-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'hnd-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'hnd-sam'\n          union all\n          select 'hnd-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'hnd-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'hnd-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'hnd-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - hnd-sam",
          "note": "This view gives an overview of everything running on hnd-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'ia2-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'ia2-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'ia2-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'ia2-sam'\n          union all\n          select 'ia2-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'ia2-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'ia2-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'ia2-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - ia2-sam",
          "note": "This view gives an overview of everything running on ia2-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'iad-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'iad-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'iad-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'iad-sam'\n          union all\n          select 'iad-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'iad-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'iad-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'iad-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - iad-sam",
          "note": "This view gives an overview of everything running on iad-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'ord-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'ord-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'ord-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'ord-sam'\n          union all\n          select 'ord-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'ord-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'ord-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'ord-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - ord-sam",
          "note": "This view gives an overview of everything running on ord-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'par-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'par-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'par-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'par-sam'\n          union all\n          select 'par-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'par-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'par-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'par-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - par-sam",
          "note": "This view gives an overview of everything running on par-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'ph2-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'ph2-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'ph2-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'ph2-sam'\n          union all\n          select 'ph2-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'ph2-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'ph2-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'ph2-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - ph2-sam",
          "note": "This view gives an overview of everything running on ph2-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'phx-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'phx-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'phx-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'phx-sam'\n          union all\n          select 'phx-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'phx-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'phx-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'phx-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - phx-sam",
          "note": "This view gives an overview of everything running on phx-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'syd-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'syd-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'syd-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'syd-sam'\n          union all\n          select 'syd-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'syd-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'syd-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'syd-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - syd-sam",
          "note": "This view gives an overview of everything running on syd-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'ukb-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'ukb-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'ukb-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'ukb-sam'\n          union all\n          select 'ukb-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'ukb-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'ukb-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'ukb-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - ukb-sam",
          "note": "This view gives an overview of everything running on ukb-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'wax-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'wax-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'wax-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'wax-sam'\n          union all\n          select 'wax-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'wax-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'wax-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'wax-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - wax-sam",
          "note": "This view gives an overview of everything running on wax-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'yhu-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'yhu-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'yhu-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'yhu-sam'\n          union all\n          select 'yhu-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'yhu-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'yhu-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'yhu-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - yhu-sam",
          "note": "This view gives an overview of everything running on yhu-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "multisql": [
            {
              "name": "HyperSam Tags",
              "note": "Currently running tags for hypersam in sam-system",
              "sql": "select * from (\n      select\n        ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\n      from\n      (\n        select\n          Name,\n          ControlEstate,\n          substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n          substring_index(Image, ':', -1) as Tag\n        from\n        (\n          select\n            Name,\n            ControlEstate,\n            json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n          from\n          (\n            select * from\n            (\n              select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n            ) num\n            join\n            (\n            select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n            from k8s_resource\n            where\n              (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and\n              namespace = 'sam-system' and\n              Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n            ) ss\n          ) ss2\n        having not Image is NULL\n        ) ss3\n      ) ss4\n      Where controlEstate = 'yul-sam' and Image = 'hypersam'\n      group by ControlEstate, Image, Tag\n      order by ControlEstate, Image\n      ) ss5\n      order by Count desc"
            },
            {
              "name": "Unhealthy Pods in Sam-System",
              "note": "Problems with our control stack should be investigated.  DaemonSets on down machines are not blocking, but we should try to get the machines back online.",
              "sql": "select\n        case when (Phase='Pending' and Name like '%watchdog%') then 'YELLOW' else 'RED' end as Status,\n        ControlEstate,\n        Namespace,\n        Name,\n        NodeName,\n        Phase,\n        Message,\n       Payload-\u003e\u003e'$.status.conditions' as Conditions\n      from podDetailView\n      where\n        namespace = 'sam-system'\n        and ControlEstate = 'yul-sam'\n        and Phase \u003c\u003e 'Running'\n        and Name not like '%slb%'\n        and Name not like '%sdn%'"
            },
            {
              "name": "Watchdog failures",
              "note": "For phased releases, items in red should be fixed.",
              "sql": "select * from (\n        select\n        case when GROUP_CONCAT(Error, '') is null then '' when CheckerName in ('puppetChecker', 'kubeResourcesChecker', 'nodeChecker') then 'YELLOW' else 'RED' end as Status,\n        CheckerName,\n        SUM(SuccessCount) as SuccessCount,\n        SUM(FailureCount) as FailureCount,\n        SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct,\n        GROUP_CONCAT(Error, '') as Errors,\n        CONCAT('https://argus-ui.data.sfdc.net/argus/#/viewmetrics?expression=-14d:sam.watchdog.',Kingdom,'.NONE.',ControlEstate,':',CheckerName,'.status%7Bdevice%3D*%7D:avg') as Argus\n      from\n      (\n      select\n        CAST(ControlEstate as CHAR CHARACTER SET utf8) AS ControlEstate,\n        CAST(upper(substr(ControlEstate,1,3)) as CHAR CHARACTER SET utf8) AS Kingdom,\n        Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n        case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount,\n        case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as Error\n      from k8s_resource\n      where ApiKind = 'WatchDog'\n      and controlestate = 'yul-sam'\n      ) as ss\n      where CheckerName not like 'Sql%' and\n      CheckerName not like 'MachineCount%'\n      group by CheckerName\n      ) as ss2\n      order by SuccessPct"
            },
            {
              "name": "SAM Customer App Pod Age",
              "note": "When doign a phased release, apps with low age need to be investigated to make sure we did not change PodSpecTemplate by accident.  Steps to investigate pod restarts can be found \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ehere\u003c/a\u003e",
              "sql": "select\n        ControlEstate,\n        PodAgeDays,\n        PodsWithThisAge\n      from\n      (\n        select\n          ControlEstate,\n          PodAgeDays,\n          SUM(Count) as PodsWithThisAge\n        from\n        (\n          select\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            1 as Count\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60\n          and ControlEstate = 'yul-sam'\n          union all\n          select 'yul-sam' as ControlEstate, 0 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 1 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 2 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 3 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 4 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 5 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 6 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 7 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 8 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 9 as PodAgeDays, 0 as Count\n          union all\n          select 'yul-sam' as ControlEstate, 10 as PodAgeDays, 0 as Count\n        ) as ss\n        where PodAgeDays IS NOT NULL\n        group by ControlEstate, PodAgeDays\n      ) as ss2\n      group by ControlEstate, PodAgeDays"
            },
            {
              "name": "List of customer pods ordered by PodAge (top 30)",
              "sql": "select\n            case when (LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10)\u003c2) then 'YELLOW' else '' end as Status,\n            Name,\n            Namespace,\n            ControlEstate,\n            LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays,\n            Phase\n          from podDetailView\n          where IsSamApp = True and ProduceAgeInMinutes\u003c60 and Phase = 'Running'\n          and ControlEstate = 'yul-sam'\n          order by PodAgeDays\n          limit 30"
            },
            {
              "name": "Unhealthy customer pods",
              "sql": "select \n  Name,\n  Namespace,\n  ControlEstate,\n  Phase,\n  Message,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.conditions[*].message' end as Conditions,\n  case when Phase != 'Running' then Payload-\u003e\u003e'$.status.containerStatuses[*].state' end as containerStatuses\nfrom podDetailView\nwhere IsSamApp = True and ProduceAgeInMinutes\u003c60\nand ControlEstate = 'yul-sam' and Phase != 'Running'\n"
            }
          ],
          "name": "Bed Health - PROD - yul-sam",
          "note": "This view gives an overview of everything running on yul-sam.  When using this for release validation, follow the steps in \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Deploy-SAM'\u003ethis wiki page\u003c/a\u003e"
        },
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByControlEstate",
          "sql": "SELECT min(diff_seconds), avg(diff_seconds), max(diff_seconds), ControlEstate \nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ControlEstate FROM k8s_resource ) AS ss\nGROUP BY ControlEstate"
        },
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByHour",
          "sql": "SELECT Count(*) as Count, avg(diff_seconds), std(diff_seconds), min(diff_seconds), max(diff_seconds), FROM_UNIXTIME(ProduceTime / 1000000000, \"%y-%m-%d %k\") as DayHour\nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ProduceTime FROM k8s_resource ) AS ss\nGROUP BY DayHour;"
        },
        {
          "name": "Host-Os-Versions-Aggregate",
          "sql": "SELECT kernelVersion, COUNT(*) FROM nodeDetailView GROUP BY kernelVersion ORDER BY kernelVersion DESC"
        },
        {
          "name": "Host-Os-Versions",
          "sql": "SELECT Name, kernelVersion FROM nodeDetailView ORDER BY kernelVersion DESC"
        },
        {
          "name": "Hosts-All",
          "sql": "SELECT * FROM nodeDetailView"
        },
        {
          "name": "Hosts-Not-Ready-Sam",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND NOT Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Not-Ready-Ceph",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Docker-Version",
          "sql": "SELECT ControlEstate, Name, containerRuntimeVersion FROM nodeDetailView ORDER BY containerRuntimeVersion"
        },
        {
          "name": "Hosts-Kube-Version",
          "sql": "SELECT Name, kubeletVersion, Ready FROM nodeDetailView ORDER BY kubeletVersion"
        },
        {
          "name": "Hosts-Kube-Version-Aggregate",
          "sql": "SELECT Kingdom, kubeletVersion, COUNT(*) FROM nodeDetailView GROUP BY Kingdom, kubeletVersion ORDER BY kubeletVersion"
        },
        {
          "name": "Resource-Types-By-Kingdom",
          "sql": "SELECT ControlEstate, ApiKind, Count(*) FROM ( SELECT ControlEstate, ApiKind, IsTombstone FROM k8s_resource where IsTombstone \u003c\u003e 1) AS ss GROUP BY ControlEstate, ApiKind ORDER BY ControlEstate"
        },
        {
          "name": "Watchdog Aggregate Status by Checker",
          "sql": "select\n  CheckerName,\n  SUM(SuccessCount) as SuccessCount,\n  SUM(FailureCount) as FailureCount,\n  SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount)) as SuccessPct\nfrom\n(\nselect\n  Payload-\u003e\u003e'$.status.report.CheckerName' as CheckerName,\n  case when Payload-\u003e\u003e'$.status.report.Success' = 'true' then 1 else 0 end as SuccessCount,\n    case when Payload-\u003e\u003e'$.status.report.Success' = 'false' then 1 else 0 end as FailureCount\nfrom k8s_resource\nwhere ApiKind = 'WatchDog'\n) as ss\nwhere CheckerName not like 'Sql%' and \nCheckerName not like 'MachineCount%'\ngroup by CheckerName\norder by SuccessPct desc\n      "
        },
        {
          "name": "Bad-Customer-Deployments-Production",
          "sql": "SELECT * FROM\n(\n  SELECT\n    ControlEstate,\n    Namespace, \n    Name,\n    JSON_EXTRACT(Payload, '$.metadata.annotations.\"smb.sam.data.sfdc.net/emailTo\"') AS email,\n    JSON_EXTRACT(Payload, '$.spec.replicas') AS desiredReplicas,\n    JSON_EXTRACT(Payload, '$.status.availableReplicas') AS availableReplicas, \n    JSON_EXTRACT(Payload, '$.status.replicas') AS replicas,\n    JSON_EXTRACT(Payload, '$.status.readyReplicas') AS readyReplicas,\n    JSON_EXTRACT(Payload, '$.status.updatedReplicas') AS updatedReplicas,\n    CONCAT('http://dashboard-',SUBSTR(ControlEstate, 1, 3),'-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/',Namespace,'/',Name,'?namespace=',Namespace) AS Url\n  FROM k8s_resource\n  WHERE ApiKind = 'Deployment'\n) AS ss\nWHERE\n  ( Namespace != 'sam-watchdog' AND Namespace != 'sam-system' AND Namespace != 'csc-sam') AND\n  (availableReplicas != desiredReplicas OR availableReplicas IS NULL) AND\n  NOT ControlEstate LIKE 'prd-%' AND\n  desiredReplicas != 0"
        },
        {
          "name": "Bad-Customer-Pods",
          "sql": "select\n        Kingdom, Namespace, Name AS PodName, Phase, NodeName, PodUrl, NodeUrl\nfrom\n        podDetailView\nwhere\n        Kingdom != 'prd'\n        and not (NodeName like '%samminionceph%')\n        and (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam')\n        and Phase != 'Running'"
        },
        {
          "name": "Image-Pull-Errors",
          "sql": "select\n  ControlEstate,\n  Namespace,\n  Payload-\u003e\u003e'$.message' as Message,\n  Payload-\u003e\u003e'$.source.host' as Host,\n  Payload-\u003e\u003e'$.involvedObject.kind' as InvolvedObjKind,\n  Payload-\u003e\u003e'$.involvedObject.name' as InvolvedObjName,\n  Payload-\u003e\u003e'$.involvedObject.namespace' as InvolvedObjNamespace\nfrom\n  k8s_resource\nwhere\n  ApiKind like 'Event' and\n  Payload-\u003e\u003e'$.message' like '%ImagePullBackOff%'"
        },
        {
          "name": "Sam-App-Pod-Age-All-Kingdoms",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest',\n  SUM(CASE WHEN ControlEstate = 'frf-sam' then Count else 0 END) as 'FrfSam',\n  SUM(CASE WHEN ControlEstate = 'phx-sam' then Count else 0 END) as 'PhxSam',\n  SUM(CASE WHEN ControlEstate = 'par-sam' then Count else 0 END) as 'ParSam',\n  SUM(CASE WHEN ControlEstate = 'ord-sam' then Count else 0 END) as 'OrdSam',\n  SUM(CASE WHEN ControlEstate = 'iad-sam' then Count else 0 END) as 'IadSam',\n  SUM(CASE WHEN ControlEstate = 'hnd-sam' then Count else 0 END) as 'HndSam',\n  SUM(CASE WHEN ControlEstate = 'dfw-sam' then Count else 0 END) as 'DfwSam',\n  SUM(CASE WHEN ControlEstate = 'ukb-sam' then Count else 0 END) as 'UkbSam',\n  SUM(CASE WHEN ControlEstate = 'cdu-sam' then Count else 0 END) as 'CduSam',\n  SUM(CASE WHEN ControlEstate = 'syd-sam' then Count else 0 END) as 'SydSam',\n  SUM(CASE WHEN ControlEstate = 'yhu-sam' then Count else 0 END) as 'YhuSam',\n  SUM(CASE WHEN ControlEstate = 'yul-sam' then Count else 0 END) as 'YulSam',\n  SUM(CASE WHEN ControlEstate = 'chx-sam' then Count else 0 END) as 'ChxSam',\n  SUM(CASE WHEN ControlEstate = 'wax-sam' then Count else 0 END) as 'WaxSam'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003c60\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        },
        {
          "name": "Sam-App-Pod-Age-Prd",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003c60\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        },
        {
          "name": "MySql-Pods-With-Old-Produce-Age",
          "sql": "select\n  NamespacePodPrefix,\n  SUM(Count) as Count,\n  GROUP_CONCAT(ControlEstate, ' ')\nfrom\n(\n  select\n    NamespacePodPrefix,\n    ControlEstate,\n    COUNT(*) as Count\n  from\n  (\n    select\n      CONCAT(Namespace, ' ', SUBSTRING_INDEX(Name, '-', 1)) as NamespacePodPrefix,\n      ControlEstate\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003e60.0\n  ) as ss\n  group by NamespacePodPrefix, ControlEstate\n) as ss2\ngroup by NamespacePodPrefix\norder by Count desc"
        },
        {
          "name": "Prd-Sandbox-IPs-Used-By-Node",
          "sql": "select\n  ss3.*,\n  (CASE WHEN Ready = 'True' then '' else Ready END) as Ready,\n  (CASE WHEN Unschedulable IS NULL then '' else 'True' END) as Unschedulable\nfrom\n(\n  select\n    NodeName,\n    SUM(HostIpCount) as NumPodsOnHostIp,\n    SUM(PodIpCount) as NumPodsOnPodIps,\n    SUM(RunningCount) as NumPodsRunning,\n    SUM(PendingCount) as NumPodPending,\n    COUNT(distinct PodIP) as UsedPodIps,\n    (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 'OUT_OF_IPs' else '' END) as Status\n  from\n  (\n    select\n      NodeName,\n      (CASE WHEN HostIP = PodIP then HostIP else NULL END) as HostIp,\n      (CASE WHEN HostIP = PodIP then 1 else 0 END) as HostIpCount,\n      (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP,\n      (CASE WHEN HostIP = PodIP then 0 else 1 END) as PodIpCount,\n      (CASE WHEN Phase = 'Running' then 1 else 0 END) as RunningCount,\n      (CASE WHEN Phase = 'Pending' then 1 else 0 END) as PendingCount\n    from\n    (\n      select \n        NodeName,\n        Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n        Payload-\u003e\u003e'$.status.podIP' as PodIP,\n        Phase\n      from\n        podDetailView\n      where\n        ControlEstate = 'prd-sam' and Namespace != 'user-cbatra'\n    ) as ss\n  ) as ss2\n  where (NodeName like '%samcompute%' or NodeName like '%kubeapi%')\n  group by NodeName\n) as ss3\ninner join nodeDetailView\non BINARY ss3.NodeName = BINARY nodeDetailView.Name\norder by UsedPodIps desc, NumPodPending desc"
        },
        {
          "name": "Prd-All-IPs-Used-By-Node",
          "sql": "select\n  ss3.*,\n  (CASE WHEN Ready = 'True' then '' else Ready END) as Ready,\n  (CASE WHEN Unschedulable IS NULL then '' else 'True' END) as Unschedulable\nfrom\n(\n  select\n    NodeName,\n    SUM(HostIpCount) as NumPodsOnHostIp,\n    SUM(PodIpCount) as NumPodsOnPodIps,\n    SUM(RunningCount) as NumPodsRunning,\n    SUM(PendingCount) as NumPodPending,\n    COUNT(distinct PodIP) as UsedPodIps,\n    (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 'OUT_OF_IPs' else '' END) as Status\n  from\n  (\n    select\n      NodeName,\n      (CASE WHEN HostIP = PodIP then HostIP else NULL END) as HostIp,\n      (CASE WHEN HostIP = PodIP then 1 else 0 END) as HostIpCount,\n      (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP,\n      (CASE WHEN HostIP = PodIP then 0 else 1 END) as PodIpCount,\n      (CASE WHEN Phase = 'Running' then 1 else 0 END) as RunningCount,\n      (CASE WHEN Phase = 'Pending' then 1 else 0 END) as PendingCount\n    from\n    (\n      select \n        NodeName,\n        Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n        Payload-\u003e\u003e'$.status.podIP' as PodIP,\n        Phase\n      from\n        podDetailView\n      where\n        ControlEstate = 'prd-sam'\n    ) as ss\n  ) as ss2\n  group by NodeName\n) as ss3\ninner join nodeDetailView\non BINARY ss3.NodeName = BINARY nodeDetailView.Name\norder by UsedPodIps desc, NumPodPending desc"
        },
        {
          "name": "Pods-Pending-On-Nodes-Without-Free-IPs",
          "sql": "select\n  ControlEstate,\n  Namespace,\n  Name as PodName,\n  podDetailView.NodeName,\n  Phase,\n  Message,\n  PodUrl,\n  NodeUrl\nfrom podDetailView\ninner join \n(\n  select\n    NodeName\n  from  \n  (\n    select\n      NodeName,\n      (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 1 else 0 END) as Full\n    from\n    (\n      select\n        NodeName,\n        (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP\n      from\n      (\n        select \n          NodeName,\n          Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n          Payload-\u003e\u003e'$.status.podIP' as PodIP,\n          Phase\n        from\n          podDetailView\n      ) as ss\n    ) as ss2\n    group by NodeName\n  ) as ss3\n  where Full = 1\n) as ss4\non podDetailView.NodeName = ss4.NodeName\nwhere Phase \u003c\u003e 'Running' and IsSamApp = 1\norder by ControlEstate, Namespace, PodName"
        },
        {
          "name": "SamSystem-Overview",
          "sql": "select\n  controlEstate,\n  sum(Running) as Running,\n  sum(NotRunning) as NotRunning,\n  sum(Running) / (sum(Running)+sum(NotRunning)) as PctHealthy,\n  group_concat(FailingSam, '') as FailingSam,\n  group_concat(FailingOther, '') as FailingOther\nfrom\n(\nselect\n  controlEstate,\n  (CASE WHEN Phase \u003c\u003e 'Running' and Name not like '%slb%' and Name not like '%sdn%' then name else null end) as FailingSam,\n  (CASE WHEN Phase \u003c\u003e 'Running' and (Name like '%slb%' or Name like '%sdn%') then name else null end) as FailingOther,\n  (CASE WHEN Phase = 'Running' then 1 else 0 end) as Running,\n  (CASE WHEN Phase \u003c\u003e 'Running' then 1 else 0 end) as NotRunning\nfrom podDetailView\nwhere namespace = 'sam-system'\n) as ss\ngroup by controlEstate\norder by NotRunning desc"
        },
        {
          "name": "SamSystem-Failed-Pods-Sam",
          "sql": "select ControlEstate, Name, NodeName, Phase, Message, PodUrl from podDetailView where namespace = 'sam-system' and Phase \u003c\u003e 'Running' and Name not like '%slb%' and Name not like '%sdn%' order by ControlEstate, Name"
        },
        {
          "name": "SamSystem-Failed-Pods-NonSam",
          "sql": "select ControlEstate, Name, NodeName, Phase, Message, PodUrl from podDetailView where namespace = 'sam-system' and Phase \u003c\u003e 'Running' and (Name like '%slb%' or Name like '%sdn%') order by ControlEstate, Name"
        },
        {
          "name": "Minion-Pool-Utilization-Per-Kingdom",
          "sql": "select\n  HostRole,\n  Kingdom,\n  SUM(NodeCount) as AllNodes,\n  SUM(NodeReady) as ReadyNodes,\n  SUM(HostWithNoSamApp) as IdleNodesWithNoSamApps,\n  SUM(SamAppPods) as TotalSamAppPods,\n  SUM(SamAppPods)/SUM(NodeCount) as PodToNodeRatio\nfrom\n(\n  select\n    1 as NodeCount,\n    (CASE WHEN not Ready is null and Ready = 'True' then 1 else 0 end) as NodeReady,\n    Kingdom,\n    SUBSTRING(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1), 1, CHAR_LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1))-1) as HostRole,\n    ss0.SamAppPods,\n    (CASE WHEN ss0.SamAppPods is null or ss0.SamAppPods = 0 then 1 else 0 end) as HostWithNoSamApp\n  from nodeDetailView\n  left join\n  (\n    select CAST(NodeName as BINARY) as NodeName, Count(*) as SamAppPods\n    from podDetailView\n    where IsSamApp=1 and not NodeName is Null and Phase = 'Running'\n    group by NodeName\n  ) as ss0\n  on nodeDetailView.Name = ss0.NodeName\n) as ss\ngroup by HostRole, Kingdom\norder by HostRole, Kingdom"
        },
        {
          "name": "Minion-Pool-Utilization-Per-Role",
          "sql": "select\n  HostRole,\n  SUM(NodeCount) as AllNodes,\n  SUM(NodeReady) as ReadyNodes,\n  SUM(HostWithNoSamApp) as IdleNodesWithNoSamApps,\n  SUM(SamAppPods) as TotalSamAppPods,\n  SUM(SamAppPods)/SUM(NodeCount) as PodToNodeRatio\nfrom\n(\n  select\n    1 as NodeCount,\n    (CASE WHEN not Ready is null and Ready = 'True' then 1 else 0 end) as NodeReady,\n    Kingdom,\n    SUBSTRING(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1), 1, CHAR_LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1))-1) as HostRole,\n    ss0.SamAppPods,\n    (CASE WHEN ss0.SamAppPods is null or ss0.SamAppPods = 0 then 1 else 0 end) as HostWithNoSamApp\n  from nodeDetailView\n  left join\n  (\n    select CAST(NodeName as BINARY) as NodeName, Count(*) as SamAppPods\n    from podDetailView\n    where IsSamApp=1 and not NodeName is Null and Phase = 'Running'\n    group by NodeName\n  ) as ss0\n  on nodeDetailView.Name = ss0.NodeName\n) as ss\ngroup by HostRole\norder by IdleNodesWithNoSamApps desc"
        },
        {
          "name": "FsChecker-Errors-Agg",
          "sql": "select\n  kernelVersion,\n  sum(errorCount) as HostWithFsErrors,\n  sum(goodCount) as GoodHosts,\n  group_concat(errorHostname,'') as HostWithErrors,\n  group_concat(errorMessage,'') as ErrorMessage\nfrom\n(\n  select *\n  from\n  (\n    select\n      Payload-\u003e\u003e'$.spec.hostname' as hostName,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.spec.hostname' end as errorHostname,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as errorMessage,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then 0 else 1 end as errorCount,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then 1 else 0 end as goodCount\n    from\n      k8s_resource\n    where ApiKind = 'WatchDog' and\n    Payload-\u003e\u003e'$.spec.checkername' like 'filesystemchecker%'\n  ) as fsChecker\n  left join\n  (\n    select \n      Name,\n      kernelVersion\n    from nodeDetailView\n  ) as pod\n  on ( binary fsChecker.hostName = pod.Name  )\n) as ss\ngroup by kernelVersion "
        },
        {
          "name": "FsChecker-Errors",
          "sql": "select\n  hostName, kernelVersion, errorMessage, controlEstate  \nfrom\n(\n  select\n    controlEstate,\n    Payload-\u003e\u003e'$.spec.hostname' as hostName,\n    Payload-\u003e\u003e'$.status.report.ErrorMessage' as errorMessage\n  from\n    k8s_resource\n  where ApiKind = 'WatchDog' and\n  Payload-\u003e\u003e'$.spec.checkername' like 'filesystemchecker%' and\n  Payload-\u003e\u003e'$.status.report.ErrorMessage' != 'null'\n) as fsChecker\nleft join\n(\n  select \n    Name,\n    kernelVersion\n  from nodeDetailView\n) as pod\non ( binary fsChecker.hostName = pod.Name )"
        },
        {
          "multisql": [
            {
              "name": "Hypersam in prd-samtest (Phase 0)",
              "sql": "select\n  ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\nfrom\n(\n  select\n    Name,\n    ControlEstate,\n    substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n    substring_index(Image, ':', -1) as Tag\n  from\n  (\n    select\n      Name,\n      ControlEstate,\n      json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n    from\n    (\n      select * from\n      (\n        select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n      ) num\n      join\n      (\n      select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n      from k8s_resource\n      where \n        (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and \n        namespace = 'sam-system' and\n        Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n      ) ss\n    ) ss2\n  having not Image is NULL\n  ) ss3\n) ss4\nWhere controlEstate = 'prd-samtest' and Image = 'hypersam'\ngroup by ControlEstate, Image, Tag\norder by ControlEstate, Image"
            },
            {
              "name": "Hypersam in prd-samdev (Phase 1)",
              "sql": "select\n  ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\nfrom\n(\n  select\n    Name,\n    ControlEstate,\n    substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n    substring_index(Image, ':', -1) as Tag\n  from\n  (\n    select\n      Name,\n      ControlEstate,\n      json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n    from\n    (\n      select * from\n      (\n        select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n      ) num\n      join\n      (\n      select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n      from k8s_resource\n      where \n        (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and \n        namespace = 'sam-system' and\n        Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n      ) ss\n    ) ss2\n  having not Image is NULL\n  ) ss3\n) ss4\nWhere controlEstate = 'prd-samdev' and Image = 'hypersam'\ngroup by ControlEstate, Image, Tag\norder by ControlEstate, Image"
            },
            {
              "name": "Hypersam in prd-sam (Phase 2)",
              "sql": "select\n  ControlEstate, Image, Tag, count(*) as Count, group_concat(Name) as Resources\nfrom\n(\n  select\n    Name,\n    ControlEstate,\n    substring_index(substring_index(Image, ':', 1), '/', -1) as Image,\n    substring_index(Image, ':', -1) as Tag\n  from\n  (\n    select\n      Name,\n      ControlEstate,\n      json_unquote(json_extract(Images, concat('$[',n,']'))) as Image\n    from\n    (\n      select * from\n      (\n        select '0' n union select '1' n union select '2' n union select '3' n union select '4' n union select '5' n union select '6' n\n      ) num\n      join\n      (\n      select Name, ControlEstate, Payload-\u003e\u003e'$.spec.template.spec.containers[*].image' as Images\n      from k8s_resource\n      where \n        (ApiKind = 'Deployment' or ApiKind = 'DaemonSet') and \n        namespace = 'sam-system' and\n        Payload-\u003e\u003e'$.metadata.labels.\"\\sam\\.data\\.sfdc\\.net\\/owner\"' = 'sam'\n      ) ss\n    ) ss2\n  having not Image is NULL\n  ) ss3\n) ss4\nWhere controlEstate = 'prd-sam' and Image = 'hypersam'\ngroup by ControlEstate, Image, Tag\norder by ControlEstate, Image"
            }
          ],
          "name": "HyperSam Docker Tags in PRD",
          "note": "Currently running hypersam tag for sam-system deployments and daemon sets owned by sam"
        },
        {
          "name": "MySQL Pods by Produce Age",
          "note": "This shows the count of pods by produce age bucket.  Ideally most of our pods should have a produce age less than 15 minutes.  Large number of pods above this indicates an issue.  \u003ca href='https://git.soma.salesforce.com/sam/sam/wiki/Debugging-Visibility-Pipeline'\u003eDebug Instructions\u003c/a\u003e",
          "sql": "select\n  SUM(lt5m),\n  SUM(lt10m),\n  SUM(lt15m),\n  SUM(lt20m),\n  SUM(lt25m),\n  SUM(lt30m),\n  SUM(lt40m),\n  SUM(lt50m),\n  SUM(lt60m),\n  SUM(lt120m),\n  SUM(ltMax)\nfrom (\nselect\n  CASE WHEN ProduceAgeInMinutes\u003c5 THEN 1 ELSE 0 END as lt5m,\n  CASE WHEN ProduceAgeInMinutes\u003c10 THEN 1 ELSE 0 END as lt10m,\n  CASE WHEN ProduceAgeInMinutes\u003c15 THEN 1 ELSE 0 END as lt15m,\n  CASE WHEN ProduceAgeInMinutes\u003c20 THEN 1 ELSE 0 END as lt20m,\n  CASE WHEN ProduceAgeInMinutes\u003c25 THEN 1 ELSE 0 END as lt25m,\n  CASE WHEN ProduceAgeInMinutes\u003c30 THEN 1 ELSE 0 END as lt30m,\n  CASE WHEN ProduceAgeInMinutes\u003c40 THEN 1 ELSE 0 END as lt40m,\n  CASE WHEN ProduceAgeInMinutes\u003c50 THEN 1 ELSE 0 END as lt50m,\n  CASE WHEN ProduceAgeInMinutes\u003c60 THEN 1 ELSE 0 END as lt60m,\n  CASE WHEN ProduceAgeInMinutes\u003c120 THEN 1 ELSE 0 END as lt120m,\n  1 as ltMax\nfrom\n  podDetailView\n) as ss"
        },
        {
          "name": "SAM Node Status Aggregate",
          "sql": "select * from (\nselect * from (\nselect ControlEstate,\nSUM(ReadyCount) as Ready,\nSUM(NotReadyCount) as NotReady,\nSUM(NotReadyCount)+SUM(ReadyCount) as Total,\nSUM(ReadyCount)/(SUM(NotReadyCount)+SUM(ReadyCount)) as ReadyPct,\nGROUP_CONCAT(NotReadyName) as NotReadyHosts\nfrom\n(\nselect 'TOTAL' as ControlEstate,\nNULL as NotReadyName,\ncase when Ready = 'True' then 1 else 0 end as ReadyCount,\ncase when Ready = 'True' then 0 else 1 end as NotReadyCount\nfrom nodeDetailView\nwhere \n\t(Name not like '%slb%')\n\tand (Name not like '%ceph%')\n\tand (Name not like '%sdc%')\n\tand (Name not like '%flowsnake%')\n\n) as ss\ngroup by ControlEstate\n) as ss2\n\nunion\n\nselect * from (\nselect ControlEstate,\nSUM(ReadyCount) as Ready,\nSUM(NotReadyCount) as NotReady,\nSUM(NotReadyCount)+SUM(ReadyCount) as Total,\nSUM(ReadyCount)/(SUM(NotReadyCount)+SUM(ReadyCount)) as ReadyPct,\nGROUP_CONCAT(NotReadyName) as NotReadyHosts\nfrom\n(\nselect ControlEstate,\ncase when Ready = 'True' then NULL else Name end as NotReadyName,\ncase when Ready = 'True' then 1 else 0 end as ReadyCount,\ncase when Ready = 'True' then 0 else 1 end as NotReadyCount\nfrom nodeDetailView\nwhere \n\t(Name not like '%slb%')\n\tand (Name not like '%ceph%')\n\tand (Name not like '%sdc%')\n\tand (Name not like '%flowsnake%')\n\n) as ss3\ngroup by ControlEstate\n) as ss4\n) as ss5\norder by ReadyPct"
        }
      ]
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    sam.data.sfdc.net/owner: sam
  name: samsqlqueries
  namespace: sam-system
