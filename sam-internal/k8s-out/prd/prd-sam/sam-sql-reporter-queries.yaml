apiVersion: v1
data:
  sam-sql-queries.json: |-
    {
      "queries": [
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByControlEstate",
          "sql": "SELECT min(diff_seconds), avg(diff_seconds), max(diff_seconds), ControlEstate \nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ControlEstate FROM k8s_resource ) AS ss\nGROUP BY ControlEstate"
        },
        {
          "name": "Kube-Resource-Kafka-Pipeline-Latencies-ByHour",
          "sql": "SELECT Count(*) as Count, avg(diff_seconds), std(diff_seconds), min(diff_seconds), max(diff_seconds), FROM_UNIXTIME(ProduceTime / 1000000000, \"%y-%m-%d %k\") as DayHour\nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ProduceTime FROM k8s_resource ) AS ss\nGROUP BY DayHour;"
        },
        {
          "name": "Host-Os-Versions-Aggregate",
          "sql": "SELECT kernelVersion, COUNT(*) FROM nodeDetailView GROUP BY kernelVersion ORDER BY kernelVersion DESC"
        },
        {
          "name": "Host-Os-Versions",
          "sql": "SELECT Name, kernelVersion FROM nodeDetailView ORDER BY kernelVersion DESC"
        },
        {
          "name": "Hosts-All",
          "sql": "SELECT * FROM nodeDetailView"
        },
        {
          "name": "Hosts-Not-Ready-Sam",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND NOT Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Not-Ready-Ceph",
          "sql": "SELECT * FROM nodeDetailView WHERE Ready != 'True' AND Name like '%minionceph%'"
        },
        {
          "name": "Hosts-Docker-Version",
          "sql": "SELECT ControlEstate, Name, containerRuntimeVersion FROM nodeDetailView ORDER BY containerRuntimeVersion"
        },
        {
          "name": "Hosts-Kube-Version",
          "sql": "SELECT Name, kubeletVersion, Ready FROM nodeDetailView ORDER BY kubeletVersion"
        },
        {
          "name": "Hosts-Kube-Version-Aggregate",
          "sql": "SELECT Kingdom, kubeletVersion, COUNT(*) FROM nodeDetailView GROUP BY Kingdom, kubeletVersion ORDER BY kubeletVersion"
        },
        {
          "name": "Resource-Types-By-Kingdom",
          "sql": "SELECT ControlEstate, ApiKind, Count(*) FROM ( SELECT ControlEstate, ApiKind, IsTombstone FROM k8s_resource where IsTombstone \u003c\u003e 1) AS ss GROUP BY ControlEstate, ApiKind ORDER BY ControlEstate"
        },
        {
          "name": "Failed-Watchdog-CRDs",
          "sql": "SELECT ControlEstate, Name, Payload, ProduceTime, ConsumeTime, IsTombstone FROM k8s_resource WHERE ApiKind='Watchdog' AND JSON_EXTRACT(Payload, '$.status.report.Success') = false"
        },
        {
          "name": "Successful-Watchdog-CRDs",
          "sql": "SELECT ControlEstate, Name, Payload, ProduceTime, ConsumeTime, IsTombstone FROM k8s_resource WHERE ApiKind='Watchdog' AND JSON_EXTRACT(Payload, '$.status.report.Success') = true"
        },
        {
          "name": "Number of Failed WatchDogs across Estates",
          "sql": "\n      SELECT\n        ControlEstate,\n        JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.CheckerName')) AS 'CheckerName',\n        JSON_EXTRACT(Payload, '$.status.report.Success') AS 'Success',\n        COUNT(*) AS 'COUNT'\n      FROM k8s_resource\n      WHERE ApiKind='Watchdog' AND JSON_EXTRACT(Payload, '$.status.report.Success')=false\n      GROUP BY ControlEstate, JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.CheckerName')), JSON_EXTRACT(Payload, '$.status.report.Success')\n      ORDER BY COUNT(*) DESC\n      "
        },
        {
          "name": "Number of Failed WatchDogs across Kingdoms",
          "sql": "\n      SELECT\n        JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.Kingdom')) as 'Kingdom',\n        JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.CheckerName')) AS 'Checker',\n        JSON_EXTRACT(Payload, '$.status.report.Success') AS 'Success',\n        COUNT(*) AS 'COUNT'\n      FROM k8s_resource\n      WHERE ApiKind='Watchdog' AND JSON_EXTRACT(Payload, '$.status.report.Success')=false\n\n      GROUP BY JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.Kingdom')), JSON_UNQUOTE(JSON_EXTRACT(Payload, '$.status.report.CheckerName')), JSON_EXTRACT(Payload, '$.status.report.Success')\n      ORDER BY COUNT(*) DESC\n      "
        },
        {
          "name": "Bad-Customer-Deployments-Production",
          "sql": "SELECT * FROM\n(\n  SELECT\n    ControlEstate,\n    Namespace, \n    Name,\n    JSON_EXTRACT(Payload, '$.metadata.annotations.\"smb.sam.data.sfdc.net/emailTo\"') AS email,\n    JSON_EXTRACT(Payload, '$.spec.replicas') AS desiredReplicas,\n    JSON_EXTRACT(Payload, '$.status.availableReplicas') AS availableReplicas, \n    JSON_EXTRACT(Payload, '$.status.replicas') AS replicas,\n    JSON_EXTRACT(Payload, '$.status.readyReplicas') AS readyReplicas,\n    JSON_EXTRACT(Payload, '$.status.updatedReplicas') AS updatedReplicas,\n    CONCAT('http://dashboard-',SUBSTR(ControlEstate, 1, 3),'-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/',Namespace,'/',Name,'?namespace=',Namespace) AS Url\n  FROM k8s_resource\n  WHERE ApiKind = 'Deployment'\n) AS ss\nWHERE\n  ( Namespace != 'sam-watchdog' AND Namespace != 'sam-system' AND Namespace != 'csc-sam') AND\n  (availableReplicas != desiredReplicas OR availableReplicas IS NULL) AND\n  NOT ControlEstate LIKE 'prd-%' AND\n  desiredReplicas != 0"
        },
        {
          "name": "Bad-Pods-By-Host-Production",
          "sql": "select * from (\nselect\n        NodeName,\n        NodeUrl,\n        SUM(PendingCount) AS PendingCount,\n        SUM(FailedCount) AS FailedCount,\n        SUM(SucceededCount) AS SucceededCount,\n        SUM(OtherCount) AS OtherCount,\n        SUM(RunningCount) AS RunningCount,\n        GROUP_CONCAT(CustomerPodWithIssue SEPARATOR '; ') AS CustomerPodWithIssue,\n        GROUP_CONCAT(SystemPodWithIssue SEPARATOR '; ') AS SystemPodWithIssue\nfrom (\n        select\n                NodeName,\n                CASE WHEN Phase = 'Pending' THEN 1 ELSE 0 END AS PendingCount,\n                CASE WHEN Phase = 'Failed' THEN 1 ELSE 0 END AS FailedCount,\n                CASE WHEN Phase = 'Succeeded' THEN 1 ELSE 0 END AS SucceededCount,\n                CASE WHEN Phase != 'Running' AND Phase != 'Pending' AND Phase != 'Failed' AND Phase != 'Succeeded' THEN 1 ELSE 0 END AS OtherCount,\n                CASE WHEN Phase = 'Running' THEN 1 ELSE 0 END AS RunningCount,\n                CASE WHEN Phase != 'Running' AND (Namespace = 'sam-system' OR Namespace = 'sam-watchdog' OR Namespace = 'csc-sam') THEN Name ELSE NULL END AS SystemPodWithIssue,\n                CASE WHEN Phase != 'Running' AND (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam') THEN Name ELSE NULL END AS CustomerPodWithIssue,\n                NodeUrl\n        from\n                podDetailView\n        where\n                Kingdom != 'prd'\n                AND NodeName is not NULL\n                AND NOT (NodeName like '%samminionceph%')\n) as ss\ngroup by NodeName, NodeUrl\n) as ss2\nwhere (PendingCount+FailedCount+SucceededCount+OtherCount)\u003e0\norder by PendingCount+FailedCount+SucceededCount+OtherCount desc"
        },
        {
          "name": "Bad-Customer-Pods",
          "sql": "select\n        Kingdom, Namespace, Name AS PodName, Phase, NodeName, PodUrl, NodeUrl\nfrom\n        podDetailView\nwhere\n        Kingdom != 'prd'\n        and not (NodeName like '%samminionceph%')\n        and (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam')\n        and Phase != 'Running'"
        },
        {
          "name": "Image-Pull-Errors",
          "sql": "select\n  ControlEstate,\n  Namespace,\n  Payload-\u003e\u003e'$.message' as Message,\n  Payload-\u003e\u003e'$.source.host' as Host,\n  Payload-\u003e\u003e'$.involvedObject.kind' as InvolvedObjKind,\n  Payload-\u003e\u003e'$.involvedObject.name' as InvolvedObjName,\n  Payload-\u003e\u003e'$.involvedObject.namespace' as InvolvedObjNamespace\nfrom\n  k8s_resource\nwhere\n  ApiKind like 'Event' and\n  Payload-\u003e\u003e'$.message' like '%ImagePullBackOff%'"
        },
        {
          "name": "Sam-App-Pod-Age-All-Kingdoms",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest',\n  SUM(CASE WHEN ControlEstate = 'frf-sam' then Count else 0 END) as 'FrfSam',\n  SUM(CASE WHEN ControlEstate = 'phx-sam' then Count else 0 END) as 'PhxSam',\n  SUM(CASE WHEN ControlEstate = 'par-sam' then Count else 0 END) as 'ParSam',\n  SUM(CASE WHEN ControlEstate = 'ord-sam' then Count else 0 END) as 'OrdSam',\n  SUM(CASE WHEN ControlEstate = 'iad-sam' then Count else 0 END) as 'IadSam',\n  SUM(CASE WHEN ControlEstate = 'hnd-sam' then Count else 0 END) as 'HndSam',\n  SUM(CASE WHEN ControlEstate = 'dfw-sam' then Count else 0 END) as 'DfwSam',\n  SUM(CASE WHEN ControlEstate = 'ukb-sam' then Count else 0 END) as 'UkbSam',\n  SUM(CASE WHEN ControlEstate = 'cdu-sam' then Count else 0 END) as 'CduSam',\n  SUM(CASE WHEN ControlEstate = 'syd-sam' then Count else 0 END) as 'SydSam',\n  SUM(CASE WHEN ControlEstate = 'yhu-sam' then Count else 0 END) as 'YhuSam',\n  SUM(CASE WHEN ControlEstate = 'yul-sam' then Count else 0 END) as 'YulSam',\n  SUM(CASE WHEN ControlEstate = 'chx-sam' then Count else 0 END) as 'ChxSam',\n  SUM(CASE WHEN ControlEstate = 'wax-sam' then Count else 0 END) as 'WaxSam'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003c15\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        },
        {
          "name": "Sam-App-Pod-Age-Prd",
          "sql": "select\n  PodAgeDays,\n  SUM(CASE WHEN ControlEstate = 'prd-sam' then Count else 0 END) as 'PrdSam',\n  SUM(CASE WHEN ControlEstate = 'prd-samdev' then Count else 0 END) as 'PrdSamDev',\n  SUM(CASE WHEN ControlEstate = 'prd-samtest' then Count else 0 END) as 'PrdSamTest'\nfrom\n(\n  select\n    ControlEstate,\n    PodAgeDays,\n    COUNT(*) as Count\n  from\n  (\n    select\n      ControlEstate,\n      LEAST(FLOOR(PodAgeInMinutes/60.0/24.0),10) as PodAgeDays\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003c15\n  ) as ss\n  where PodAgeDays IS NOT NULL\n  group by ControlEstate, PodAgeDays\n) as ss2\ngroup by PodAgeDays"
        },
        {
          "name": "MySql-Pods-With-Old-Produce-Age",
          "sql": "select\n  NamespacePodPrefix,\n  SUM(Count) as Count,\n  GROUP_CONCAT(ControlEstate, ' ')\nfrom\n(\n  select\n    NamespacePodPrefix,\n    ControlEstate,\n    COUNT(*) as Count\n  from\n  (\n    select\n      CONCAT(Namespace, ' ', SUBSTRING_INDEX(Name, '-', 1)) as NamespacePodPrefix,\n      ControlEstate\n    from podDetailView\n    where IsSamApp = True and ProduceAgeInMinutes\u003e60.0\n  ) as ss\n  group by NamespacePodPrefix, ControlEstate\n) as ss2\ngroup by NamespacePodPrefix\norder by Count desc"
        },
        {
          "name": "Prd-Sandbox-IPs-Used-By-Node",
          "sql": "select\n  ss3.*,\n  (CASE WHEN Ready = 'True' then '' else Ready END) as Ready,\n  (CASE WHEN Unschedulable IS NULL then '' else 'True' END) as Unschedulable\nfrom\n(\n  select\n    NodeName,\n    SUM(HostIpCount) as NumPodsOnHostIp,\n    SUM(PodIpCount) as NumPodsOnPodIps,\n    SUM(RunningCount) as NumPodsRunning,\n    SUM(PendingCount) as NumPodPending,\n    COUNT(distinct PodIP) as UsedPodIps,\n    (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 'OUT_OF_IPs' else '' END) as Status\n  from\n  (\n    select\n      NodeName,\n      (CASE WHEN HostIP = PodIP then HostIP else NULL END) as HostIp,\n      (CASE WHEN HostIP = PodIP then 1 else 0 END) as HostIpCount,\n      (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP,\n      (CASE WHEN HostIP = PodIP then 0 else 1 END) as PodIpCount,\n      (CASE WHEN Phase = 'Running' then 1 else 0 END) as RunningCount,\n      (CASE WHEN Phase = 'Pending' then 1 else 0 END) as PendingCount\n    from\n    (\n      select \n        NodeName,\n        Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n        Payload-\u003e\u003e'$.status.podIP' as PodIP,\n        Phase\n      from\n        podDetailView\n      where\n        ControlEstate = 'prd-sam' and Namespace != 'user-cbatra'\n    ) as ss\n  ) as ss2\n  where (NodeName like '%samcompute%' or NodeName like '%kubeapi%')\n  group by NodeName\n) as ss3\ninner join nodeDetailView\non BINARY ss3.NodeName = BINARY nodeDetailView.Name\norder by UsedPodIps desc, NumPodPending desc"
        },
        {
          "name": "Prd-All-IPs-Used-By-Node",
          "sql": "select\n  ss3.*,\n  (CASE WHEN Ready = 'True' then '' else Ready END) as Ready,\n  (CASE WHEN Unschedulable IS NULL then '' else 'True' END) as Unschedulable\nfrom\n(\n  select\n    NodeName,\n    SUM(HostIpCount) as NumPodsOnHostIp,\n    SUM(PodIpCount) as NumPodsOnPodIps,\n    SUM(RunningCount) as NumPodsRunning,\n    SUM(PendingCount) as NumPodPending,\n    COUNT(distinct PodIP) as UsedPodIps,\n    (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 'OUT_OF_IPs' else '' END) as Status\n  from\n  (\n    select\n      NodeName,\n      (CASE WHEN HostIP = PodIP then HostIP else NULL END) as HostIp,\n      (CASE WHEN HostIP = PodIP then 1 else 0 END) as HostIpCount,\n      (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP,\n      (CASE WHEN HostIP = PodIP then 0 else 1 END) as PodIpCount,\n      (CASE WHEN Phase = 'Running' then 1 else 0 END) as RunningCount,\n      (CASE WHEN Phase = 'Pending' then 1 else 0 END) as PendingCount\n    from\n    (\n      select \n        NodeName,\n        Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n        Payload-\u003e\u003e'$.status.podIP' as PodIP,\n        Phase\n      from\n        podDetailView\n      where\n        ControlEstate = 'prd-sam'\n    ) as ss\n  ) as ss2\n  group by NodeName\n) as ss3\ninner join nodeDetailView\non BINARY ss3.NodeName = BINARY nodeDetailView.Name\norder by UsedPodIps desc, NumPodPending desc"
        },
        {
          "name": "Pods-Pending-On-Nodes-Without-Free-IPs",
          "sql": "select\n  ControlEstate,\n  Namespace,\n  Name as PodName,\n  podDetailView.NodeName,\n  Phase,\n  Message,\n  PodUrl,\n  NodeUrl\nfrom podDetailView\ninner join \n(\n  select\n    NodeName\n  from  \n  (\n    select\n      NodeName,\n      (CASE WHEN COUNT(distinct PodIP) \u003e 28 then 1 else 0 END) as Full\n    from\n    (\n      select\n        NodeName,\n        (CASE WHEN HostIP = PodIP then NULL else PodIP END) as PodIP\n      from\n      (\n        select \n          NodeName,\n          Payload-\u003e\u003e'$.status.hostIP' as HostIP,\n          Payload-\u003e\u003e'$.status.podIP' as PodIP,\n          Phase\n        from\n          podDetailView\n      ) as ss\n    ) as ss2\n    group by NodeName\n  ) as ss3\n  where Full = 1\n) as ss4\non podDetailView.NodeName = ss4.NodeName\nwhere Phase \u003c\u003e 'Running' and IsSamApp = 1\norder by ControlEstate, Namespace, PodName"
        },
        {
          "name": "SamSystem-Overview",
          "sql": "select\n  controlEstate,\n  sum(Running) as Running,\n  sum(NotRunning) as NotRunning,\n  sum(Running) / (sum(Running)+sum(NotRunning)) as PctHealthy,\n  group_concat(FailingSam, '') as FailingSam,\n  group_concat(FailingOther, '') as FailingOther\nfrom\n(\nselect\n  controlEstate,\n  (CASE WHEN Phase \u003c\u003e 'Running' and Name not like '%slb%' and Name not like '%sdn%' then name else null end) as FailingSam,\n  (CASE WHEN Phase \u003c\u003e 'Running' and (Name like '%slb%' or Name like '%sdn%') then name else null end) as FailingOther,\n  (CASE WHEN Phase = 'Running' then 1 else 0 end) as Running,\n  (CASE WHEN Phase \u003c\u003e 'Running' then 1 else 0 end) as NotRunning\nfrom podDetailView\nwhere namespace = 'sam-system'\n) as ss\ngroup by controlEstate\norder by NotRunning desc"
        },
        {
          "name": "SamSystem-Failed-Pods-Sam",
          "sql": "select ControlEstate, Name, NodeName, Phase, Message, PodUrl from podDetailView where namespace = 'sam-system' and Phase \u003c\u003e 'Running' and Name not like '%slb%' and Name not like '%sdn%' order by ControlEstate, Name"
        },
        {
          "name": "SamSystem-Failed-Pods-NonSam",
          "sql": "select ControlEstate, Name, NodeName, Phase, Message, PodUrl from podDetailView where namespace = 'sam-system' and Phase \u003c\u003e 'Running' and (Name like '%slb%' or Name like '%sdn%') order by ControlEstate, Name"
        },
        {
          "name": "Minion-Pool-Utilization-Per-Kingdom",
          "sql": "select\n  HostRole,\n  Kingdom,\n  SUM(NodeCount) as AllNodes,\n  SUM(NodeReady) as ReadyNodes,\n  SUM(HostWithNoSamApp) as IdleNodesWithNoSamApps,\n  SUM(SamAppPods) as TotalSamAppPods,\n  SUM(SamAppPods)/SUM(NodeCount) as PodToNodeRatio\nfrom\n(\n  select\n    1 as NodeCount,\n    (CASE WHEN not Ready is null and Ready = 'True' then 1 else 0 end) as NodeReady,\n    Kingdom,\n    SUBSTRING(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1), 1, CHAR_LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1))-1) as HostRole,\n    ss0.SamAppPods,\n    (CASE WHEN ss0.SamAppPods is null or ss0.SamAppPods = 0 then 1 else 0 end) as HostWithNoSamApp\n  from nodeDetailView\n  left join\n  (\n    select CAST(NodeName as BINARY) as NodeName, Count(*) as SamAppPods\n    from podDetailView\n    where IsSamApp=1 and not NodeName is Null and Phase = 'Running'\n    group by NodeName\n  ) as ss0\n  on nodeDetailView.Name = ss0.NodeName\n) as ss\ngroup by HostRole, Kingdom\norder by HostRole, Kingdom"
        },
        {
          "name": "Minion-Pool-Utilization-Per-Role",
          "sql": "select\n  HostRole,\n  SUM(NodeCount) as AllNodes,\n  SUM(NodeReady) as ReadyNodes,\n  SUM(HostWithNoSamApp) as IdleNodesWithNoSamApps,\n  SUM(SamAppPods) as TotalSamAppPods,\n  SUM(SamAppPods)/SUM(NodeCount) as PodToNodeRatio\nfrom\n(\n  select\n    1 as NodeCount,\n    (CASE WHEN not Ready is null and Ready = 'True' then 1 else 0 end) as NodeReady,\n    Kingdom,\n    SUBSTRING(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1), 1, CHAR_LENGTH(SUBSTRING_INDEX(SUBSTRING_INDEX(Name, '-', 2),'-',-1))-1) as HostRole,\n    ss0.SamAppPods,\n    (CASE WHEN ss0.SamAppPods is null or ss0.SamAppPods = 0 then 1 else 0 end) as HostWithNoSamApp\n  from nodeDetailView\n  left join\n  (\n    select CAST(NodeName as BINARY) as NodeName, Count(*) as SamAppPods\n    from podDetailView\n    where IsSamApp=1 and not NodeName is Null and Phase = 'Running'\n    group by NodeName\n  ) as ss0\n  on nodeDetailView.Name = ss0.NodeName\n) as ss\ngroup by HostRole\norder by IdleNodesWithNoSamApps desc"
        },
        {
          "name": "FsChecker-Errors-Agg",
          "sql": "select\n  kernelVersion,\n  sum(errorCount) as HostWithFsErrors,\n  sum(goodCount) as GoodHosts,\n  group_concat(errorHostname,'') as HostWithErrors,\n  group_concat(errorMessage,'') as ErrorMessage\nfrom\n(\n  select *\n  from\n  (\n    select\n      Payload-\u003e\u003e'$.spec.hostname' as hostName,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.spec.hostname' end as errorHostname,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then null else Payload-\u003e\u003e'$.status.report.ErrorMessage' end as errorMessage,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then 0 else 1 end as errorCount,\n      case when Payload-\u003e\u003e'$.status.report.ErrorMessage' = 'null' then 1 else 0 end as goodCount\n    from\n      k8s_resource\n    where ApiKind = 'WatchDog' and\n    Payload-\u003e\u003e'$.spec.checkername' like 'filesystemchecker%'\n  ) as fsChecker\n  left join\n  (\n    select \n      Name,\n      kernelVersion\n    from nodeDetailView\n  ) as pod\n  on ( binary fsChecker.hostName = pod.Name  )\n) as ss\ngroup by kernelVersion "
        },
        {
          "name": "FsChecker-Errors",
          "sql": "select\n  hostName, kernelVersion, errorMessage, controlEstate  \nfrom\n(\n  select\n    controlEstate,\n    Payload-\u003e\u003e'$.spec.hostname' as hostName,\n    Payload-\u003e\u003e'$.status.report.ErrorMessage' as errorMessage\n  from\n    k8s_resource\n  where ApiKind = 'WatchDog' and\n  Payload-\u003e\u003e'$.spec.checkername' like 'filesystemchecker%' and\n  Payload-\u003e\u003e'$.status.report.ErrorMessage' != 'null'\n) as fsChecker\nleft join\n(\n  select \n    Name,\n    kernelVersion\n  from nodeDetailView\n) as pod\non ( binary fsChecker.hostName = pod.Name )"
        }
      ]
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: samsqlqueries
  namespace: sam-system
