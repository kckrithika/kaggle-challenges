apiVersion: v1
data:
  application.yml: |-
    {
        "firefly": {
            "monitoring": {
                "enable-funnel-publisher": true,
                "enable-metrics-logging": false,
                "funnel": {
                    "avro-schema-fingerprint": "AVG7NnlcHNdk4t_zn2JBnQ",
                    "backoff-time": 1,
                    "base-path": "funnel",
                    "endpoint": "ajna0-funnel1-0-prd.data.sfdc.net",
                    "funnel-api-version": "v1",
                    "http-port": 80,
                    "https-port": 443,
                    "max-publish-tries": 3,
                    "publish-api": "publishBatch",
                    "ssl-enabled": true
                },
                "metric-fields": {
                    "common-tags": {
                        "k8.namespace": "${MY_POD_NAMESPACE}",
                        "k8.node.name": "${MY_NODE_NAME}",
                        "node.name": "${RABBITMQ_NODENAME}"
                    },
                    "datacenter": "prd",
                    "pod": "'${MY_POD_NAME}'",
                    "service": "firefly",
                    "subservice": "firefly-rabbitmq",
                    "superpod": "prd-sam"
                },
                "node-name": "${RABBITMQ_NODENAME}",
                "report-frequency": 60,
                "system-exception-threshold": 5
            },
            "rabbitmqapi": {
                "api-url": "http://localhost:15672",
                "cluster-size": 2,
                "connect-timeout": "10000ms",
                "http-logging-interceptor-level": "NONE",
                "keep-alive-duration": "300000ms",
                "max-idle-connections": 10,
                "password": "${rabbitMqDefaultPass#FromSecretService}",
                "read-timeout": "10000ms",
                "user": "sfdc-rabbitmq",
                "write-timeout": "10000ms"
            }
        },
        "logging": {
            "level": {
                "com.salesforce": "DEBUG",
                "org": "INFO"
            },
            "pattern": {
                "console": "%d{yyyy-MM-dd HH:mm:ss} - %C:%L[%thread] %-5level - details=[%msg]  %n"
            }
        },
        "management": {
            "endpoint": {
                "health": {
                    "enabled": true,
                    "show-details": "always"
                },
                "metrics": {
                    "enabled": true
                }
            },
            "endpoints": {
                "enabled-by-default": "false",
                "web": {
                    "exposure": {
                        "include": "health, metrics"
                    }
                }
            },
            "server": {
                "port": 8081
            }
        },
        "server": {
            "port": -1
        }
    }
  definitions.json: |-
    {
      "policies": [
        {
          "definition": {
            "ha-mode": "exactly",
            "ha-params": 3,
            "ha-sync-mode": "automatic"
          },
          "name": "ha",
          "pattern": "",
          "vhost": "/"
        }
      ],
      "vhosts": [
        {
          "name": "/"
        }
      ]
    }
  enabled_plugins: |
    [rabbitmq_management,rabbitmq_auth_mechanism_ssl].
  rabbitmq-env.conf: |-
    #ERL_SSL_PATH="/usr/lib64/erlang/lib/ssl-8.1.3.1/ebin"
    #SERVER_ADDITIONAL_ERL_ARGS="-pa $ERL_SSL_PATH \
    #  -proto_dist inet_tls \
    #  -ssl_dist_opt server_certfile /etc/rabbitmq/rabbitmq.pem \
    #  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"
    #CTL_ERL_ARGS="-pa $ERL_SSL_PATH \
    #  -proto_dist inet_tls \
    #  -ssl_dist_opt server_certfile /etc/rabbitmq/rabbitmq.pem \
    #  -ssl_dist_opt server_secure_renegotiate true client_secure_renegotiate true"
  rabbitmq.conf: |
    ## Logging settings.
    ##
    ## See http://rabbitmq.com/logging.html and https://github.com/erlang-lager/lager for details.
    ##
    ## Log direcrory, taken from the RABBITMQ_LOG_BASE env variable by default.
    ##
    # log.dir = /var/log/rabbitmq
    log.file.level = debug
    log.console = true
    log.console.level = info
    ## Clustering
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
    cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-0.rabbitmq-set.firefly.svc.prd-sam.prd.sam.sfdc.net.
    cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-1.rabbitmq-set.firefly.svc.prd-sam.prd.sam.sfdc.net.
    cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-2.rabbitmq-set.firefly.svc.prd-sam.prd.sam.sfdc.net.
    cluster_formation.randomized_startup_delay_range.min = 10
    cluster_formation.randomized_startup_delay_range.max = 30
    # Set to false if automatic removal of unknown/absent nodes
    # is desired. This can be dangerous, see
    #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
    #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
    #cluster_formation.node_cleanup.only_log_warning = true
    #cluster_partition_handling = pause_minority
    cluster_partition_handling = autoheal
    ## queue master locator
    queue_master_locator=min-masters
    ## See http://www.rabbitmq.com/access-control.html#loopback-users
    loopback_users.guest = false
    # TLS Support
    #listeners.ssl.default = 5671
    #ssl_options.cacertfile = /etc/rabbitmq/ca/cacert.pem
    #ssl_options.certfile = /etc/rabbitmq/server/cert.pem
    #ssl_options.keyfile = /etc/rabbitmq/server/key.pem
    #ssl_options.verify = verify_peer
    #ssl_options.fail_if_no_peer_cert = true
    auth_mechanisms.1 = EXTERNAL
    auth_mechanisms.2 = PLAIN
    #auth_mechanisms.2 = AMQP
    # "internal" is an alias for rabbit_auth_backend_internal
    auth_backends.1 = internal
    ## To use the TLS cert's CN instead of its DN as the username
    #ssl_cert_login_from = common_name
    # =======================================
    # Management section
    # =======================================
    ## Preload schema definitions from the following JSON file.
    ## Related doc guide: http://rabbitmq.com/management.html#load-definitions.
    ##
    management.load_definitions = /etc/rabbitmq/definitions.json
    ## Log all requests to the management HTTP API to a file.
    ##
    # This generates a crash report due to https://github.com/rabbitmq/rabbitmq-web-dispatch/pull/33
    management.http_log_dir = /var/log/rabbitmq/access.log
    ## Change the port on which the HTTP listener listens,
    ## specifying an interface for the web server to bind to.
    ## Also set the listener to use TLS and provide TLS options.
    ##
    #management.listener.port = 15671
    #management.listener.ssl  = true
    #management.listener.ssl_opts.cacertfile = /etc/rabbitmq/ca/cacert.pem
    #management.listener.ssl_opts.certfile   = /etc/rabbitmq/server/cert.pem
    #management.listener.ssl_opts.keyfile    = /etc/rabbitmq/server/key.pem
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    sam.data.sfdc.net/owner: tnrp
  name: rabbitmq-configmap
  namespace: firefly
