{
   "apiVersion": "v1",
   "data": {
      "sam-sql-queries.json": "{\"queries\": [{\"name\": \"Kube-Resource-Kafka-Pipeline-Latencies-ByControlEstate\", \"sql\": \"SELECT min(diff_seconds), avg(diff_seconds), max(diff_seconds), ControlEstate \\nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ControlEstate FROM k8s_resource ) AS ss\\nGROUP BY ControlEstate\"}, {\"name\": \"Kube-Resource-Kafka-Pipeline-Latencies-ByHour\", \"sql\": \"SELECT Count(*) as Count, avg(diff_seconds), std(diff_seconds), min(diff_seconds), max(diff_seconds), FROM_UNIXTIME(ProduceTime / 1000000000, \\\"%y-%m-%d %k\\\") as DayHour\\nFROM ( SELECT (ConsumeTime - ProduceTime) / 1000000000 AS diff_seconds, ProduceTime FROM k8s_resource ) AS ss\\nGROUP BY DayHour;\"}, {\"name\": \"Host-Os-Versions-Aggregate\", \"sql\": \"SELECT kernelVersion, COUNT(*) FROM nodeDetailView GROUP BY kernelVersion ORDER BY kernelVersion DESC\"}, {\"name\": \"Host-Os-Versions\", \"sql\": \"SELECT Name, kernelVersion FROM nodeDetailView ORDER BY kernelVersion DESC\"}, {\"name\": \"Hosts-All\", \"sql\": \"SELECT * FROM nodeDetailView\"}, {\"name\": \"Hosts-Not-Ready-Sam\", \"sql\": \"SELECT * FROM nodeDetailView WHERE Ready != 'True' AND NOT Name like '%minionceph%'\"}, {\"name\": \"Hosts-Not-Ready-Ceph\", \"sql\": \"SELECT * FROM nodeDetailView WHERE Ready != 'True' AND Name like '%minionceph%'\"}, {\"name\": \"Hosts-Docker-Version\", \"sql\": \"SELECT ControlEstate, Name, containerRuntimeVersion FROM nodeDetailView ORDER BY containerRuntimeVersion\"}, {\"name\": \"Hosts-Kube-Version\", \"sql\": \"SELECT Name, kubeletVersion, Ready FROM nodeDetailView ORDER BY kubeletVersion\"}, {\"name\": \"Hosts-Kube-Version-Aggregate\", \"sql\": \"SELECT Kingdom, kubeletVersion, COUNT(*) FROM nodeDetailView GROUP BY Kingdom, kubeletVersion ORDER BY kubeletVersion\"}, {\"name\": \"Bad-Customer-Deployments-Production\", \"sql\": \"SELECT * FROM\\n(\\n  SELECT\\n    ControlEstate,\\n    Namespace, \\n    Name,\\n    JSON_EXTRACT(Payload, '$.metadata.annotations.\\\"smb.sam.data.sfdc.net/emailTo\\\"') AS email,\\n    JSON_EXTRACT(Payload, '$.spec.replicas') AS desiredReplicas,\\n    JSON_EXTRACT(Payload, '$.status.availableReplicas') AS availableReplicas, \\n    JSON_EXTRACT(Payload, '$.status.replicas') AS replicas,\\n    JSON_EXTRACT(Payload, '$.status.readyReplicas') AS readyReplicas,\\n    JSON_EXTRACT(Payload, '$.status.updatedReplicas') AS updatedReplicas,\\n    CONCAT('http://dashboard-',SUBSTR(ControlEstate, 1, 3),'-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/',Namespace,'/',Name,'?namespace=',Namespace) AS Url\\n  FROM k8s_resource\\n  WHERE ApiKind = 'Deployment'\\n) AS ss\\nWHERE\\n  ( Namespace != 'sam-watchdog' AND Namespace != 'sam-system' AND Namespace != 'csc-sam') AND\\n  (availableReplicas != desiredReplicas OR availableReplicas IS NULL) AND\\n  NOT ControlEstate LIKE 'prd-%' AND\\n  desiredReplicas != 0\"}, {\"name\": \"Bad-Pods-By-Host-Production\", \"sql\": \"select * from (\\nselect\\n        NodeName,\\n        NodeUrl,\\n        SUM(PendingCount) AS PendingCount,\\n        SUM(FailedCount) AS FailedCount,\\n        SUM(SucceededCount) AS SucceededCount,\\n        SUM(OtherCount) AS OtherCount,\\n        SUM(RunningCount) AS RunningCount,\\n        GROUP_CONCAT(CustomerPodWithIssue SEPARATOR '; ') AS CustomerPodWithIssue,\\n        GROUP_CONCAT(SystemPodWithIssue SEPARATOR '; ') AS SystemPodWithIssue\\nfrom (\\n        select\\n                NodeName,\\n                CASE WHEN Phase = 'Pending' THEN 1 ELSE 0 END AS PendingCount,\\n                CASE WHEN Phase = 'Failed' THEN 1 ELSE 0 END AS FailedCount,\\n                CASE WHEN Phase = 'Succeeded' THEN 1 ELSE 0 END AS SucceededCount,\\n                CASE WHEN Phase != 'Running' AND Phase != 'Pending' AND Phase != 'Failed' AND Phase != 'Succeeded' THEN 1 ELSE 0 END AS OtherCount,\\n                CASE WHEN Phase = 'Running' THEN 1 ELSE 0 END AS RunningCount,\\n                CASE WHEN Phase != 'Running' AND (Namespace = 'sam-system' OR Namespace = 'sam-watchdog' OR Namespace = 'csc-sam') THEN Name ELSE NULL END AS SystemPodWithIssue,\\n                CASE WHEN Phase != 'Running' AND (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam') THEN Name ELSE NULL END AS CustomerPodWithIssue,\\n                NodeUrl\\n        from\\n                podDetailView\\n        where\\n                Kingdom != 'prd'\\n                AND NodeName is not NULL\\n                AND NOT (NodeName like '%samminionceph%')\\n) as ss\\ngroup by NodeName, NodeUrl\\n) as ss2\\nwhere (PendingCount+FailedCount+SucceededCount+OtherCount)>0\\norder by PendingCount+FailedCount+SucceededCount+OtherCount desc\"}, {\"name\": \"Bad-Customer-Pods\", \"sql\": \"select\\n        Kingdom, Namespace, Name AS PodName, Phase, NodeName, PodUrl, NodeUrl\\nfrom\\n        podDetailView\\nwhere\\n        Kingdom != 'prd'\\n        and not (NodeName like '%samminionceph%')\\n        and (Namespace != 'sam-system' AND Namespace != 'sam-watchdog' AND Namespace != 'csc-sam')\\n        and Phase != 'Running'\"}]}"
   },
   "kind": "ConfigMap",
   "metadata": {
      "name": "samsqlqueries",
      "namespace": "sam-system"
   }
}
