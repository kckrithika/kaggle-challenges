apiVersion: v1
data:
  watchdog-samsql-profiles.jsonnet: '{"alertProfiles": [{"businesshours_pagerduty":
    "csc-sam-business-hours-only@salesforce.pagerduty.com", "email": "", "name": "sam",
    "pagerDuty": "sam-pagerduty@salesforce.com"}, {"name": "tnrp", "pagerDuty": "tnrp_pd_svc@salesforce.pagerduty.com"}]}'
  watchdog-samsql-queries.jsonnet: '{"argus_metrics": [{"name": "MachineCountByKernelVersion",
    "sql": "select ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,
    ''sql.machineCountByKernelVersion'' as Metric, COUNT(*) as Value, CONCAT(''KernelVersion='',KernelVersion)
    as Tags from nodeDetailView group by kernelVersion", "watchdogFrequency": "15m"},
    {"name": "MachineCountByKingdomAndKernelVersion", "sql": "select UPPER(kingdom)
    as Kingdom, ''NONE'' as SuperPod, ControlEstate as Estate, ''sql.machineCountByKingdomAndKernelVersion''
    as Metric, COUNT(*) as Value, CONCAT(''KernelVersion='',KernelVersion) as Tags
    from nodeDetailView group by ControlEstate, kingdom, kernelVersion", "watchdogFrequency":
    "15m"}, {"name": "MySqlSystemMetrics", "sql": "SELECT ''PRD'' as Kingdom, ''NONE''
    as SuperPod, ''prd-sam'' as Estate, Metric, Value, '''' as Tags FROM (SELECT CONCAT(\"mysql_metrics_\",
    Variable_name) as Metric, Variable_value as Value from sys.metrics where Variable_name
    in (''aborted_connects'', ''bytes_received'', ''bytes_sent'', ''connections'',
    ''connection_errors_select'', ''created_tmp_files'', ''innodb_buffer_pool_pages_dirty'',
    ''innodb_buffer_pool_pages_data'', ''innodb_buffer_pool_pages_free'', ''innodb_data_pending_writes'',
    ''innodb_row_lock_current_waits'', ''innodb_row_lock_time_avg'', ''queries'',
    ''table_open_cache_hits'', ''table_open_cache_misses'', ''uptime'') UNION SELECT
    CONCAT(\"mysql_metrics_events_avg_latency_\", REPLACE(events,\"/\",\"_\")) as
    Metric, avg_latency as Variable_value from sys.x$waits_global_by_latency UNION
    SELECT CONCAT(\"mysql_metrics_user_summary_by_statement_type_\", user, \"_\",
    statement), total as Variable_value from sys.x$user_summary_by_statement_type
    UNION SELECT CONCAT(\"mysql_metrics_schema_table_statistics_fetch_count_\", table_schema,
    \"_\", table_name) as Variable_name, rows_fetched as Variable_value from sys.x$schema_table_statistics  UNION
    (SELECT CONCAT(\"mysql_metrics_schema_table_statistics_fetch_avg_latency_\", table_schema,
    \"_\", table_name) as Variable_name, fetch_latency / rows_fetched as Variable_value
    from sys.x$schema_table_statistics) UNION SELECT CONCAT(\"mysql_metrics_schema_table_statistics_insert_count_\",
    table_schema, \"_\", table_name) as Variable_name, rows_inserted as Variable_value
    from sys.x$schema_table_statistics UNION (SELECT CONCAT(\"mysql_metrics_schema_table_statistics_insert_avg_latency_\",
    table_schema, \"_\", table_name) as Variable_name, insert_latency / rows_inserted
    as Variable_value from sys.x$schema_table_statistics) UNION SELECT CONCAT(\"mysql_metrics_schema_table_statistics_update_count_\",
    table_schema, \"_\", table_name) as Variable_name, rows_updated as Variable_value
    from sys.x$schema_table_statistics UNION (SELECT CONCAT(\"mysql_metrics_schema_table_statistics_update_avg_latency_\",
    table_schema, \"_\", table_name) as Variable_name, update_latency / rows_updated
    as Variable_value from sys.x$schema_table_statistics)) a where a.Value IS NOT
    NULL;", "watchdogFrequency": "1m"}, {"name": "WatchdogSuccessPct", "sql": "select
    ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate, \n''sql.checkerPassPct''
    as Metric, SuccessPct as Value, CONCAT(''CheckerName='',CheckerName) as Tags\nfrom
    (\n  select\n    CheckerName,\n    SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount))
    as SuccessPct\n  from\n  (\n    select\n      Payload->>''$.status.report.CheckerName''
    as CheckerName,\n      case when Payload->>''$.status.report.Success'' = ''true''
    then 1 else 0 end as SuccessCount,\n      case when Payload->>''$.status.report.Success''
    = ''false'' then 1 else 0 end as FailureCount\n    from k8s_resource\n    where
    ApiKind = ''WatchDog''\n  ) as ss\n  where CheckerName not like ''Sql%'' and CheckerName
    not like ''MachineCount%''\n  group by CheckerName\n) as ss2", "watchdogFrequency":
    "15m"}, {"name": "WatchdogSuccessCount", "sql": "select ''GLOBAL'' as Kingdom,
    ''NONE'' as SuperPod, ''global'' as Estate, \n''sql.checkerFailCount'' as Metric,
    FailureCount as Value, CONCAT(''CheckerName='',CheckerName) as Tags\nfrom (\n  select\n    CheckerName,\n    SUM(FailureCount)
    as FailureCount\n  from\n  (\n    select\n      Payload->>''$.status.report.CheckerName''
    as CheckerName,\n      case when Payload->>''$.status.report.Success'' = ''false''
    then 1 else 0 end as FailureCount\n    from k8s_resource\n    where ApiKind =
    ''WatchDog''\n  ) as ss\n  where CheckerName not like ''Sql%'' and CheckerName
    not like ''MachineCount%''\n  group by CheckerName\n) as ss2\nunion all\nselect
    ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate, \n''sql.checkerSuccessCount''
    as Metric, SuccessCount as Value, CONCAT(''CheckerName='',CheckerName) as Tags\nfrom
    (\n  select\n    CheckerName,\n    SUM(SuccessCount) as SuccessCount\n  from\n  (\n    select\n      Payload->>''$.status.report.CheckerName''
    as CheckerName,\n      case when Payload->>''$.status.report.Success'' = ''true''
    then 1 else 0 end as SuccessCount\n    from k8s_resource\n    where ApiKind =
    ''WatchDog''\n  ) as ss3\n  where CheckerName not like ''Sql%'' and CheckerName
    not like ''MachineCount%''\n  group by CheckerName\n) as ss4", "watchdogFrequency":
    "15m"}, {"name": "WatchdogSuccessPctByKingdom", "sql": "select UPPER(kingdom)
    as Kingdom, ''NONE'' as SuperPod, ControlEstate as Estate,\n''sql.checkerPassPctPerKingdom''
    as Metric, SuccessPct as Value, CONCAT(''CheckerName='',CheckerName) as Tags\nfrom
    (\n  select\n    ControlEstate,\n    Kingdom,\n    CheckerName,\n    SUM(SuccessCount)/(SUM(SuccessCount)+SUM(FailureCount))
    as SuccessPct\n  from\n  (\n    select\n      substr(ControlEstate,1,3) AS Kingdom,\n      ControlEstate,\n      Payload->>''$.status.report.CheckerName''
    as CheckerName,\n      case when Payload->>''$.status.report.Success'' = ''true''
    then 1 else 0 end as SuccessCount,\n      case when Payload->>''$.status.report.Success''
    = ''false'' then 1 else 0 end as FailureCount\n    from k8s_resource\n    where
    ApiKind = ''WatchDog''\n  ) as ss\n  where CheckerName not like ''Sql%'' and CheckerName
    not like ''MachineCount%''\n  group by CheckerName, ControlEstate, Kingdom\n)
    as ss2", "watchdogFrequency": "15m"}, {"name": "SqlNodeReadyCount", "sql": "select
    ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate, ''sql.nodeCountByStatus''
    as Metric, CONCAT(''Ready='',Ready) as Tags, Count as Value\nfrom (\n  select
    Ready, Count(*) as Count\n  from nodeDetailView\n  group by Ready\n) as ss\nunion
    all\nselect UPPER(kingdom) as Kingdom, ''NONE'' as SuperPod, ControlEstate as
    Estate, ''sql.sql.nodeCountByStatusPerKingdom'' as Metric, CONCAT(''Ready='',Ready)
    as Tags, Count as Value\nfrom (\n  select kingdom, ControlEstate, Ready, Count(*)
    as Count\n  from nodeDetailView\n  group by kingdom, ControlEstate, Ready\n) as
    ss2", "watchdogFrequency": "15m"}, {"name": "Sql95thPctPRLatencyOverLast24Hr",
    "sql": "SELECT ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,\n''sql.95thPctPRLatencyOverLast24Hr''
    as Metric, IFNULL(latency,0) as Value,'''' as Tags FROM\n     ( SELECT\n         prLatency.*,\n         @row_num
    :=@row_num + 1 AS row_num\n    FROM\n        (   \n         SELECT *\n                FROM
    (  \n         SELECT \n              prs.pr_num, \n              GREATEST(\n              max(TIMESTAMPDIFF(SECOND,prs.most_recent_authorized_time,
    STR_TO_DATE( \n              CASE \n                        WHEN payload -> ''$.status.startTime''
    = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP() \n                        ELSE
    JSON_UNQUOTE(payload -> ''$.status.startTime'') \n              END,''%Y-%m-%dT%H:%i:%s''
    ))) ,\n               max(TIMESTAMPDIFF(SECOND,prs.most_recent_authorized_time,
    STR_TO_DATE( \n              CASE \n                        WHEN payload -> ''$.status.maxImageEndTime''
    = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP() \n                        ELSE
    JSON_UNQUOTE(payload -> ''$.status.maxImageEndTime'') \n              END,''%Y-%m-%dT%H:%i:%s''
    ))) \n              ) latency\n        FROM PullRequests prs \n        INNER JOIN
    PullRequestToTeamOrUser pApp ON prs.`pr_num` = pApp.`pr_num`\n        LEFT JOIN
    \n          (   \n                 SELECT * \n                 FROM   crd_history
    \n                 WHERE  apikind = ''Bundle'') crds \n                 ON  crds.prnum
    = prs.pr_num WHERE state =''merged'' \n                 AND `merged_time` > now()
    - INTERVAL 24 hour\n                 GROUP BY prs.pr_num \n      ) nullPrLatency\n       WHERE
    latency IS NOT NULL\n       )prLatency,\n     (SELECT @row_num:=0) counter ORDER
    BY prLatency.latency\n     )   \n    temp WHERE temp.row_num = ROUND (.95* @row_num);",
    "watchdogFrequency": "15m"}, {"name": "Sql95thPctPRImageLatencyOverLast24Hr",
    "sql": "select ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,\n''sql.95thPctPRImageLatencyOverLast24Hr''
    as Metric, IFNULL(latencySec, 0) as Value, '''' as Tags FROM\n     ( SELECT\n         imageLatency.*,\n         @row_num
    :=@row_num + 1 AS row_num\n    FROM\n        (    \n              SELECT *\n              FROM(\n                SELECT  \n                    prs.pr_num,\n                    MAX(TIMESTAMPDIFF(SECOND,
    STR_TO_DATE(JSON_UNQUOTE(payload -> ''$.status.startTime''),''%Y-%m-%dT%H:%i:%s''),
    STR_TO_DATE( CASE WHEN payload -> ''$.status.maxImageEndTime'' = ''0001-01-01T00:00:00Z''
    THEN CURRENT_TIMESTAMP() ELSE  JSON_UNQUOTE(payload -> ''$.status.maxImageEndTime'')
    END, ''%Y-%m-%dT%H:%i:%s''))) latencySec\n            FROM \n                PullRequests
    prs \n            INNER JOIN PullRequestToTeamOrUser pApp ON prs.`pr_num` = pApp.`pr_num`\n            LEFT  JOIN\n                    (   \n                    SELECT
    *\n                    FROM \n                    crd_history \n                    WHERE
    ApiKind = ''Bundle'') crds\n                ON crds.PRNum = prs.pr_num \n            WHERE
    prs.state =''merged'' AND prs.merged_time > NOW() - INTERVAL 24 HOUR\n            GROUP
    BY prs.pr_num\n            ) imageLatencyNull\n            where latencySec IS
    NOT NULL)\n            imageLatency\n            ,\n     (SELECT @row_num:=0)
    counter ORDER BY imageLatency.latencySec\n     )   \n    temp  \n    WHERE temp.row_num
    = ROUND (.95* @row_num)", "watchdogFrequency": "15m"}, {"name": "Sql95thPctPRTNRPLatencyOverLast24Hr",
    "sql": "select ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,\n''sql.95thPctPRTNRPLatencyOverLast24Hr''
    as Metric, latency as Value, '''' as Tags FROM\n(\nSELECT\n         prLatency.*,\n         @row_num
    :=@row_num + 1 AS row_num\nFROM\n(\nSELECT\n              p.pr_num,\n              t.manifest_zip_time,\n              p.merged_time,\n              TIMESTAMPDIFF(SECOND,  `merged_time`,CASE
    WHEN t.manifest_zip_time IS NULL THEN now() ELSE t.manifest_zip_time END) latency\n            FROM
    PullRequests p\n            INNER JOIN PullRequestToTeamOrUser pApp ON p.`pr_num`
    = pApp.`pr_num`\n            LEFT OUTER JOIN TNRPManifestData t\n            ON
    p.git_hash = t.git_hash\n            WHERE p.state =''merged''   AND p.`merged_time`
    > NOW() - INTERVAL 24 HOUR            \n)prLatency,\n (SELECT @row_num:=0) counter
    ORDER BY prLatency.latency\n     )\n    temp WHERE temp.row_num = ROUND (.95*
    @row_num)", "watchdogFrequency": "15m"}, {"name": "SamAppsRestatedBySamGlobal",
    "sql": "select\n  ''GLOBAL'' as Kingdom,\n  ''NONE'' as SuperPod,\n  ''global''
    as Estate,\n  ''sql.samAppChangedBySamLastHourGlobal'' as Metric,\n  CONCAT(''ChangedLastHour='',appChangedBySamInLastHour)
    as Tags,\n  count as Value\nfrom\n(\n\nselect\n  appChangedBySamInLastHour,\n  COUNT(*)
    as count\nfrom\n(\n  select\n    SUBSTRING(controlEstate,1,3) as kingdom,\n    controlEstate,\n    namespace,\n    ownerDeployment,\n    titleLine,\n    sum(rsCount)
    as rsCount,\n    sum(replicas) as replicaCount,\n    GROUP_CONCAT(rsName,'''')
    as rsNames,\n    MIN(ageInHours) as minRsAgeHours,\n    MAX(ageInHours) as maxRsAgeHours,\n    CASE
    WHEN MIN(ageInHours)<1.0 and sum(rsCount)>1 THEN ''yes'' ELSE ''no'' END as appChangedBySamInLastHour\n  from\n  (\n    select\n      name
    as rsName,\n      namespace,\n      controlEstate,\n      Payload->>''$.metadata.annotations.titleLine''
    as titleLine,\n      Payload->>''$.metadata.ownerReferences[0].name'' as ownerDeployment,\n      Payload->>''$.spec.replicas''
    as replicas,\n      TIMESTAMPDIFF(MINUTE, STR_TO_DATE(Payload->>''$.metadata.creationTimestamp'',''%Y-%m-%dT%H:%i:%s''),
    NOW())/60.0 as ageInHours,\n      1 as rsCount\n    from\n      k8s_resource\n    where\n      ApiKind
    = ''ReplicaSet''\n  ) as ss\n  where not ownerDeployment is null and not titleLine
    is null\n  group by controlEstate, namespace, ownerDeployment, titleLine\n  having
    replicaCount > 0\n) as ss2\ngroup by appChangedBySamInLastHour\n) as ss3", "watchdogFrequency":
    "15m"}, {"name": "SamAppsRestatedBySam", "sql": "select\n  UPPER(kingdom) as Kingdom,\n  ''NONE''
    as SuperPod,\n  ControlEstate as Estate,\n  ''sql.samAppChangedBySamLastHour''
    as Metric,\n  CONCAT(''ChangedLastHour='',appChangedBySamInLastHour) as Tags,\n  count
    as Value\nfrom\n(\n\nselect\n  kingdom,\n  controlEstate,\n  appChangedBySamInLastHour,\n  COUNT(*)
    as count\nfrom\n(\n  select\n    SUBSTRING(controlEstate,1,3) as kingdom,\n    controlEstate,\n    namespace,\n    ownerDeployment,\n    titleLine,\n    sum(rsCount)
    as rsCount,\n    sum(replicas) as replicaCount,\n    GROUP_CONCAT(rsName,'''')
    as rsNames,\n    MIN(ageInHours) as minRsAgeHours,\n    MAX(ageInHours) as maxRsAgeHours,\n    CASE
    WHEN MIN(ageInHours)<1.0 and sum(rsCount)>1 THEN ''yes'' ELSE ''no'' END as appChangedBySamInLastHour\n  from\n  (\n    select\n      name
    as rsName,\n      namespace,\n      controlEstate,\n      Payload->>''$.metadata.annotations.titleLine''
    as titleLine,\n      Payload->>''$.metadata.ownerReferences[0].name'' as ownerDeployment,\n      Payload->>''$.spec.replicas''
    as replicas,\n      TIMESTAMPDIFF(MINUTE, STR_TO_DATE(Payload->>''$.metadata.creationTimestamp'',''%Y-%m-%dT%H:%i:%s''),
    NOW())/60.0 as ageInHours,\n      1 as rsCount\n    from\n      k8s_resource\n    where\n      ApiKind
    = ''ReplicaSet''\n  ) as ss\n  where not ownerDeployment is null and not titleLine
    is null\n  group by controlEstate, namespace, ownerDeployment, titleLine\n  having
    replicaCount > 0\n) as ss2\ngroup by kingdom, controlEstate, appChangedBySamInLastHour\n)
    as ss3", "watchdogFrequency": "15m"}, {"name": "Sql95thPctPRSamLatencyOverLast24Hr",
    "sql": "select ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,\n''sql.95thPctPRSamLatencyOverLast24Hr''
    as Metric, IFNULL(samlatencysec,0) as Value, '''' as Tags FROM   (   \n              SELECT
    sam.*,\n                     @row_num := @row_num + 1 AS row_num\n              FROM   (   \nSELECT
    pr_num, \n       totallatencysec - (imagelatencysec + tnrplatency + evalPrLatency)
    samlatencysec\nFROM   (   \n                       SELECT          pr_num, \n                                       imagelatencysec,
    \n                                       GREATEST(totallatencysec1, totallatencysec2)
    totallatencysec, \n                                       Timestampdiff(second,
    merged_time, \n                                       LEAST(t.manifest_zip_time,
    startTime)) AS tnrplatency,\n                                       evalPrLatency,\n                                       merged_time\n                       FROM            (   \n                                                 SELECT    prs.pr_num,
    \n                                                           prs.git_hash, \n                                                           prs.merged_time,
    \n                                                           Max(Timestampdiff(second,
    Str_to_date(Json_unquote(payload -> ''$.status.startTime''),''%Y-%m-%dT%H:%i:%s''),
    Str_to_date( \n                                                           CASE
    \n                                                                     WHEN payload
    -> ''$.status.maxImageEndTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()
    \n                                                                     ELSE Json_unquote(payload
    -> ''$.status.maxImageEndTime'') \n                                                           END,''%Y-%m-%dT%H:%i:%s'')))
    imagelatencysec,\n                                                           Max(Timestampdiff(second,
    prs.most_recent_authorized_time, Str_to_date(\n                                                           CASE\n                                                                     WHEN
    payload -> ''$.status.startTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()        \n                                                                     ELSE
    Json_unquote(payload -> ''$.status.startTime'')\n                                                           END,
    ''%Y-%m-%dT%H:%i:%s''))) totallatencysec1,\n                                                           Max(Timestampdiff(second,
    prs.most_recent_authorized_time, Str_to_date(\n                                                           CASE\n                                                                     WHEN
    payload -> ''$.status.maxImageEndTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()        \n                                                                     ELSE
    Json_unquote(payload -> ''$.status.maxImageEndTime'')\n                                                           END,
    ''%Y-%m-%dT%H:%i:%s''))) totallatencysec2,\n                                                           Timestampdiff(second,
    prs.`most_recent_authorized_time`, prs.`most_recent_evaluate_pr_completion_time`)
    evalPrLatency,\n                                                           Max(Str_to_date(\n                                                           CASE\n                                                                     WHEN
    payload -> ''$.status.startTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()\n                                                                     ELSE
    Json_unquote(payload -> ''$.status.startTime'')\n                                                           END,
    ''%Y-%m-%dT%H:%i:%s'')) startTime\n                                                 FROM      PullRequests
    prs \n                                                 INNER JOIN PullRequestToTeamOrUser
    pApp ON prs.`pr_num` = pApp.`pr_num`\n                                                 LEFT
    JOIN \n                                                           (   \n                                                                  SELECT
    *\n                                                                  FROM   crd_history\n                                                                  WHERE  apikind
    = ''Bundle'') crds\n                                                 ON        crds.prnum
    = prs.pr_num \n        \n                                                 WHERE     prs.state
    = ''merged''\n                                                 AND       prs.merged_time
    > Now() - INTERVAL 1 DAY \n                                                 GROUP
    BY  prs.pr_num) sam \n                       LEFT OUTER JOIN TNRPManifestData
    t\n                       ON              sam.git_hash = t.git_hash )samNull\n                       WHERE
    totallatencysec IS NOT NULL)sam,\n                                       ( SELECT
    @row_num := 0) counter ORDER BY samlatencysec ) temp\n              WHERE  temp.row_num
    = Round (.95 * @row_num)", "watchdogFrequency": "15m"}, {"name": "SqlResourceCounts",
    "sql": "select\n  ''GLOBAL'' as Kingdom, \n  ''NONE'' as SuperPod,\n  ''global''
    as Estate,\n  ''sql.dbResTotal'' as Metric,\n  '''' as Tags,\n  COUNT(*) as Value\nfrom
    k8s_resource \nunion all\nselect \n  ''GLOBAL'' as Kingdom, \n  ''NONE'' as SuperPod,
    \n  ''global'' as Estate, \n  ''sql.dbResPerCluster'' as Metric,\n  CONCAT(''controlEstate='',controlEstate)
    as Tags,\n  COUNT(*) as Value\nfrom k8s_resource \ngroup by controlEstate", "watchdogFrequency":
    "15m"}, {"name": "SqlResByProduceAge", "sql": "select\n  ''GLOBAL'' as Kingdom,\n  ''NONE''
    as SuperPod,\n  ''global'' as Estate,\n  ''sql.dbResByProduceAge'' as Metric,\n  CONCAT(''produceAgeMin='',produceAgeMinutes)
    as Tags,\n  COUNT(*) as Value\nfrom (\n  select \n    floor(time_to_sec(timediff(now(),FROM_UNIXTIME(ProduceTime
    / 1000000000)))/60/5)*5 as produceAgeMinutes\n  from k8s_resource\n) as ss\ngroup
    by produceAgeMinutes", "watchdogFrequency": "15m"}, {"name": "dbResProduceAgePerClusterInMin",
    "sql": "select\n  ''GLOBAL'' as Kingdom,\n  ''NONE'' as SuperPod,\n  ''global''
    as Estate,\n  ''sql.dbResProduceAgePerClusterInMin'' as Metric,\n  CONCAT(''controlEstate='',controlEstate)
    as Tags,\n  AVG(produceAgeMinutes) as Value\nfrom (\n  select\n    controlEstate,\n    floor(time_to_sec(timediff(now(),FROM_UNIXTIME(ProduceTime
    / 1000000000)))/60) as produceAgeMinutes\n  from k8s_resource\n) as ss\ngroup
    by controlEstate", "watchdogFrequency": "15m"}, {"name": "HostRepairRebootCount",
    "sql": "select ''GLOBAL'' as Kingdom, ''NONE'' as SuperPod, ''global'' as Estate,
    ''sql.hostRepairRebootCount'' as Metric, SUM(Payload->>''$.status.details.totalRebootCount'')
    as Value, '''' as Tags\nfrom k8s_resource\nwhere ApiKind = ''HostRepair''", "watchdogFrequency":
    "15m"}, {"name": "HostRepairRebootCount", "sql": "select\n  ''GLOBAL'' as Kingdom,\n  ''NONE''
    as SuperPod,\n  ''global'' as Estate,\n  ''sql.hostRepairLast7days'' as Metric,\n  COUNT(*)
    as Value,\n  CONCAT(''HealthyAfterReboot='',Healthy) as Tags\nfrom (\n  select\n    Payload->>''$.observation.healthInfo.health''
    as Healthy,\n    TIMESTAMPDIFF(MINUTE, STR_TO_DATE(Payload->>''$.spec.startTime'',''%Y-%m-%dT%H:%i:%s''),
    NOW())/60.0/24.0 as ageInDays\n  from k8s_resource\n  where ApiKind = ''HostRepair''\n  )
    as ss\nwhere ageInDays < 7\ngroup by Healthy", "watchdogFrequency": "15m"}, {"name":
    "IpAddressResourceCapacity", "sql": "select\n  UPPER(SUBSTRING(controlEstate,1,3))
    as Kingdom,\n  ''NONE'' as SuperPod,\n  controlEstate as Estate,\n  ''sql.ipAddressResourceCapacity''
    as Metric,\n  CONCAT(''Capacity='',IpAddressCapacity) as Tags,\n  count(*) as
    Value\nfrom (\n  select controlEstate, Payload->>''$.status.capacity.\"sam.sfdc.net/ip-address\"''
    as IpAddressCapacity\n  from k8s_resource\n  where apikind = ''Node'' and controlEstate
    = ''prd-sam''\n) as ss\ngroup by controlEstate, IpAddressCapacity", "watchdogFrequency":
    "1m"}], "sql_alerts": [{"alertAction": "businesshours_pagerduty", "alertFrequency":
    "24h", "alertProfile": "sam", "alertThreshold": "10m", "instructions": "The following
    deployments are reported as bad customer deployments in Production. Debug Instructions:
    https://git.soma.salesforce.com/sam/sam/wiki/Debug-Failed-Deployment", "name":
    "SqlSlaDepl", "sql": "SELECT * FROM\n                        (\n                          SELECT\n                            ControlEstate,\n                            Namespace,\n                            Name,\n                            JSON_EXTRACT(Payload,
    ''$.metadata.annotations.\"smb.sam.data.sfdc.net/emailTo\"'') AS email,\n                            CASE
    WHEN JSON_EXTRACT(Payload, ''$.metadata.labels.sam_app'') is NULL then False\n                                 ELSE
    True END AS IsSamApp,\n                            JSON_EXTRACT(Payload, ''$.spec.replicas'')
    AS desiredReplicas,\n                            JSON_EXTRACT(Payload, ''$.status.availableReplicas'')
    AS availableReplicas,\n                            JSON_EXTRACT(Payload, ''$.status.updatedReplicas'')
    AS updatedReplicas,\n                            (JSON_EXTRACT(Payload, ''$.spec.replicas'')
    - JSON_EXTRACT(Payload, ''$.status.availableReplicas'')) AS kpodsDown,\n                            COALESCE(JSON_EXTRACT(Payload,
    ''$.status.availableReplicas'') /nullif(JSON_EXTRACT(Payload, ''$.spec.replicas''),
    0), 0) AS availability,\n                            0.6 as minAvailability,\n                            CONCAT(''http://dashboard-'',SUBSTR(ControlEstate,
    1, 3),''-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/'',Namespace,''/'',Name,''?namespace='',Namespace)
    AS Url\n                            FROM k8s_resource\n                            WHERE
    ApiKind = ''Deployment''\n                        ) AS ss\n                        WHERE\n                           isSamApp
    AND\n                           ( Namespace != ''sam-watchdog'' AND Namespace
    != ''sam-system'' AND Namespace != ''csc-sam'' AND Namespace NOT LIKE ''%slb%''
    AND Namespace NOT LIKE ''%user%'' \n                            AND Namespace
    NOT LIKE ''%cloudatlas%''  # Follow up work item W-5415695\n                           )
    AND\n                           (availableReplicas != desiredReplicas OR availableReplicas
    IS NULL) AND\n                           (availability IS NULL OR availability
    < 0.6) AND\n                           (kpodsDown IS NULL OR kpodsDown >1) AND\n                           NOT
    ControlEstate LIKE ''prd-%'' AND\n                           ControlEstate !=
    ''unknown'' AND\n                           desiredReplicas > 1\n                             AND
    NOT\n                             (controlestate like ''par-sam'' AND namespace
    like ''casp'' AND now() < STR_TO_DATE(''2019-03-21'', ''%Y-%m-%d''))\n                             AND
    NOT\n                             (controlestate like ''cdg-sam'' AND namespace
    like ''mc-eventing'' AND now() < STR_TO_DATE(''2019-03-21'', ''%Y-%m-%d''))\n                             AND
    NOT\n                             (controlestate like ''frf-sam'' AND namespace
    like ''casp'' AND now() < STR_TO_DATE(''2019-03-21'', ''%Y-%m-%d''))", "watchdogFrequency":
    "10m"}, {"alertAction": "email", "alertFrequency": "24h", "alertProfile": "sam",
    "alertThreshold": "5m", "name": "SqlCustomerAppsWithImagePullErrorsProd", "sql":
    "select * from podDetailView where \n        JSON_SEARCH(\n          Payload->>''$.status.containerStatuses[*].state.waiting.reason'',
    ''one'', ''ImagePullBackOff'')\n            is not null \n          AND Kingdom
    != ''prd'' \n          AND Kingdom != ''xrd'' \n          AND IsSamApp = 1;",
    "watchdogFrequency": "1m"}, {"alertAction": "pagerduty", "alertFrequency": "24h",
    "alertProfile": "sam", "alertThreshold": "20m", "instructions": "The following
    minion pools have multiple nodes down in Production requiring immediate attention
    according to our SLA. Debug Instructions: https://git.soma.salesforce.com/sam/sam/wiki/Repair-Failed-SAM-Host",
    "name": "SqlSlaNode", "sql": "SELECT\n  minionpool,\n  TotalCount,\n  NotReadyCount,\n  NotReadyPerc,\n  activePools.appCount
    as SamAppCount\nFROM\n(\n  SELECT\n    minionpool,\n    TotalCount ,\n    NotReadyCount,\n    (NotReadyCount/TotalCount)
    as ''NotReadyPerc''\n  FROM\n  (\n    SELECT\n      COUNT(*) as TotalCount,\n      SUM(CASE
    WHEN READY = ''True'' THEN 0 ELSE 1 END) as NotReadyCount,\n      minionpool\n    FROM\n      nodeDetailView
    nd\n    WHERE\n      KINGDOM != ''PRD'' AND KINGDOM != ''UNK'' AND KINGDOM !=
    ''GSF''\n      GROUP BY minionpool\n    ) ss\n  ) ss2\ninner join\n(\n  select
    SUBSTRING_INDEX(Payload->>''$.spec.controlMap.pool'', ''/'', -1) as pool, count(*)
    as appCount\n  from k8s_resource\n  where apikind = ''samapp''\n  group by pool\n)
    as activePools\non ss2.minionpool = activePools.pool\nWHERE\n  ((TotalCount >=
    10 AND NotReadyPerc >0.25) OR (TotalCount < 10 AND NotReadyCount >2))\n-- AND
    NOT\n-- (minionpool like ''par-sam_warden'' AND now() < STR_TO_DATE(''2019-03-21'',
    ''%Y-%m-%d'')) #as in https://gus.lightning.force.com/lightning/r/ADM_Work__c/a07B0000006UbTRIA0/view\n--
    AND NOT\n-- (minionpool like ''phx-sam_mgmt_hub'' AND now() < STR_TO_DATE(''2019-01-22'',
    ''%Y-%m-%d''))\n-- AND NOT\n-- (minionpool like ''ph2-sam_gater'' AND NotReadyPerc
    < 0.5 AND now() < STR_TO_DATE(''2019-01-30'', ''%Y-%m-%d''))\n", "watchdogFrequency":
    "5m"}, {"alertAction": "businesshours_pagerduty", "alertFrequency": "24h", "alertProfile":
    "sam", "alertThreshold": "20m", "instructions": "The following SAM control stack
    components dont have even 1 healhty pod", "name": "SqlSamControl", "sql": "SELECT
    * FROM\n                  (\n                    SELECT\n                      ControlEstate,\n                      Namespace,\n                      Name,\n                      JSON_EXTRACT(Payload,
    ''$.metadata.labels.\"sam.data.sfdc.net/owner\"'') AS ownerlabel,\n                      JSON_EXTRACT(Payload,
    ''$.spec.replicas'') AS desiredReplicas,\n                      JSON_EXTRACT(Payload,
    ''$.status.availableReplicas'') AS availableReplicas,\n                      JSON_EXTRACT(Payload,
    ''$.status.updatedReplicas'') AS updatedReplicas,\n                      (JSON_EXTRACT(Payload,
    ''$.spec.replicas'') - JSON_EXTRACT(Payload, ''$.status.availableReplicas''))
    AS kpodsDown,\n                      COALESCE(JSON_EXTRACT(Payload, ''$.status.availableReplicas'')
    /nullif(JSON_EXTRACT(Payload, ''$.spec.replicas''), 0), 0) AS availability,\n                      CONCAT(''http://dashboard-'',SUBSTR(ControlEstate,
    1, 3),''-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/'',Namespace,''/'',Name,''?namespace='',Namespace)
    AS Url\n                      FROM k8s_resource\n                      WHERE ApiKind
    = ''Deployment''\n                  ) AS ss\n                  WHERE\n                     Namespace
    = ''sam-system'' AND ownerlabel = ''sam'' AND\n                     (availableReplicas
    < 1 OR availableReplicas IS NULL) AND\n                     ControlEstate NOT
    LIKE ''%sdc%'' AND\n                     ControlEstate NOT LIKE ''%storage%''
    AND\n                     ControlEstate NOT LIKE ''%sdn%'' AND\n                     ControlEstate
    NOT LIKE ''%slb%'' AND\n                     ControlEstate != ''prd-samtest''
    AND\n                     ControlEstate != ''prd-samdev'' AND\n                     desiredReplicas
    != 0", "watchdogFrequency": "5m"}, {"alertAction": "businesshours_pagerduty",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "20m", "instructions":
    "The following alert is for SamApp CRDs that dont have corresponding Bundle CRDs",
    "name": "SqlSamAppWithoutBundle", "sql": "SELECT\n                        samApp.controlEstate,\n                        samApp.name,\n                        samApp.namespace,\n                        samAppCreationTimestamp,\n                        bundleCreationTimestamp,\n                        samAppNumResourceLinks,\n                        bundleState,\n                        bundleStatus\n                      FROM\n                      (\n                          SELECT\n                            controlEstate,\n                            name,\n                            namespace,\n                            json_length(Payload->''$.status.resourceLinks'')
    as samAppNumResourceLinks,\n                            Payload->>''$.metadata.creationTimestamp''
    as samAppCreationTimestamp\n                          FROM\n                            k8s_resource\n                          WHERE\n                            ApiKind
    = ''SamApp''\n                            AND Payload->>''$.metadata.labels.deployed_by''
    IS NULL\n                      ) samApp\n                      LEFT JOIN\n                      (\n                          SELECT\n                            controlEstate,\n                            name,\n                            namespace,\n                            Payload->>''$.status.state''
    as bundleState,\n                            Payload->>''$.status'' as bundleStatus,\n                            Payload->>''$.metadata.creationTimestamp''
    as bundleCreationTimestamp\n                          FROM k8s_resource\n                          WHERE
    ApiKind = ''Bundle''\n                      ) bundle\n                      ON
    samApp.controlEstate = bundle.controlEstate and samApp.name = bundle.name and
    samApp.namespace = bundle.namespace\n                      WHERE bundle.controlEstate
    is NULL AND bundle.name is NUll AND bundle.namespace is NULL", "watchdogFrequency":
    "5m"}, {"alertAction": "businesshours_pagerduty", "alertFrequency": "24h", "alertProfile":
    "sam", "alertThreshold": "20m", "instructions": "This alert is for Bundle CRDs
    that do not have a corresponding deployment", "name": "SqlBundleWithoutDeployment",
    "sql": "\n        SELECT\n            bundle.controlEstate,\n            bundle.namespace,\n            bundle.name,\n            bundleCreationTimestamp,\n            bundle.bundleDeploymentName,\n            bundleKind,\n            bundleState,\n            overallStatus,\n            bundle.UID\n        FROM\n            (\n                SELECT\n                    controlEstate,\n                    name,\n                    namespace,\n                    Payload->>''$.status.state''
    as bundleState,\n                    Payload->>''$.status'' as overallStatus,\n                    Payload->>''$.metadata.creationTimestamp''
    as bundleCreationTimestamp,\n                    Payload->>''$.spec.K8sResourceList[*].kind''
    as bundleKind,\n                    Payload->>''$.spec.K8sResourceList[*].metadata.name''
    as bundleDeploymentName,\n                    Payload->>''$.metadata.uid'' as
    UID\n                FROM k8s_resource\n                WHERE ApiKind = ''Bundle''\n                AND
    Payload->>''$.spec.K8sResourceList[*].kind'' like ''%Deployment%''\n                AND
    controlEstate != ''prd-samdev''\n                AND controlEstate != ''prd-samtest''
    \n            ) bundle\n            \n        LEFT JOIN\n            \n            (\n                SELECT\n                    controlEstate,\n                    name,\n                    namespace,\n                    Payload->>''$.metadata.ownerReferences[0].uid''
    as ownerRef\n                FROM k8s_resource\n                WHERE ApiKind
    = ''Deployment''\n                AND namespace NOT LIKE ''%sam-system%''\n            )
    deployment\n            \n        ON bundle.controlEstate = deployment.controlEstate\n        AND
    bundle.namespace = deployment.namespace\n        AND bundle.UID = deployment.ownerRef\n            \n        WHERE
    deployment.ownerRef IS NULL AND deployment.name IS NULL AND deployment.namespace
    IS NULL\n              \n              AND NOT\n              (bundle.controlEstate
    like ''frf-sam'' AND now() < STR_TO_DATE(''2019-01-21'', ''%Y-%m-%d''))", "watchdogFrequency":
    "5m"}, {"alertAction": "businesshours_pagerduty", "alertFrequency": "24h", "alertProfile":
    "sam", "alertThreshold": "10m", "instructions": "Following PRs have failed to
    get deployed within 45 minutes of getting authorized.", "name": "SqlPRLatency",
    "sql": "SELECT * FROM(\n      SELECT\n        prs.pr_url,\n        prs.merged_time,\n        crds.PoolName,\n        crds.ControlEstate,\n        TIMESTAMPDIFF(MINUTE,prs.merged_time,
    STR_TO_DATE(JSON_UNQUOTE(payload -> ''$.status.endTime''),''%Y-%m-%dT%H:%i:%s''
    )) latency\n      FROM PullRequests prs LEFT  JOIN\n        (   \n        SELECT
    *\n        FROM\n        crd_history\n        WHERE ApiKind = ''Bundle'') crds
    ON crds.PRNum = prs.pr_num\n        WHERE  prs.merged_time > now() - INTERVAL
    24 hour\n        ORDER BY prs.pr_num\n        ) prLatency\n      WHERE latency
    > 45", "watchdogFrequency": "10m"}, {"alertAction": "businesshours_pagerduty",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "10m", "instructions":
    "Following PRs haven''t run evaluatePR more than 30 mins after getting authorized.",
    "name": "SqlPRFailedToRunEvalPR", "sql": "SELECT \n         *   \n        FROM\n        (SELECT
    \n          pr_num,\n          created_time,\n          evaluate_pr_status,\n          authorized_by,\n          most_recent_authorized_time,\n          TIMESTAMPDIFF(MINUTE,  most_recent_authorized_time,
    now()) latency\n        FROM PullRequests\n        WHERE created_time IS NOT NULL
    AND created_time  > NOW() - Interval 10 day AND authorized_by IS NOT NULL AND
    authorized_by !='''' AND (`evaluate_pr_status` IS NULL OR evaluate_pr_status =
    ''unknown'') AND most_recent_authorized_time IS NOT NULL\n            AND state
    =''open''\n        ) authedButUnkwn\n        WHERE authedButUnkwn.latency > 30",
    "watchdogFrequency": "10m"}, {"alertAction": "pagerduty", "alertFrequency": "24h",
    "alertProfile": "sam", "alertThreshold": "10m", "instructions": "Following PRs
    have failed to produce corresponding manifest.zip file after 30 minutes of getting  merged.",
    "name": "SqlPRFailedToProduceManifestZip", "sql": "SELECT\n                 *\n                FROM\n                (SELECT\n                  p.pr_num,\n                  t.manifest_zip_time,\n                  p.merged_time,\n                  TIMESTAMPDIFF(MINUTE,
    merged_time, CASE WHEN t.manifest_zip_time IS NULL THEN now() ELSE t.manifest_zip_time
    END) latency\n                FROM PullRequests p\n                LEFT OUTER
    JOIN TNRPManifestData t\n                ON p.git_hash = t.git_hash\n\n                WHERE
    p.state =''merged''   AND p.`merged_time` > NOW() - INTERVAL 10 DAY AND manifest_zip_time
    IS NULL order by p.merged_time desc)\n                 manifestZip\n                WHERE
    manifestZip.latency > 30", "watchdogFrequency": "10m"}, {"alertAction": "email",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "0m", "instructions":
    "Following PRs have at least one image that''s not available after 20 minutes
    of starting deployment", "name": "SqlPRImageUnavailable", "sql": "SELECT\n                *\n            FROM\n                (\n                SELECT\n                    prs.pr_num,\n                    crds.PoolName,\n                    crds.ControlEstate,\n                    payload
    -> ''$.status.startTime'',\n                    payload -> ''$.status.maxImageEndTime'',\n                    TIMESTAMPDIFF(MINUTE,
    \n                    \t\tSTR_TO_DATE(JSON_UNQUOTE(payload -> ''$.status.startTime''),''%Y-%m-%dT%H:%i:%s''),
    \n                    \t\tSTR_TO_DATE( CASE \n                    \t\t\t\t\t\tWHEN
    payload -> ''$.status.maxImageEndTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()
    \n                    \t\t\t\t\t\tELSE JSON_UNQUOTE(payload -> ''$.status.maxImageEndTime'')
    \n                    \t\t\t\t\t\tEND,\n                    \t\t\t\t\t''%Y-%m-%dT%H:%i:%s''))
    latencyMin\n            FROM\n                PullRequests prs\n            LEFT  JOIN\n                    (\n                    SELECT
    *\n                    FROM\n                    crd_history\n                    WHERE
    ApiKind = ''Bundle'') crds\n                ON crds.PRNum = prs.pr_num\n                WHERE  prs.merged_time
    > now() - INTERVAL 10 DAY\n            ORDER BY prs.merged_time desc\n            )
    imageLatency\n            WHERE  latencyMin > 20", "watchdogFrequency": "10m"},
    {"alertAction": "businesshours_pagerduty", "alertFrequency": "24h", "alertProfile":
    "sam", "alertThreshold": "3m", "name": "KubednsPodCount", "sql": "SELECT\n              controlEstate,\n              Running,\n              NotRunning\n            FROM\n            (\n            SELECT\n              controlEstate,\n              SUM(Running)
    as Running,\n              SUM(NotRunning) as NotRunning\n            FROM\n            (\n            SELECT\n              controlEstate,\n              (CASE
    WHEN Phase = ''Running'' then 1 else 0 end) as Running,\n              (CASE WHEN
    Phase <> ''Running'' then 1 else 0 end) as NotRunning\n            FROM podDetailView\n            WHERE
    namespace = ''kube-system'' AND name LIKE ''kube-dns-%'' AND controlEstate = ''prd-sam''\n            )
    as ss\n            GROUP BY controlEstate\n            ORDER BY NotRunning desc\n            )
    as ss1\n            WHERE\n             Running < NotRunning", "watchdogFrequency":
    "1m"}, {"alertAction": "email", "alertFrequency": "24h", "alertProfile": "sam",
    "alertThreshold": "5m", "name": "KubednsPodCountProd", "sql": "SELECT\n              controlEstate,\n              Running,\n              NotRunning\n            FROM\n            (\n            SELECT\n              controlEstate,\n              SUM(Running)
    as Running,\n              SUM(NotRunning) as NotRunning\n            FROM\n            (\n            SELECT\n              controlEstate,\n              (CASE
    WHEN Phase = ''Running'' then 1 else 0 end) as Running,\n              (CASE WHEN
    Phase <> ''Running'' then 1 else 0 end) as NotRunning\n            FROM podDetailView\n            WHERE
    namespace = ''kube-system'' AND name LIKE ''kube-dns-%'' AND (upper(Kingdom) NOT
    IN (''PRD'', ''XRD'', ''LO2'', ''LO3''))\n            ) as ss\n            GROUP
    BY controlEstate\n            ORDER BY NotRunning desc\n            ) as ss1\n            WHERE\n             Running
    < NotRunning", "watchdogFrequency": "1m"}, {"alertAction": "pagerduty", "alertFrequency":
    "24h", "alertProfile": "sam", "alertThreshold": "20m", "instructions": "The following
    minion pools have kubeApi nodes down requiring attention during business hours.
    Debug Instructions: https://git.soma.salesforce.com/sam/sam/wiki/Repair-Failed-SAM-Host",
    "name": "SqlKubeApiNode", "sql": "SELECT\n                      minionpool,\n                        TotalApiCount,\n                        NotReadyApiCount\n                      FROM\n                      (\n                        SELECT\n                            minionpool,\n                            TotalApiCount,\n                            (TotalApiCount
    - ReadyApiCount) as NotReadyApiCount,\n                            (ReadyApiCount
    - floor(TotalApiCount/2 +1)) as dist\n                        FROM\n                        (\n                          SELECT\n                            COUNT(*)
    as TotalApiCount,\n                            SUM(CASE WHEN READY = ''True''
    THEN 1 ELSE 0 END) as ReadyApiCount,\n                            minionpool\n                          FROM\n                            nodeDetailView
    nd\n                          WHERE\n                            Name like ''%kubeapi%''\n                            AND
    minionpool NOT LIKE ''%ceph%''\n                            AND minionpool NOT
    LIKE ''%slb%''\n                            AND minionpool NOT LIKE ''%storage%''\n                            AND
    (now() > STR_TO_DATE(''2019-01-10'', ''%Y-%m-%d'') OR Name != ''shared0-samkubeapi3-1-par.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-hnd.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-xrd.eng.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-dfw.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi1-1-lo2.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi3-2-ph2.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi3-1-par.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-yhu.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samtwokubeapi1-1-prd.eng.sfdc.net'')\n                          GROUP
    BY minionpool\n                        ) ss\n                        ) ss2\n                where
    NotReadyApiCount>0 and dist=0", "watchdogFrequency": "5m"}, {"alertAction": "businesshours_pagerduty",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "20m", "instructions":
    "The following minion pools have kubeApi nodes down requiring attention during
    business hours. Debug Instructions: https://git.soma.salesforce.com/sam/sam/wiki/Repair-Failed-SAM-Host",
    "name": "SqlKubeApiNode", "sql": "SELECT\n                      minionpool,\n                        TotalApiCount,\n                        NotReadyApiCount\n                      FROM\n                      (\n                        SELECT\n                            minionpool,\n                            TotalApiCount,\n                            (TotalApiCount
    - ReadyApiCount) as NotReadyApiCount,\n                            (ReadyApiCount
    - floor(TotalApiCount/2 +1)) as dist\n                        FROM\n                        (\n                          SELECT\n                            COUNT(*)
    as TotalApiCount,\n                            SUM(CASE WHEN READY = ''True''
    THEN 1 ELSE 0 END) as ReadyApiCount,\n                            minionpool\n                          FROM\n                            nodeDetailView
    nd\n                          WHERE\n                            Name like ''%kubeapi%''\n                            AND
    minionpool NOT LIKE ''%ceph%''\n                            AND minionpool NOT
    LIKE ''%slb%''\n                            AND minionpool NOT LIKE ''%storage%''\n                            AND
    (now() > STR_TO_DATE(''2019-01-10'', ''%Y-%m-%d'') OR Name != ''shared0-samkubeapi3-1-par.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-hnd.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-xrd.eng.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-dfw.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi1-1-lo2.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi3-2-ph2.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi3-1-par.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samkubeapi2-1-yhu.ops.sfdc.net'')\n                            AND(Name
    != ''shared0-samtwokubeapi1-1-prd.eng.sfdc.net'')\n                          GROUP
    BY minionpool\n                        ) ss\n                        ) ss2\n                where
    NotReadyApiCount>0 and dist>0", "watchdogFrequency": "5m"}, {"alertAction": "businesshours_pagerduty",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "20m", "instructions":
    "The following SAM control stack components dont have a healhty autodeployer pod",
    "name": "SqlSamControlDeployer", "sql": "select\n                      ControlEstate,\n                      name,\n                      NodeName\n                  from
    podDetailView\n                  where\n                  Phase <> ''Running''
    and\n                  Namespace = ''sam-system''\n                  and name
    like ''samcontrol-deployer%''\n                  and controlEstate not like ''aws%''\n                  and
    controlEstate not like ''gsf%'' ", "watchdogFrequency": "5m"}, {"alertAction":
    "email", "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "5m",
    "name": "SqlTooManyPodsInNamespace", "sql": "select * from (\n  select \n    controlEstate,
    \n    namespace, \n    count(*) as podCount,\n    count(distinct Payload->>''$.spec.nodeName'')
    as nodeCount,\n    sum(case when Payload->>''$.status.reason'' = ''Evicted'' then
    1 else 0 end) as podEvictedCount,\n    sum(case when Payload->>''$.status.phase''
    = ''Pending'' then 1 else 0 end) as podPendingCount,\n    sum(case when Payload->>''$.status.phase''
    = ''Running'' then 1 else 0 end) as podRunningCount,\n    left(group_concat(Payload->>''$.status.message''),
    1024) as sampleMessages\n  from k8s_resource\n  where ApiKind = ''Pod''\n  group
    by controlEstate, namespace\n) as ss having podCount > (case when namespace =
    ''sam-system'' then 15*nodeCount else 200 end)", "watchdogFrequency": "5m"}]}'
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    sam.data.sfdc.net/owner: sam
  name: watchdogsamsqlqueries
  namespace: sam-system
