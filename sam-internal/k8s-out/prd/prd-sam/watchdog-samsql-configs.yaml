apiVersion: v1
data:
  watchdog-samsql-profiles.jsonnet: '{"alertProfiles": [{"email": "sam-test-alerts@salesforce.com",
    "name": "sam", "pagerDuty": "sam-pagerduty@salesforce.com"}]}'
  watchdog-samsql-queries.jsonnet: '{"argus_metrics": [{"name": "SqlArgusDemo", "sql":
    "select ''sam.DFW.NONE.dfw-foo'' as Scope, ''iptables.Count'' as Metric, ''''
    as Tags, 15 as Value", "watchdogFrequency": "10m"}], "sql_alerts": [{"alertAction":
    "email", "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "10m",
    "instructions": "The following deployments are reported as bad customer deployments
    in Production. Debug Instructions: https://git.soma.salesforce.com/sam/sam/wiki/Debug-Failed-Deployment",
    "name": "SqlSlaDepl", "sql": "SELECT * FROM\n                        (\n                          SELECT\n                            ControlEstate,\n                            Namespace,\n                            Name,\n                            JSON_EXTRACT(Payload,
    ''$.metadata.annotations.\"smb.sam.data.sfdc.net/emailTo\"'') AS email,\n                            CASE
    WHEN JSON_EXTRACT(Payload, ''$.metadata.labels.sam_app'') is NULL then False\n                                 ELSE
    True END AS IsSamApp,\n                            JSON_EXTRACT(Payload, ''$.spec.replicas'')
    AS desiredReplicas,\n                            JSON_EXTRACT(Payload, ''$.status.availableReplicas'')
    AS availableReplicas,\n                            JSON_EXTRACT(Payload, ''$.status.updatedReplicas'')
    AS updatedReplicas,\n                            (JSON_EXTRACT(Payload, ''$.spec.replicas'')
    - JSON_EXTRACT(Payload, ''$.status.availableReplicas'')) AS kpodsDown,\n                            COALESCE(JSON_EXTRACT(Payload,
    ''$.status.availableReplicas'') /nullif(JSON_EXTRACT(Payload, ''$.spec.replicas''),
    0), 0) AS availability,\n                            0.6 as minAvailability,\n                            CONCAT(''http://dashboard-'',SUBSTR(ControlEstate,
    1, 3),''-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/'',Namespace,''/'',Name,''?namespace='',Namespace)
    AS Url\n                            FROM k8s_resource\n                            WHERE
    ApiKind = ''Deployment''\n                        ) AS ss\n                        WHERE\n                           isSamApp
    AND\n                           ( Namespace != ''sam-watchdog'' AND Namespace
    != ''sam-system'' AND Namespace != ''csc-sam'' AND Namespace NOT LIKE ''%slb%''
    AND Namespace NOT LIKE ''%user%'') AND\n                           (availableReplicas
    != desiredReplicas OR availableReplicas IS NULL) AND\n                           (availability
    IS NULL OR availability < 0.6) AND\n                           (kpodsDown IS NULL
    OR kpodsDown >1) AND\n                           NOT ControlEstate LIKE ''prd-%''
    AND\n                           ControlEstate != ''unknown'' AND\n                           desiredReplicas
    > 1", "watchdogFrequency": "10m"}, {"alertAction": "email", "alertFrequency":
    "24h", "alertProfile": "sam", "alertThreshold": "10m", "instructions": "The following
    minion pools have multiple nodes down in Production requiring immediate attention
    according to our SLA. Debug Instructions: https://git.soma.salesforce.com/sam/sam/wiki/Repair-Failed-SAM-Host",
    "name": "SqlSlaNode", "sql": "SELECT\n              \tminionpool,\n              \tTotalCount,\n              \tNotReadyCount,\n              \tNotReadyPerc\n              FROM\n              (\n              SELECT\n                      minionpool,\n                      TotalCount
    ,\n                      NotReadyCount,\n                      (NotReadyCount/TotalCount)
    as ''NotReadyPerc''\n\n              FROM\n              (\n                  SELECT\n                        COUNT(*)
    as TotalCount,\n                        SUM(CASE WHEN READY = ''True'' THEN 0
    ELSE 1 END) as NotReadyCount,\n                        minionpool\n                  FROM\n                        nodeDetailView\n                  WHERE\n                        KINGDOM
    != ''PRD'' AND KINGDOM != ''UNK''\n                        AND minionpool NOT
    LIKE ''%ceph%''\n                  GROUP BY minionpool\n              ) ss\n              )
    ss2\n              WHERE (TotalCount < 10 AND NotReadyCount >=2) OR (TotalCount
    >= 10 AND NotReadyPerc >=0.2)", "watchdogFrequency": "10m"}, {"alertAction": "email",
    "alertFrequency": "24h", "alertProfile": "sam", "alertThreshold": "10m", "instructions":
    "The following SAM control stack components dont have even 1 healhty pod", "name":
    "SqlSamControl", "sql": "SELECT * FROM\n                  (\n                    SELECT\n                      ControlEstate,\n                      Namespace,\n                      Name,\n                      JSON_EXTRACT(Payload,
    ''$.spec.replicas'') AS desiredReplicas,\n                      JSON_EXTRACT(Payload,
    ''$.status.availableReplicas'') AS availableReplicas,\n                      JSON_EXTRACT(Payload,
    ''$.status.updatedReplicas'') AS updatedReplicas,\n                      (JSON_EXTRACT(Payload,
    ''$.spec.replicas'') - JSON_EXTRACT(Payload, ''$.status.availableReplicas''))
    AS kpodsDown,\n                      COALESCE(JSON_EXTRACT(Payload, ''$.status.availableReplicas'')
    /nullif(JSON_EXTRACT(Payload, ''$.spec.replicas''), 0), 0) AS availability,\n                      CONCAT(''http://dashboard-'',SUBSTR(ControlEstate,
    1, 3),''-sam.csc-sam.prd-sam.prd.slb.sfdc.net/#!/deployment/'',Namespace,''/'',Name,''?namespace='',Namespace)
    AS Url\n                      FROM k8s_resource\n                      WHERE ApiKind
    = ''Deployment''\n                  ) AS ss\n                  WHERE\n                     Namespace
    = ''sam-system'' AND\n                     (availableReplicas < 1 OR availableReplicas
    IS NULL) AND\n                     ControlEstate NOT LIKE ''%sdc%'' AND\n                     ControlEstate
    NOT LIKE ''%storage%'' AND\n                     ControlEstate NOT LIKE ''%sdn%''
    AND\n                     ControlEstate NOT LIKE ''%slb%'' AND\n                     desiredReplicas
    != 0", "watchdogFrequency": "10m"}, {"alertAction": "email", "alertFrequency":
    "24h", "alertProfile": "sam", "alertThreshold": "10m", "instructions": "Following
    PRs have failed to get deployed within 45 minutes of getting merged.", "name":
    "SqlPRLatency", "sql": "SELECT \n \tpr_num\nFROM \n\t(\n\tSELECT \t\n   \t\tprs.pr_num,\n   \t\tTIMESTAMPDIFF(MINUTE,prs.merged_time,
    CASE WHEN payload -> ''$.status.endTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()
    ELSE payload -> ''$.status.endTime'' END  ) latency\nFROM \n\tPullRequests prs\nLEFT  JOIN  \n\t\t(\n\t\tSELECT
    * \n\t\tFROM \n\t\tcrd_history \n\t \tWHERE ApiKind = ''Bundle'') crds\n\tON crds.PRNum
    = prs.pr_num\nORDER BY prs.pr_num \n) prLatency\nWHERE latency > 45", "watchdogFrequency":
    "10m"}, {"alertAction": "email", "alertFrequency": "24h", "alertProfile": "sam",
    "alertThreshold": "10m", "instructions": "95th percentile of PRLatency is greater
    than 45 minutes", "name": "Sql95thPRLatency", "sql": "SELECT *\n    FROM\n    (
    SELECT * FROM\n     ( SELECT\n         prLatency.*,\n         @row_num :=@row_num
    + 1 AS row_num\n    FROM\n        (\n        SELECT\n            prs.pr_num,\n            TIMESTAMPDIFF(MINUTE,prs.merged_time,
    CASE WHEN payload -> ''$.status.endTime'' = ''0001-01-01T00:00:00Z'' THEN CURRENT_TIMESTAMP()
    ELSE payload -> ''$.status.endTime'' END  ) latency\n    FROM\n        PullRequests
    prs\n    LEFT  JOIN\n            (\n            SELECT *\n            FROM\n            crd_history\n            WHERE
    ApiKind = ''Bundle'') crds\n        ON crds.PRNum = prs.pr_num\n    ORDER BY prs.pr_num\n    )
    prLatency ,\n     (SELECT @row_num:=0) counter ORDER BY prLatency.latency\n     )\n    temp
    WHERE temp.row_num = ROUND (.95* @row_num)\n    )\n    temp2 WHERE temp2.latency
    > 45", "watchdogFrequency": "24h"}]}'
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: watchdogsamsqlqueries
  namespace: sam-system
