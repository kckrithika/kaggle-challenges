apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: mysql-ss
    sam_app: mysql-ss
    sam_function: mysql-ss
    sam_loadbalancer: mysql-ss
  name: mysql-ss
  namespace: sam-system
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: mysql-ss
  serviceName: mysql-service
  template:
    metadata:
      annotations:
        madkub.sam.sfdc.net/allcerts: |-
          {
           "certreqs": [
            {
             "cert-type": "client",
             "kingdom": "prd",
             "name": "cert1",
             "role": "sam-system.mysql-ss"
            }
           ]
          }
      labels:
        app: mysql-ss
        sam_app: mysql-ss
        sam_function: mysql-ss
        sam_loadbalancer: mysql-ss
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pool
                operator: In
                values:
                - prd-sam
      containers:
      - env:
        - name: HOST_TYPE
          value: SAM
        - name: SFDC_METRICS_SERVICE_HOST
          value: ajna0-funnel1-0-prd.data.sfdc.net
        - name: SFDC_METRICS_SERVICE_PORT
          value: "80"
        - name: FUNCTION_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: FUNCTION_INSTANCE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: FUNCTION_INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: FUNCTION
          value: mysql
        - name: KINGDOM
          value: prd
        - name: ESTATE
          value: prd-sam
        - name: SUPERPOD
          value: None
        - name: SFDC_SETTINGS_PATH
          value: -.-.prd.-.mysql
        - name: SFDC_SETTINGS_SUPERPOD
          value: '-'
        - name: SETTINGS_PATH
          value: -.-.prd.-.mysql
        - name: SETTINGS_SUPERPOD
          value: '-'
        - name: MYSQL_ROOT_PASSWORD_FILE
          value: /var/mysqlPwd/pass.txt
        - name: MYSQL_USER
          value: liveness_user
        - name: MYSQL_PASSWORD
          value: liveness_password
        image: ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/d.smith/mysql:20180917_111738.0b5255d9.dirty.duncsmith-ltm
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - mysqladmin ping -u$MYSQL_USER -p$MYSQL_PASSWORD
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - |
              mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h 127.0.0.1 -e "SELECT 1"
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage-replicated
          subPath: mysql
        - mountPath: /etc/mysql/conf.d
          name: conf
        - mountPath: /certs
          name: certs
        - mountPath: /var/mysqlPwd
          name: mysql
          readOnly: true
      - command:
        - bash
        - -c
        - "set -ex\ncd /var/lib/mysql\n# Determine binlog position of cloned data,
          if any.\nif [[ -f xtrabackup_slave_info ]]; then\n  # XtraBackup already
          generated a partial \"CHANGE MASTER TO\" query\n  # because we're cloning
          from an existing slave.\n  mv xtrabackup_slave_info change_master_to.sql.in\n
          \ # Ignore xtrabackup_binlog_info in this case (it's useless).\n  rm -f
          xtrabackup_binlog_info\nelif [[ -f xtrabackup_binlog_info ]]; then\n  #
          We're cloning directly from master. Parse binlog position.\n  [[ `cat xtrabackup_binlog_info`
          =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\n  rm xtrabackup_binlog_info\n
          \ echo \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\n        MASTER_LOG_POS=${BASH_REMATCH[2]}\"
          > change_master_to.sql.in\nfi\n# Check if we need to complete a clone by
          starting replication.\nif [[ -f change_master_to.sql.in ]]; then\n  echo
          \"Waiting for mysqld to be ready (accepting connections)\"\n  until mysql
          -u$MYSQL_ROOT_USER -p$MYSQL_ROOT_PASS -h 127.0.0.1 -e \"SELECT 1\"; do sleep
          1; done\n  echo \"Initializing replication from clone position\"\n  # In
          case of container restart, attempt this at-most-once.\n  mv change_master_to.sql.in
          change_master_to.sql.orig\n  mysql -h 127.0.0.1 -u$MYSQL_ROOT_USER -p$MYSQL_ROOT_PASS
          <<EOF\n  $(<change_master_to.sql.orig),\n  MASTER_HOST='mysql-ss-0.mysql-service',\n
          \ MASTER_USER='$MYSQL_ROOT_USER',\n  MASTER_PASSWORD='$MYSQL_ROOT_PASS',\n
          \ MASTER_CONNECT_RETRY=10;\n  START SLAVE;\n  EOF\nfi\n# Start a server
          to send backups when requested by peers.\nexec ncat --listen --keep-open
          --send-only --max-conns=1 3307 -c \n  \"xtrabackup --backup --slave-info
          --stream=xbstream --host=127.0.0.1 --user=$MYSQL_ROOT_USER --password=$MYSQL_ROOT_PASS\"\n"
        env:
        - name: MYSQL_ROOT_USER
          value: root
        - name: MYSQL_ROOT_PASS
          valueFrom:
            secretKeyRef:
              key: pass.txt
              name: mysql-pwd
        image: ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/d.smith/xtrabackup:1.0
        imagePullPolicy: IfNotPresent
        name: xtrabackup
        ports:
        - containerPort: 3307
          name: xtrabackup
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage-replicated
          subPath: mysql
        - mountPath: /etc/mysql/conf.d
          name: conf
      - command:
        - bash
        - -c
        - "set -ex\ncd /var/lib/mysql-backups\n[[ `hostname` =~ -([0-9]+)$ ]] || exit
          1\nordinal=${BASH_REMATCH[1]}\nwhile :\ndo \n  echo \"Backing up mysql offline
          db\"    \n  mysqldump -h 127.0.0.1 --all-databases -u$MYSQL_ROOT_USER -p$MYSQL_ROOT_PASS
          > mysql-backup-$(date +%d).bkup  \n  sleep $BACKUP_INTERVAL_SECONDS\ndone\n"
        env:
        - name: MYSQL_ROOT_USER
          value: root
        - name: MYSQL_ROOT_PASS
          valueFrom:
            secretKeyRef:
              key: pass.txt
              name: mysql-pwd
        - name: BACKUP_INTERVAL_SECONDS
          value: "6000"
        image: ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/d.smith/mysql:20180917_111738.0b5255d9.dirty.duncsmith-ltm
        imagePullPolicy: IfNotPresent
        name: mysql-dumper
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql-backups
          name: mysql-backup
        - mountPath: /etc/mysql/conf.d
          name: conf
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - /sam/madkub-client
        - --madkub-endpoint
        - https://10.254.208.254:32007
        - --maddog-endpoint
        - https://all.pkicontroller.pki.blank.prd.prod.non-estates.sfdcsd.net:8443
        - --maddog-server-ca
        - /maddog-hostdata/ca/security-ca.pem
        - --madkub-server-ca
        - /maddog-hostdata/ca/cacerts.pem
        - --ca-folder
        - /maddog-hostdata/ca
        - --token-folder
        - /tokens
        - --funnel-endpoint
        - http://ajna0-funnel1-0-prd.data.sfdc.net:80
        - --kingdom
        - prd
        - --superpod
        - None
        - --estate
        - prd-sam
        - --testca-folder
        - /maddog-hostdata/ca_test
        - --cert-folders
        - certs:/certs-certs
        env:
        - name: MADKUB_NODENAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: MADKUB_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: MADKUB_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: ops0-artifactrepo2-0-prd.data.sfdc.net/docker-release-candidate/tnrp/sam/madkub:1.0.0-0000077-b1d3a629
        imagePullPolicy: Always
        name: sam-madkub-integration-init
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /maddog-hostdata
          name: sam-maddog-cahost
        - mountPath: /tokens
          name: sam-maddog-token
        - mountPath: /certs-certs
          name: certs
      - args:
        - chmod -R 775 /vols/sam-maddog-cahost
        - chown -R 7447:7447 /vols/sam-maddog-cahost
        - chmod -R 775 /vols/mysql-backup
        - chown -R 7447:7447 /vols/mysql-backup
        command:
        - /bin/sh
        - -c
        image: ops0-artifactrepo2-0-prd.data.sfdc.net/docker-release-candidate/tnrp/sam/hypersam:sam-c07d4afb-673
        imagePullPolicy: Always
        name: permissionsetterinitcontainer
        resources: {}
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /vols/sam-maddog-cahost
          name: sam-maddog-cahost
        - mountPath: /vols/mysql-backup
          name: mysql-backup
      - command:
        - bash
        - -c
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        image: ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/d.smith/mysql:20180917_111738.0b5255d9.dirty.duncsmith-ltm
        imagePullPolicy: IfNotPresent
        name: init-mysql
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /mnt/conf.d
          name: conf
        - mountPath: /mnt/config-map
          name: config-map
      - command:
        - bash
        - -c
        - "set -ex\n# Skip the clone if data already exists.\n[[ -d /var/lib/mysql/mysql
          ]] && echo \"Mysql data already exists in /var/lib/mysql/mysql. Skipping
          auto-restore\" && exit 0\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\nif
          [[ $ordinal -eq 0 ]]; then\n  echo \"This pod is ss index 0 therefore must
          be the write master with no data in /mysql . Will only clone from subordinates
          if clone flag is set\"\n  # If this is master - check for cloning from ro-subordinates
          \n  if [[ $INITIALIZE_EMPTY_MASTER -eq 0 ]]; then\n    echo \"No data found
          in /var/mysql but the initialize empty flag is not set. This is an invalid
          state. This pod will remain in crashloopbackoff until either A. This startup
          script finds a db to start in /var/mysql or B. the INITIALIZE_EMPTY_MASTER
          flag is set to some value other than 0.\"\n    sleep 600\n    exit 1\n  fi\nelse\n
          \ # Clone data from previous peer.\n  ncat --recv-only mysql-ss-$(($ordinal-1)).mysql-service
          3307 | xbstream -x -C /var/lib/mysql\n  # Prepare the backup.\n  xtrabackup
          --prepare --target-dir=/var/lib/mysql\nfi\n"
        env:
        - name: INITIALIZE_EMPTY_MASTER
          value: "1"
        image: ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/d.smith/xtrabackup:1.0
        imagePullPolicy: IfNotPresent
        name: clone-mysql
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage-replicated
          subPath: mysql
        - mountPath: /etc/mysql/conf.d
          name: conf
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 20
      volumes:
      - emptyDir: {}
        name: conf
      - configMap:
          defaultMode: 420
          name: mysql-ss
        name: config-map
      - emptyDir:
          medium: Memory
        name: sam-maddog-token
      - hostPath:
          path: /etc/pki_service
        name: sam-maddog-cahost
      - emptyDir:
          medium: Memory
        name: certs
      - hostPath:
          path: /data/mysql-backup
        name: mysql-backup
      - name: mysql
        secret:
          defaultMode: 420
          secretName: mysql-pwd
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: standard-rdi-hdd-pool
      creationTimestamp: null
      name: mysql-persistent-storage-replicated
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
