apiVersion: v1
data:
  slb-journald-killer.sh: "#!/bin/bash\n\n# This script attempts to periodically kill
    systemd-journald on nodes that are running a patch set with a known\n# memory
    leak in that process.\n\nset -o errexit\nset -o nounset\nset -o pipefail\nset
    -o xtrace\n\n# Set the interval at which this script will check for stuck SLB
    pods.\ninterval_in_seconds=60 # 4 hours\n\n# Define a splay window between .9
    * interval_in_seconds and 1.1 * interval_in_seconds.\n# Don't want all nodes restarting
    systemd-journald at the same time.\nwindow_start=$(((interval_in_seconds*9)/10))\nwindow_width=$(((interval_in_seconds*2)/10))\n\n#
    Check whether we are currently on the impacted patch set.\nfunction is_2019_0116_patch()
    {\n    [[ $(head -n 1 /hostetc/sfdc-release) == \"VERSION sfdc-CE7.6-2019-0116\"
    ]]\n}\n\n# kill_journald_loop is the core worker loop of this script. It periodically
    \nfunction kill_journald_loop() {\n    while true\n    do\n        sleep_period=$(((RANDOM%window_width)+window_start))\n
    \       echo \"Sleeping for $sleep_period seconds\"\n        sleep \"$sleep_period\"\n\n
    \       # Skip if this host is not running the 2019.0116 patch.\n        if !
    is_2019_0116_patch; then\n            echo \"Host is not on the impacted patch
    set. Skipping.\"\n            continue\n        fi\n\n        journald_pid=$(ps
    -ef | grep -v grep | grep systemd-journald | awk '{print $2}')\n\n        [[ -z
    $journald_pid ]] && continue\n\n        echo \"Killing journald\"\n        kill
    -9 \"$journald_pid\"\n    done\n}\n\nfunction main() {\n    kill_journald_loop\n}\n\nmain"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: slb-ops-adhoc
  namespace: sam-system
