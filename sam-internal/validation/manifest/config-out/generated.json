{
   "$id": "manifestConfigs",
   "LivenessProbeExceptions": {
      "enum": [
         "ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/dkardach/aqueduct-test-deploy:20170418",
         "ops0-artifactrepo2-0-prd.data.sfdc.net/docker-release-candidate/tnrp/csc-health/redis:3.2",
         "ops0-artifactrepo2-0-prd.data.sfdc.net/docker-release-candidate/tnrp/geoip/geoip:latest-0000006-7d845eb4",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/adhoot:rcwd-qualifiednameasdevice",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/ccait-geoip-frontend:1.0.2",
         "ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/jbratton/ccait-xlt-agent:4.8.3",
         "ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/jan-krueger/ccait-xlt-agent:4.8.3",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/gater-sandbox:dmachak-20170424B",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/geoip-demo:dev",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/geoip:dev",
         "ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/jbratton/jbratton-grpc-service:0.0.2",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/sherpa:dev",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/sherpa:joey-5",
         "tnrp/caas/caas-redis:0.1-0000017-13232819",
         "tnrp/caas/caas-redis:0.1-0000024-13415531",
         "tnrp/caas/caas-redis:0.1-13175027-16",
         "tnrp/caas/caas-test:0.1-12623074-62",
         "tnrp/csc-health/health-endpoint-watchdog:health-endpoint-watchdog-0000002-e337db53",
         "tnrp/csc-health/report-collector-availability-watchdog:2.1.0-0000055-cf053cd8",
         "tnrp/csc-health/report-collector-availability-watchdog:2.2.0-0000056-3dbf7901",
         "tnrp/csc-health/report-collector:1.3.0-0034e8be-93",
         "tnrp/csc-health/report-collector:1.4.0-0000106-22c71e3f",
         "tnrp/gater/gater:1.1.0-0000026-13383348",
         "tnrp/gater/gater:1.1.1-0000079-13550320",
         "tnrp/p4tools/redis:3.0.2-01",
         "tnrp/sam/hypersam:sam-0000701-487f2675",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/gater-sandbox:dmachak-20170502A",
         "tnrp/csc-health/health-endpoint-watchdog:health-endpoint-watchdog-0000006-c9f39ecc",
         "shared0-samcontrol1-1-prd.eng.sfdc.net:5000/gater-sandbox:dmachak-20170503B",
         "tnrp/gater/gater:1.1.1-0000028-13622462"
      ]
   },
   "Rule_ContainerRequirements": {
      "MustExist": {
         "else": {
            "required": [
               "name",
               "image"
            ]
         },
         "if": {
            "properties": {
               "image": {
                  "not": {
                     "$ref": "manifestConfigs#/LivenessProbeExceptions"
                  }
               }
            }
         },
         "then": {
            "required": [
               "name",
               "image",
               "livenessProbe"
            ]
         }
      },
      "NotAllowed": {
         "propertyNames": {
            "not": {
               "enum": [
                  "securitycontext",
                  "lifecycle"
               ]
            }
         }
      }
   },
   "Rule_EnvRequirements": {
      "MustExist": {
         "required": [
            "name",
            "value"
         ]
      }
   },
   "Rule_EnvVariableName": {
      "EnvNamePatterns": {
         "allOf": [
            {
               "anyOf": [
                  {
                     "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
                  }
               ]
            },
            { }
         ]
      },
      "ReservedEnvName": {
         "not": {
            "enum": [
               "HOST_TYPE",
               "SFDC_METRICS_SERVICE_HOST",
               "SFDC_METRICS_SERVICE_PORT",
               "FUNCTION_NAMESPACE",
               "FUNCTION_INSTANCE_NAME",
               "FUNCTION_INSTANCE_IP",
               "SFDC_SETTINGS_PATH",
               "SFDC_SETTINGS_SUPERPOD",
               "KINGDOM",
               "ESTATE",
               "SUPERPOD",
               "FUNCTION"
            ]
         }
      }
   },
   "Rule_FunctionTypeValidation": {
      "TypesAllowed": {
         "enum": [
            "stateful-set",
            "deployment"
         ]
      },
      "TypesRequirements": {
         "else": {
            "allOf": [
               {
                  "required": [
                     "lbname"
                  ]
               },
               {
                  "propertyNames": {
                     "not": {
                        "enum": [
                           "strategy"
                        ]
                     }
                  }
               }
            ]
         },
         "if": {
            "properties": {
               "type": {
                  "enum": [
                     "deployment"
                  ]
               }
            }
         },
         "then": {
            "propertyNames": {
               "not": {
                  "enum": [
                     "lbname",
                     "volumeClaimTemplates"
                  ]
               }
            }
         }
      }
   },
   "Rule_FunctionsRequirements": {
      "MustExist": {
         "required": [
            "name",
            "count",
            "containers"
         ]
      }
   },
   "Rule_HostPathList": {
      "allOf": [
         {
            "anyOf": [
               {
                  "pattern": "^/data/([a-zA-Z-_]+/?)+$"
               },
               {
                  "pattern": "^/fastdata/([a-zA-Z-_]+/?)+$"
               },
               {
                  "pattern": "^/cowdata/([a-zA-Z-_]+/?)+$"
               },
               {
                  "pattern": "^/var/log/([a-zA-Z-_]+/?)+$"
               },
               {
                  "pattern": "^/home/caas/([a-zA-Z-_]+/?)+$"
               },
               {
                  "pattern": "^/home/sfdc-([a-zA-Z-_]+)([a-zA-Z-_]+/?)+$"
               }
            ]
         },
         {
            "not": {
               "anyOf": [
                  {
                     "pattern": "^(/data/certs).*$"
                  }
               ]
            }
         }
      ]
   },
   "Rule_HttpGetRequirements": {
      "MustExist": {
         "required": [
            "port"
         ]
      }
   },
   "Rule_IdentityValidation": {
      "properties": {
         "pod": {
            "$ref": "#/Rule_IsDNSValidation",
            "type": "string"
         },
         "serviceName": {
            "$ref": "#/Rule_IsDNSValidation",
            "type": "string"
         }
      }
   },
   "Rule_ImageForm": {
      "allOf": [
         {
            "anyOf": [
               {
                  "pattern": "^ops0-artifactrepo1-0-prd.data.sfdc.net/docker-sam/.+/.+:.+$"
               },
               {
                  "pattern": "^chatbots/.+/.+:.+$"
               },
               {
                  "pattern": "^ops0-artifactrepo2-0-prd.data.sfdc.net/tnrp/sam/hypersam/.+/.+:.+$"
               },
               {
                  "pattern": "^tnrp/.+/.+:.+$"
               },
               {
                  "pattern": "^sfci/.+/.+:.+$"
               },
               {
                  "pattern": "^ops0-artifactrepo1-0-xrd.data.sfdc.net/docker-sam/.+/.+:.+$"
               }
            ]
         },
         {
            "not": {
               "anyOf": [
                  {
                     "pattern": "^.*(latest)$"
                  },
                  {
                     "pattern": "^ops0-artifactrepo2-0-prd.data.sfdc.net/(docker-p2p|docker-sam)/.+:.+$"
                  }
               ]
            }
         }
      ]
   },
   "Rule_IsDNS1035Validation": {
      "maxLength": 63,
      "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$"
   },
   "Rule_IsDNSValidation": {
      "maxLength": 63,
      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
   },
   "Rule_LBFunctionOrSelector": {
      "anyOf": [
         {
            "allOf": [
               {
                  "required": [
                     "function"
                  ]
               },
               {
                  "propertyNames": {
                     "not": {
                        "enum": [
                           "selector"
                        ]
                     }
                  }
               }
            ]
         },
         {
            "allOf": [
               {
                  "required": [
                     "selector"
                  ]
               },
               {
                  "propertyNames": {
                     "not": {
                        "enum": [
                           "function"
                        ]
                     }
                  }
               }
            ]
         }
      ]
   },
   "Rule_LBPortRequirements": {
      "MustExist": {
         "required": [
            "port",
            "targetport"
         ]
      }
   },
   "Rule_LBPortsValidation": {
      "CIDRValidation": {
         "items": {
            "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}(/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "type": "string"
         }
      },
      "LBPortAlgorithm": {
         "if": {
            "properties": {
               "lbalgorithm": {
                  "enum": [
                     "leastconn",
                     "roundrobin",
                     "hash"
                  ]
               }
            }
         },
         "then": {
            "properties": {
               "lbtype": {
                  "not": {
                     "enum": [
                        "dsr"
                     ]
                  }
               }
            }
         }
      },
      "LBPortAllowedAlgorithm": {
         "enum": [
            "leastconn",
            "roundrobin",
            "hash"
         ]
      },
      "LBPortAllowedTypes": {
         "enum": [
            "dsr",
            "tcp",
            "http"
         ]
      },
      "LBPortType": {
         "if": {
            "properties": {
               "lbtype": {
                  "enum": [
                     "dsr",
                     "tcp"
                  ]
               }
            }
         },
         "then": {
            "propertyNames": {
               "not": {
                  "enum": [
                     "reencrypt",
                     "sticky"
                  ]
               }
            }
         }
      },
      "TLSPattern": {
         "pattern": "^secret_service:[a-zA-Z0-9]+:[-a-zA-Z0-9]*$"
      },
      "TLSValidation": {
         "dependencies": {
            "TlsCertificate": {
               "properties": {
                  "lbtype": {
                     "enum": [
                        "http"
                     ]
                  },
                  "tls": {
                     "enum": [
                        true
                     ]
                  }
               },
               "required": [
                  "tls",
                  "lbtype"
               ]
            },
            "TlsKey": {
               "properties": {
                  "lbtype": {
                     "enum": [
                        "http"
                     ]
                  },
                  "tls": {
                     "enum": [
                        true
                     ]
                  }
               },
               "required": [
                  "tls",
                  "lbtype"
               ]
            }
         }
      }
   },
   "Rule_LBRequirements": {
      "MustExist": {
         "required": [
            "lbname",
            "ports"
         ]
      }
   },
   "Rule_MaddogValidation": {
      "dependencies": {
         "lbnames": {
            "properties": {
               "type": {
                  "enum": [
                     "server"
                  ]
               }
            }
         }
      },
      "properties": {
         "lbnames": {
            "type": "array"
         },
         "type": {
            "enum": [
               "server",
               "client"
            ]
         }
      },
      "required": [
         "type"
      ]
   },
   "Rule_ManifestRequirements": {
      "MustExist": {
         "required": [
            "apiVersion",
            "system"
         ]
      }
   },
   "Rule_ReservedPorts": {
      "not": {
         "anyOf": [
            {
               "enum": [
                  2379,
                  2380,
                  4194,
                  8000,
                  8002,
                  8080,
                  9099,
                  9100,
                  10250,
                  10251,
                  10252,
                  10255,
                  64121
               ]
            },
            {
               "maximum": 1024,
               "minimum": 0
            },
            {
               "maximum": 40000,
               "minimum": 32000
            }
         ]
      }
   },
   "Rule_SystemRequirements": {
      "MustExist": {
         "required": [
            "functions"
         ]
      }
   },
   "Rule_ValidateContainerPort": {
      "IsValidPortName": {
         "allOf": [
            {
               "pattern": "^[-a-z0-9]+$"
            },
            {
               "pattern": "[a-z]"
            },
            {
               "not": {
                  "anyOf": [
                     {
                        "pattern": "^.*--.*$"
                     },
                     {
                        "pattern": "^-.*$"
                     },
                     {
                        "pattern": "^.*-$"
                     }
                  ]
               }
            }
         ],
         "maxLength": 15
      },
      "IsValidPortNumber": {
         "maximum": 65535,
         "minimum": 1
      }
   },
   "Rule_VolumeMountRequirements": {
      "MustExist": {
         "required": [
            "name",
            "mountPath"
         ]
      },
      "NotAllowed": {
         "propertyNames": {
            "not": {
               "enum": [
                  "subPath"
               ]
            }
         }
      }
   },
   "Rule_VolumeMountValidation": {
      "MountPathPattern": {
         "allOf": [
            {
               "anyOf": [
                  {
                     "pattern": "^[^:]+$"
                  }
               ]
            },
            { }
         ]
      },
      "SecretVolume": {
         "if": {
            "anyOf": [
               {
                  "properties": {
                     "name": {
                        "enum": [
                           "secretvol"
                        ]
                     }
                  }
               },
               {
                  "properties": {
                     "mountPath": {
                        "enum": [
                           "/secrets/"
                        ]
                     }
                  }
               }
            ]
         },
         "then": {
            "allOf": [
               {
                  "required": [
                     "readOnly"
                  ]
               },
               {
                  "properties": {
                     "readOnly": {
                        "enum": [
                           true
                        ]
                     }
                  }
               }
            ]
         }
      }
   },
   "Rule_VolumesFormat": {
      "anyOf": [
         {
            "additionalProperties": false,
            "properties": {
               "maddogCert": {
                  "allOf": [
                     {
                        "$ref": "#/Rule_MaddogValidation"
                     }
                  ]
               },
               "name": {
                  "$ref": "#/Rule_IsDNSValidation",
                  "type": "string"
               }
            }
         },
         {
            "additionalProperties": false,
            "properties": {
               "name": {
                  "$ref": "#/Rule_IsDNSValidation",
                  "type": "string"
               },
               "secret": {
                  "properties": {
                     "secretName": {
                        "type": "string"
                     }
                  },
                  "required": [
                     "secretName"
                  ],
                  "type": "object"
               }
            }
         },
         {
            "additionalProperties": false,
            "properties": {
               "k4aSecret": {
                  "properties": {
                     "secretName": {
                        "type": "string"
                     }
                  },
                  "required": [
                     "secretName"
                  ],
                  "type": "object"
               },
               "name": {
                  "$ref": "#/Rule_IsDNSValidation",
                  "type": "string"
               }
            }
         },
         {
            "additionalProperties": false,
            "properties": {
               "hostPath": {
                  "properties": {
                     "path": {
                        "$ref": "#/Rule_HostPathList",
                        "type": "string"
                     }
                  },
                  "type": "object"
               },
               "name": {
                  "$ref": "#/Rule_IsDNSValidation",
                  "type": "string"
               }
            }
         },
         {
            "additionalProperties": false,
            "properties": {
               "emptyDir": {
                  "additionalProperties": false,
                  "properties": { },
                  "type": "object"
               },
               "name": {
                  "$ref": "#/Rule_IsDNSValidation",
                  "type": "string"
               }
            }
         }
      ]
   },
   "Rule_volumeClaimTemplatesRequirements": {
      "MustExist": {
         "required": [
            "name"
         ]
      }
   }
}
