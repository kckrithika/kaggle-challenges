{
  "v1": {
    "config": null,
    "helmValues": "# Top level istio values file has the following sections.\n#\n# global: This file is the authoritative and exhaustive source for the global section.\n#\n# chart sections: Every subdirectory inside the charts/ directory has a top level\n#       configuration key in this file. This file overrides the values specified\n#       by the charts/${chartname}/values.yaml.\n#       Check the chart level values file for exhaustive list of configuration options.\n\n#\n# Gateways Configuration, refer to the charts/gateways/values.yaml\n# for detailed configuration\n#\ngateways:\n  enabled: true\n#\n# sidecar-injector webhook configuration, refer to the\n# charts/sidecarInjectorWebhook/values.yaml for detailed configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n#\n# galley configuration, refer to charts/galley/values.yaml\n# for detailed configuration\n#\ngalley:\n  enabled: false\n#\n# mixer configuration\n#\n# @see charts/mixer/values.yaml, it takes precedence\nmixer:\n  policy:\n    # if policy is enabled the global.disablePolicyChecks has affect.\n    enabled: false\n  telemetry:\n    enabled: false\n#\n# pilot configuration\n#\n# @see charts/pilot/values.yaml\n  enabled: false\npilot:\n  enabled: true\n#\n# security configuration\n#\nsecurity:\n  enabled: false\n#\n# nodeagent configuration\n#\nnodeagent:\n  enabled: false\n#\n# addon grafana configuration\n#\ngrafana:\n  enabled: false\n#\n# addon prometheus configuration\n#\nprometheus:\n  enabled: false\n#\n# addon jaeger tracing configuration\n#\ntracing:\n  enabled: false\n#\n# addon kiali tracing configuration\n#\nkiali:\n  enabled: false\n#\n# addon certmanager configuration\n#\ncertmanager:\n  enabled: false\n#\n# Istio CNI plugin enabled\n#   This must be enabled to use the CNI plugin in Istio.  The CNI plugin is installed separately.\n#   If true, the privileged initContainer istio-init is not needed to perform the traffic redirect\n#   settings for the istio-proxy.\n#\nistio_cni:\n  enabled: false\n# addon Istio CoreDNS configuration\n#\nistiocoredns:\n  enabled: false\n# Common settings used among istio subcharts.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: ops0-artifactrepo2-0-prd.data.sfdc.net/docker-sfci-dev/sfci/servicemesh/istio-packaging\n  # Default tag for Istio images.\n  tag: f4b0db053ed277ba5335e7c2e88e505445b4ac92\n  # Comma-separated minimum per-scope logging level of messages to output, in the form of \u003cscope\u003e:\u003clevel\u003e,\u003cscope\u003e:\u003clevel\u003e\n  # The control plane has different scopes depending on component, but can configure default log level across all components\n  # If empty, default scope and level will be used as configured in code\n  logging:\n    level: default:info\n\n  # monitoring port used by mixer, pilot, galley\n  monitoringPort: 15014\n  k8sIngress:\n    enabled: false\n    # Gateway used for k8s Ingress resources. By default it is\n    # using 'istio:ingressgateway' that will be installed by setting\n    # 'gateways.enabled' and 'gateways.istio-ingressgateway.enabled'\n    # flags to true.\n    gatewayName: ingressgateway\n    # enableHttps will add port 443 on the ingress.\n    # It REQUIRES that the certificates are installed  in the\n    # expected secrets - enabling this option without certificates\n    # will result in LDS rejection and the ingress will not work.\n    enableHttps: false\n  proxy:\n    image: proxy\n    # cluster domain. Default value is \"cluster.local\".\n    clusterDomain: cluster.local\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 2000m\n        memory: 1024Mi\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 2\n    # Configures the access log for each sidecar.\n    # Options:\n    #   \"\" - disables access log\n    #   \"/dev/stdout\" - enables access log\n    accessLogFile: \"\"\n\n    # Configure how and what fields are displayed in sidecar access log. Setting to\n    # empty string will result in default log format\n    accessLogFormat: \"\"\n\n    # Configure the access log for sidecar to JSON or TEXT.\n    accessLogEncoding: TEXT\n    # Log level for proxy, applies to gateways and sidecars.  If left empty, \"warning\" is used.\n    # Expected values are: trace|debug|info|warning|error|critical|off\n    logLevel: info\n\n    # Per Component log level for proxy, applies to gateways and sidecars. If a component level is\n    # not set, then the global \"logLevel\" will be used. If left empty, \"misc:error\" is used.\n    componentLogLevel: \"\"\n\n    # Configure the DNS refresh rate for Envoy cluster of type STRICT_DNS\n    # This must be given it terms of seconds. For example, 300s is valid but 5m is invalid.\n    dnsRefreshRate: 300s\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n    # If set, newly injected sidecars will have core dumps enabled.\n    enableCoreDump: false\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    statusPort: 15020\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: 127.1.2.3/32\n    excludeIPRanges: \"\"\n    excludeOutboundPorts: \"\"\n\n    # pod internal interfaces\n    kubevirtInterfaces: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: '*'\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: null\n      port: null\n    envoyMetricsService:\n      enabled: true\n      host: switchboard.service-mesh\n      port: 15001\n    tracer: zipkin\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n  # controlPlaneSecurityEnabled enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n  # disablePolicyChecks disables mixer policy checks.\n  # if mixer.policy.enabled==true then disablePolicyChecks has affect.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: true\n  # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.\n  # Default is false which means the traffic is denied when the client is unable to connect to Mixer.\n  policyCheckFailOpen: false\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: false\n  # Configuration for each of the supported tracers\n  tracer:\n    # Configuration for envoy to send trace data to LightStep.\n    # Disabled by default.\n    # address: the \u003chost\u003e:\u003cport\u003e of the satellite pool\n    # accessToken: required for sending data to the pool\n    # secure: specifies whether data should be sent with TLS\n    # cacertPath: the path to the file containing the cacert to use when verifying TLS. If secure is true, this is\n    #   required. If a value is specified then a secret called \"lightstep.cacert\" must be created in the destination\n    #   namespace with the key matching the base of the provided cacertPath and the value being the cacert itself.\n    #\n    lightstep:\n      address: \"\"\n                                 # example: lightstep-satellite:443\n      accessToken: \"\"\n                                 # example: abcdefg1234567\n      secure: true\n                                 # example: true|false\n      cacertPath: \"\"\n                                 # example: /etc/lightstep/cacert.pem\n    zipkin:\n      # Host:Port for reporting trace data in zipkin format. If not specified, will default to\n      # zipkin service (port 9411) in the same namespace as the other istio components.\n      address: \"\"\n    datadog:\n      # Host:Port for submitting traces to the Datadog agent.\n      address: $(HOST_IP):8126\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # For components that don't use ServiceAccounts (i.e. grafana, servicegraph, tracing)\n  # ImagePullSecrets will be added to the corresponding Deployment(StatefulSet) objects.\n  # Must be set for any cluster configured with private docker registry.\n  imagePullSecrets: null\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n  # Default node selector to be applied to all deployments so that all pods can be\n  # constrained to run a particular nodes. Each component can overwrite these default\n  # values by adding its node selector block in the relevant section below and setting\n  # the desired values.\n  defaultNodeSelector: {}\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: false\n  # Custom DNS config for the pod to resolve names of services in other\n  # clusters. Use this to add additional search domains, and other settings.\n  # see\n  # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config\n  # This does not apply to gateway pods as they typically need a different\n  # set of DNS settings than the normal application pods (e.g., in\n  # multicluster scenarios).\n  # NOTE: If using templates, follow the pattern in the commented example below.\n  #podDNSSearchNamespaces:\n  #- global\n  #- \"[[ valueOrDefault .DeploymentMeta.Namespace \\\"default\\\" ]].global\"\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion:\n    enabled: false\n    # If set to true, the pilot and citadel mtls and the plain text pilot ports\n    # will be exposed on an internal gateway\n    useILB: false\n  multiCluster:\n    # Set to true to connect two kubernetes clusters via their respective\n    # ingressgateway services when pods in each cluster cannot directly\n    # talk to one another. All clusters should be using Istio mTLS and must\n    # have a shared root CA for this model to work.\n    enabled: false\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # enable pod distruption budget for the control plane, which is used to\n  # ensure Istio control plane components are gradually upgraded or recovered.\n  defaultPodDisruptionBudget:\n    enabled: false\n    # The values aren't mutable due to a current PodDisruptionBudget limitation\n    # minAvailable: 1\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low priority class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Use the Mesh Control Protocol (MCP) for configuring Mixer and\n  # Pilot. Requires galley (`--set galley.enabled=true`).\n  useMCP: false\n  # The trust domain corresponds to the trust root of a system\n  # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain\n  # Indicate the domain used in SPIFFE identity URL\n  # The default depends on the environment.\n  #   kubernetes: cluster.local\n  #   else:  default dns domain\n  trustDomain: \"\"\n\n  # Set the default behavior of the sidecar for handling outbound traffic from the application:\n  # ALLOW_ANY - outbound traffic to unknown destinations will be allowed, in case there are no\n  #   services or ServiceEntries for the destination port\n  # REGISTRY_ONLY - restrict outbound traffic to services defined in the service registry as well\n  #   as those defined through ServiceEntries\n  # ALLOW_ANY is the default in 1.1.  This means each pod will be able to make outbound requests \n  # to services outside of the mesh without any ServiceEntry.\n  # REGISTRY_ONLY was the default in 1.0.  If this behavior is desired, set the value below to REGISTRY_ONLY.\n  outboundTrafficPolicy:\n    mode: ALLOW_ANY\n  # The namespace where globally shared configurations should be present.\n  # DestinationRules that apply to the entire mesh (e.g., enabling mTLS),\n  # default Sidecar configs, etc. should be added to this namespace.\n  # configRootNamespace: istio-config\n\n  # set the default set of namespaces to which services, service entries, virtual services, destination\n  # rules should be exported to. Currently only one value can be provided in this list. This value\n  # should be one of the following two options:\n  # * implies these objects are visible to all namespaces, enabling any sidecar to talk to any other sidecar.\n  # . implies these objects are visible to only to sidecars in the same namespace, or if imported as a Sidecar.egress.host  \n  #defaultConfigVisibilitySettings:\n  #- '*'\n\n  sds:\n    # SDS enabled. IF set to true, mTLS certificates for the sidecars will be\n    # distributed through the SecretDiscoveryService instead of using K8S secrets to mount the certificates.\n    enabled: false\n    udsPath: \"\"\n    useTrustworthyJwt: false\n    useNormalJwt: false\n  # Configure the mesh networks to be used by the Split Horizon EDS.\n  #\n  # The following example defines two networks with different endpoints association methods.\n  # For `network1` all endpoints that their IP belongs to the provided CIDR range will be\n  # mapped to network1. The gateway for this network example is specified by its public IP\n  # address and port.\n  # The second network, `network2`, in this example is defined differently with all endpoints\n  # retrieved through the specified Multi-Cluster registry being mapped to network2. The\n  # gateway is also defined differently with the name of the gateway service on the remote\n  # cluster. The public IP for the gateway will be determined from that remote service (only\n  # LoadBalancer gateway service type is currently supported, for a NodePort type gateway service,\n  # it still need to be configured manually).\n  #\n  # meshNetworks:\n  #   network1:\n  #     endpoints:\n  #     - fromCidr: \"192.168.0.1/24\"\n  #     gateways:\n  #     - address: 1.1.1.1\n  #       port: 80\n  #   network2:\n  #     endpoints:\n  #     - fromRegistry: reg1\n  #     gateways:\n  #     - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local\n  #       port: 443\n  #\n  meshNetworks: {}\n\n  # Specifies the global locality load balancing settings.\n  # Locality-weighted load balancing allows administrators to control the distribution of traffic to\n  # endpoints based on the localities of where the traffic originates and where it will terminate.\n  # Please set either failover or distribute configuration but not both.\n  #\n  # localityLbSetting:\n  #   distribute:\n  #   - from: \"us-central1/*\"\n  #     to:\n  #       \"us-central1/*\": 80\n  #       \"us-central2/*\": 20\n  #\n  # localityLbSetting:\n  #   failover:\n  #   - from: us-east\n  #     to: eu-west\n  #   - from: us-west\n  #     to: us-east\n  localityLbSetting: {}\n\n  # Specifies whether helm test is enabled or not.\n  # This field is set to false by default, so 'helm template ...'\n  # will ignore the helm test yaml files when generating the template\n  enableHelmTest: false\n",
    "releaseName": "istio",
    "namespace": "mesh-control-plane",
    "helmValuesDefaults": "# Top level istio values file has the following sections.\n#\n# global: This file is the authoritative and exhaustive source for the global section.\n#\n# chart sections: Every subdirectory inside the charts/ directory has a top level\n#       configuration key in this file. This file overrides the values specified\n#       by the charts/${chartname}/values.yaml.\n#       Check the chart level values file for exhaustive list of configuration options.\n\n#\n# Gateways Configuration, refer to the charts/gateways/values.yaml\n# for detailed configuration\n#\ngateways:\n  enabled: true\n\n#\n# sidecar-injector webhook configuration, refer to the\n# charts/sidecarInjectorWebhook/values.yaml for detailed configuration\n#\nsidecarInjectorWebhook:\n  enabled: true\n\n#\n# galley configuration, refer to charts/galley/values.yaml\n# for detailed configuration\n#\ngalley:\n  enabled: true\n\n#\n# mixer configuration\n#\n# @see charts/mixer/values.yaml, it takes precedence\nmixer:\n  policy:\n    # if policy is enabled the global.disablePolicyChecks has affect.\n    enabled: true\n\n  telemetry:\n    enabled: true\n#\n# pilot configuration\n#\n# @see charts/pilot/values.yaml\npilot:\n  enabled: true\n\n#\n# security configuration\n#\nsecurity:\n  enabled: true\n\n#\n# nodeagent configuration\n#\nnodeagent:\n  enabled: false\n\n#\n# addon grafana configuration\n#\ngrafana:\n  enabled: false\n\n#\n# addon prometheus configuration\n#\nprometheus:\n  enabled: true\n\n#\n# addon jaeger tracing configuration\n#\ntracing:\n  enabled: false\n\n#\n# addon kiali tracing configuration\n#\nkiali:\n  enabled: false\n\n#\n# addon certmanager configuration\n#\ncertmanager:\n  enabled: false\n  \n#\n# Istio CNI plugin enabled\n#   This must be enabled to use the CNI plugin in Istio.  The CNI plugin is installed separately.\n#   If true, the privileged initContainer istio-init is not needed to perform the traffic redirect\n#   settings for the istio-proxy.\n#\nistio_cni:\n  enabled: false\n\n# addon Istio CoreDNS configuration\n#\nistiocoredns:\n  enabled: false\n\n# Common settings used among istio subcharts.\nglobal:\n  # Default hub for Istio images.\n  # Releases are published to docker hub under 'istio' project.\n  # Daily builds from prow are on gcr.io, and nightly builds from circle on docker.io/istionightly\n  hub: gcr.io/istio-release\n\n  # Default tag for Istio images.\n  tag: release-1.2-latest-daily\n\n  # Comma-separated minimum per-scope logging level of messages to output, in the form of \u003cscope\u003e:\u003clevel\u003e,\u003cscope\u003e:\u003clevel\u003e\n  # The control plane has different scopes depending on component, but can configure default log level across all components\n  # If empty, default scope and level will be used as configured in code\n  logging:\n    level: \"default:info\"\n\n  # monitoring port used by mixer, pilot, galley\n  monitoringPort: 15014\n\n  k8sIngress:\n    enabled: false\n    # Gateway used for k8s Ingress resources. By default it is\n    # using 'istio:ingressgateway' that will be installed by setting\n    # 'gateways.enabled' and 'gateways.istio-ingressgateway.enabled'\n    # flags to true.\n    gatewayName: ingressgateway\n    # enableHttps will add port 443 on the ingress.\n    # It REQUIRES that the certificates are installed  in the\n    # expected secrets - enabling this option without certificates\n    # will result in LDS rejection and the ingress will not work.\n    enableHttps: false\n\n  proxy:\n    image: proxyv2\n\n    # cluster domain. Default value is \"cluster.local\".\n    clusterDomain: \"cluster.local\"\n\n    # Resources for the sidecar.\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 2000m\n        memory: 1024Mi\n\n    # Controls number of Proxy worker threads.\n    # If set to 0 (default), then start worker thread for each CPU thread/core.\n    concurrency: 2\n\n    # Configures the access log for each sidecar.\n    # Options:\n    #   \"\" - disables access log\n    #   \"/dev/stdout\" - enables access log\n    accessLogFile: \"\"\n\n    # Configure how and what fields are displayed in sidecar access log. Setting to\n    # empty string will result in default log format\n    accessLogFormat: \"\"\n\n    # Configure the access log for sidecar to JSON or TEXT.\n    accessLogEncoding: TEXT\n\n    # Log level for proxy, applies to gateways and sidecars.  If left empty, \"warning\" is used.\n    # Expected values are: trace|debug|info|warning|error|critical|off\n    logLevel: \"\"\n\n    # Per Component log level for proxy, applies to gateways and sidecars. If a component level is\n    # not set, then the global \"logLevel\" will be used. If left empty, \"misc:error\" is used.\n    componentLogLevel: \"\"\n\n    # Configure the DNS refresh rate for Envoy cluster of type STRICT_DNS\n    # This must be given it terms of seconds. For example, 300s is valid but 5m is invalid.\n    dnsRefreshRate: 300s\n\n    #If set to true, istio-proxy container will have privileged securityContext\n    privileged: false\n\n    # If set, newly injected sidecars will have core dumps enabled.\n    enableCoreDump: false\n\n    # Default port for Pilot agent health checks. A value of 0 will disable health checking.\n    statusPort: 15020\n\n    # The initial delay for readiness probes in seconds.\n    readinessInitialDelaySeconds: 1\n\n    # The period between readiness probes.\n    readinessPeriodSeconds: 2\n\n    # The number of successive failed probes before indicating readiness failure.\n    readinessFailureThreshold: 30\n\n    # istio egress capture whitelist\n    # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly\n    # example: includeIPRanges: \"172.30.0.0/16,172.20.0.0/16\"\n    # would only capture egress traffic on those two IP Ranges, all other outbound traffic would\n    # be allowed by the sidecar\n    includeIPRanges: \"*\"\n    excludeIPRanges: \"\"\n    excludeOutboundPorts: \"\"\n\n    # pod internal interfaces\n    kubevirtInterfaces: \"\"\n\n    # istio ingress capture whitelist\n    # examples:\n    #     Redirect no inbound traffic to Envoy:    --includeInboundPorts=\"\"\n    #     Redirect all inbound traffic to Envoy:   --includeInboundPorts=\"*\"\n    #     Redirect only selected ports:            --includeInboundPorts=\"80,8080\"\n    includeInboundPorts: \"*\"\n    excludeInboundPorts: \"\"\n\n    # This controls the 'policy' in the sidecar injector.\n    autoInject: enabled\n\n    # Sets the destination Statsd in envoy (the value of the \"--statsdUdpAddress\" proxy argument\n    # would be \u003chost\u003e:\u003cport\u003e).\n    # Disabled by default.\n    # The istio-statsd-prom-bridge is deprecated and should not be used moving forward.\n    envoyStatsd:\n      # If enabled is set to true, host and port must also be provided. Istio no longer provides a statsd collector.\n      enabled: false\n      host: # example: statsd-svc.istio-system\n      port: # example: 9125\n\n    # Sets the Envoy Metrics Service address, used to push Envoy metrics to an external collector\n    # via the Metrics Service gRPC API. This contains detailed stats information emitted directly\n    # by Envoy and should not be confused with the the Istio telemetry. The Envoy stats are also\n    # available to scrape via the Envoy admin port at either /stats or /stats/prometheus.\n    #\n    # See https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/metrics/v2/metrics_service.proto\n    # for details about Envoy's Metrics Service API. \n    #\n    # Disabled by default.\n    envoyMetricsService:\n      enabled: false\n      host: # example: metrics-service.istio-system\n      port: # example: 15000\n\n    # Specify which tracer to use. One of: lightstep, zipkin, datadog\n    tracer: \"zipkin\"\n\n  proxy_init:\n    # Base name for the proxy_init container, used to configure iptables.\n    image: proxy_init\n\n  # imagePullPolicy is applied to istio control plane components.\n  # local tests require IfNotPresent, to avoid uploading to dockerhub.\n  # TODO: Switch to Always as default, and override in the local tests.\n  imagePullPolicy: IfNotPresent\n\n  # controlPlaneSecurityEnabled enabled. Will result in delays starting the pods while secrets are\n  # propagated, not recommended for tests.\n  controlPlaneSecurityEnabled: false\n\n  # disablePolicyChecks disables mixer policy checks.\n  # if mixer.policy.enabled==true then disablePolicyChecks has affect.\n  # Will set the value with same name in istio config map - pilot needs to be restarted to take effect.\n  disablePolicyChecks: true\n\n  # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.\n  # Default is false which means the traffic is denied when the client is unable to connect to Mixer.\n  policyCheckFailOpen: false\n\n  # EnableTracing sets the value with same name in istio config map, requires pilot restart to take effect.\n  enableTracing: true\n\n  # Configuration for each of the supported tracers\n  tracer:\n    # Configuration for envoy to send trace data to LightStep.\n    # Disabled by default.\n    # address: the \u003chost\u003e:\u003cport\u003e of the satellite pool\n    # accessToken: required for sending data to the pool\n    # secure: specifies whether data should be sent with TLS\n    # cacertPath: the path to the file containing the cacert to use when verifying TLS. If secure is true, this is\n    #   required. If a value is specified then a secret called \"lightstep.cacert\" must be created in the destination\n    #   namespace with the key matching the base of the provided cacertPath and the value being the cacert itself.\n    #\n    lightstep:\n      address: \"\"                # example: lightstep-satellite:443\n      accessToken: \"\"            # example: abcdefg1234567\n      secure: true               # example: true|false\n      cacertPath: \"\"             # example: /etc/lightstep/cacert.pem\n    zipkin:\n      # Host:Port for reporting trace data in zipkin format. If not specified, will default to\n      # zipkin service (port 9411) in the same namespace as the other istio components.\n      address: \"\"\n    datadog:\n      # Host:Port for submitting traces to the Datadog agent.\n      address: \"$(HOST_IP):8126\"\n\n  # Default mtls policy. If true, mtls between services will be enabled by default.\n  mtls:\n    # Default setting for service-to-service mtls. Can be set explicitly using\n    # destination rules or service annotations.\n    enabled: false\n\n  # ImagePullSecrets for all ServiceAccount, list of secrets in the same namespace\n  # to use for pulling any images in pods that reference this ServiceAccount.\n  # For components that don't use ServiceAccounts (i.e. grafana, servicegraph, tracing)\n  # ImagePullSecrets will be added to the corresponding Deployment(StatefulSet) objects.\n  # Must be set for any cluster configured with private docker registry.\n  imagePullSecrets:\n    # - private-registry-key\n\n  # Specify pod scheduling arch(amd64, ppc64le, s390x) and weight as follows:\n  #   0 - Never scheduled\n  #   1 - Least preferred\n  #   2 - No preference\n  #   3 - Most preferred\n  arch:\n    amd64: 2\n    s390x: 2\n    ppc64le: 2\n\n  # Whether to restrict the applications namespace the controller manages;\n  # If not set, controller watches all namespaces\n  oneNamespace: false\n\n  # Default node selector to be applied to all deployments so that all pods can be\n  # constrained to run a particular nodes. Each component can overwrite these default\n  # values by adding its node selector block in the relevant section below and setting\n  # the desired values.\n  defaultNodeSelector: {}\n\n  # Whether to perform server-side validation of configuration.\n  configValidation: true\n\n  # Custom DNS config for the pod to resolve names of services in other\n  # clusters. Use this to add additional search domains, and other settings.\n  # see\n  # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#dns-config\n  # This does not apply to gateway pods as they typically need a different\n  # set of DNS settings than the normal application pods (e.g., in\n  # multicluster scenarios).\n  # NOTE: If using templates, follow the pattern in the commented example below.\n  #podDNSSearchNamespaces:\n  #- global\n  #- \"[[ valueOrDefault .DeploymentMeta.Namespace \\\"default\\\" ]].global\"\n\n  # If set to true, the pilot and citadel mtls will be exposed on the\n  # ingress gateway\n  meshExpansion:\n    enabled: false\n    # If set to true, the pilot and citadel mtls and the plain text pilot ports\n    # will be exposed on an internal gateway\n    useILB: false\n\n  multiCluster:\n    # Set to true to connect two kubernetes clusters via their respective\n    # ingressgateway services when pods in each cluster cannot directly\n    # talk to one another. All clusters should be using Istio mTLS and must\n    # have a shared root CA for this model to work.\n    enabled: false\n\n  # A minimal set of requested resources to applied to all deployments so that\n  # Horizontal Pod Autoscaler will be able to function (if set).\n  # Each component can overwrite these default values by adding its own resources\n  # block in the relevant section below and setting the desired resources values.\n  defaultResources:\n    requests:\n      cpu: 10m\n    #   memory: 128Mi\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # enable pod distruption budget for the control plane, which is used to\n  # ensure Istio control plane components are gradually upgraded or recovered.\n  defaultPodDisruptionBudget:\n    enabled: true\n    # The values aren't mutable due to a current PodDisruptionBudget limitation\n    # minAvailable: 1\n\n  # Kubernetes \u003e=v1.11.0 will create two PriorityClass, including system-cluster-critical and\n  # system-node-critical, it is better to configure this in order to make sure your Istio pods\n  # will not be killed because of low priority class.\n  # Refer to https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n  # for more detail.\n  priorityClassName: \"\"\n\n  # Use the Mesh Control Protocol (MCP) for configuring Mixer and\n  # Pilot. Requires galley (`--set galley.enabled=true`).\n  useMCP: true\n\n  # The trust domain corresponds to the trust root of a system\n  # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain\n  # Indicate the domain used in SPIFFE identity URL\n  # The default depends on the environment.\n  #   kubernetes: cluster.local\n  #   else:  default dns domain\n  trustDomain: \"\"\n\n  # Set the default behavior of the sidecar for handling outbound traffic from the application:\n  # ALLOW_ANY - outbound traffic to unknown destinations will be allowed, in case there are no\n  #   services or ServiceEntries for the destination port\n  # REGISTRY_ONLY - restrict outbound traffic to services defined in the service registry as well\n  #   as those defined through ServiceEntries\n  # ALLOW_ANY is the default in 1.1.  This means each pod will be able to make outbound requests \n  # to services outside of the mesh without any ServiceEntry.\n  # REGISTRY_ONLY was the default in 1.0.  If this behavior is desired, set the value below to REGISTRY_ONLY.\n  outboundTrafficPolicy:\n    mode: ALLOW_ANY\n\n  # The namespace where globally shared configurations should be present.\n  # DestinationRules that apply to the entire mesh (e.g., enabling mTLS),\n  # default Sidecar configs, etc. should be added to this namespace.\n  # configRootNamespace: istio-config\n\n  # set the default set of namespaces to which services, service entries, virtual services, destination\n  # rules should be exported to. Currently only one value can be provided in this list. This value\n  # should be one of the following two options:\n  # * implies these objects are visible to all namespaces, enabling any sidecar to talk to any other sidecar.\n  # . implies these objects are visible to only to sidecars in the same namespace, or if imported as a Sidecar.egress.host  \n  #defaultConfigVisibilitySettings:\n  #- '*'\n\n  sds:\n    # SDS enabled. IF set to true, mTLS certificates for the sidecars will be\n    # distributed through the SecretDiscoveryService instead of using K8S secrets to mount the certificates.\n    enabled: false\n    udsPath: \"\"\n    useTrustworthyJwt: false\n    useNormalJwt: false\n\n  # Configure the mesh networks to be used by the Split Horizon EDS.\n  #\n  # The following example defines two networks with different endpoints association methods.\n  # For `network1` all endpoints that their IP belongs to the provided CIDR range will be\n  # mapped to network1. The gateway for this network example is specified by its public IP\n  # address and port.\n  # The second network, `network2`, in this example is defined differently with all endpoints\n  # retrieved through the specified Multi-Cluster registry being mapped to network2. The\n  # gateway is also defined differently with the name of the gateway service on the remote\n  # cluster. The public IP for the gateway will be determined from that remote service (only\n  # LoadBalancer gateway service type is currently supported, for a NodePort type gateway service,\n  # it still need to be configured manually).\n  #\n  # meshNetworks:\n  #   network1:\n  #     endpoints:\n  #     - fromCidr: \"192.168.0.1/24\"\n  #     gateways:\n  #     - address: 1.1.1.1\n  #       port: 80\n  #   network2:\n  #     endpoints:\n  #     - fromRegistry: reg1\n  #     gateways:\n  #     - registryServiceName: istio-ingressgateway.istio-system.svc.cluster.local\n  #       port: 443\n  #\n  meshNetworks: {}\n\n  # Specifies the global locality load balancing settings.\n  # Locality-weighted load balancing allows administrators to control the distribution of traffic to\n  # endpoints based on the localities of where the traffic originates and where it will terminate.\n  # Please set either failover or distribute configuration but not both.\n  #\n  # localityLbSetting:\n  #   distribute:\n  #   - from: \"us-central1/*\"\n  #     to:\n  #       \"us-central1/*\": 80\n  #       \"us-central2/*\": 20\n  #\n  # localityLbSetting:\n  #   failover:\n  #   - from: us-east\n  #     to: eu-west\n  #   - from: us-west\n  #     to: us-east\n  localityLbSetting: {}\n\n  # Specifies whether helm test is enabled or not.\n  # This field is set to false by default, so 'helm template ...'\n  # will ignore the helm test yaml files when generating the template\n  enableHelmTest: false\n",
    "kustomize": {
      "overlays": {
        "ship": {
          "patches": {
            "/charts/gateways/templates/autoscale.yaml": "apiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: istio-ingressgateway\n  namespace: core-on-sam-sp2\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable",
            "/charts/gateways/templates/deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-ingressgateway\n  namespace: core-on-sam-sp2\nspec:\n  selector:\n    matchLabels:\n      app: istio-ingressgateway\n      istio: ingressgateway\n  template:\n    metadata:\n      annotations:\n        madkub.sam.sfdc.net/allcerts: mcpIstioConfig.ingressGatewayMadkubAnnotations\n      labels:\n        name: istio-ingressgateway\n    spec:\n      containers:\n      - args:\n        - proxy\n        - router\n        - --domain\n        - $(POD_NAMESPACE).svc.cluster.local\n        - --log_output_level\n        - info\n        - --drainDuration\n        - 45s\n        - --parentShutdownDuration\n        - 1m0s\n        - --connectTimeout\n        - 10s\n        - --serviceCluster\n        - istio-ingressgateway\n        - --zipkinAddress\n        - zipkin.service-mesh:9411\n        - --proxyAdminPort\n        - \"15000\"\n        - --statusPort\n        - \"15020\"\n        - --controlPlaneAuthPolicy\n        - NONE\n        - --discoveryAddress\n        - istio-pilot.mesh-control-plane:15010\n        env:\n        - name: ESTATE\n          value: mcpIstioConfig.casamEstate\n        - name: ISTIO_METAJSON_METRICS_INCLUSIONS\n          value: \"{\\\"sidecar.istio.io/statsInclusionPrefixes\\\": \\\"access_log_file,cluster,cluster_manager,control_plane,http,http2,http_mixer_filter,listener,listener_manager,redis,runtime,server,stats,tcp,tcp_mixer_filter,tracing\\\"}\"\n        name: istio-proxy\n        ports:\n        # coreapp https\n        - containerPort: 8085\n        - $patch: replace\n        resources:\n          limits:\n            memory: 1024Mi\n          requests:\n            memory: 1024Mi\n        volumeMounts:\n        - mountPath: /etc/pki_service\n          name: maddog-certs\n        - mountPath: /etc/certs/root-cert.pem\n          name: tls-server-cert\n          subPath: ca.pem\n        - mountPath: /etc/certs/cert-chain.pem\n          name: tls-server-cert\n          subPath: server/certificates/server.pem\n        - mountPath: /etc/certs/key.pem\n          name: tls-server-cert\n          subPath: server/keys/server-key.pem\n        - mountPath: /etc/certs/client.pem\n          name: tls-client-cert\n          subPath: client/certificates/client.pem\n        - mountPath: /etc/certs/client-key.pem\n          name: tls-client-cert\n          subPath: client/keys/client-key.pem\n        - mountPath: /client-cert\n          name: tls-client-cert\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - $patch: delete\n          mountPath: /etc/certs\n        - $patch: delete\n          mountPath: /etc/istio/ingressgateway-ca-certs\n        - $patch: delete\n          mountPath: /etc/istio/ingressgateway-certs\n      - args:\n        - /sam/madkub-client\n        - --madkub-endpoint=%(madkubEndpoint)s\n        - --maddog-endpoint=%(maddogEndpoint)s\n        - --maddog-server-ca=/maddog-certs/ca/security-ca.pem\n        - --madkub-server-ca=/maddog-certs/ca/cacerts.pem\n        - --cert-folders=tls-client-cert:/client-cert/\n        - --cert-folders=tls-server-cert:/server-cert/\n        - --token-folder=/tokens/\n        - --ca-folder=/maddog-certs/ca\n        - --refresher\n        - --run-init-for-refresher-mode\n        env:\n        - name: MADKUB_NODENAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: MADKUB_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: MADKUB_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: ESTATE\n          value: mcpIstioConfig.casamEstate  \n        image: mcpIstioConfig.madkubImage\n        imagePullPolicy: IfNotPresent\n        name: madkub-refresher\n        resources: {}\n        volumeMounts:\n        - mountPath: /client-cert\n          name: tls-client-cert\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - mountPath: /maddog-certs/\n          name: maddog-certs\n        - mountPath: /tokens\n          name: tokens\n      initContainers:\n      - args:\n        - /sam/madkub-client\n        - --madkub-endpoint=%(madkubEndpoint)s\n        - --maddog-endpoint=%(maddogEndpoint)s\n        - --maddog-server-ca=/maddog-certs/ca/security-ca.pem\n        - --madkub-server-ca=/maddog-certs/ca/cacerts.pem\n        - --cert-folders=tls-client-cert:/client-cert/\n        - --cert-folders=tls-server-cert:/server-cert/\n        - --token-folder=/tokens/\n        - --ca-folder=/maddog-certs/ca\n        env:\n        - name: MADKUB_NODENAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: MADKUB_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: MADKUB_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        image: mcpIstioConfig.madkubImage\n        imagePullPolicy: IfNotPresent\n        name: madkub-init\n        volumeMounts:\n        - mountPath: /client-cert\n          name: tls-client-cert\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - mountPath: /maddog-certs/\n          name: maddog-certs\n        - mountPath: /tokens\n          name: tokens\n      - command:\n        - bash\n        - -c\n        - |\n          set -ex\n          chmod 775 -R /client-cert \u0026\u0026 chown -R 7447:7447 /client-cert\n          chmod 775 -R /server-cert \u0026\u0026 chown -R 7447:7447 /server-cert\n        image: mcpIstioConfig.permissionInitContainer\n        imagePullPolicy: Always\n        name: permissionsetterinitcontainer\n        securityContext:\n          runAsNonRoot: false\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /client-cert\n          name: tls-client-cert\n        - mountPath: /server-cert\n          name: tls-server-cert\n      nodeSelector:\n        pool: mcpIstioConfig.casamEstate\n      volumes:\n      - hostPath:\n          path: /etc/pki_service\n        name: maddog-certs\n      - emptyDir:\n          medium: Memory\n        name: tls-client-cert\n      - emptyDir:\n          medium: Memory\n        name: tls-server-cert\n      - emptyDir:\n          medium: Memory\n        name: tokens\n      - $patch: delete\n        name: ingressgateway-ca-certs\n      - $patch: delete\n        name: ingressgateway-certs\n      - $patch: delete\n        name: istio-certs",
            "/charts/gateways/templates/role.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-ingressgateway-sds\n  namespace: core-on-sam-sp2",
            "/charts/gateways/templates/rolebindings.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-ingressgateway-sds\n  namespace: core-on-sam-sp2",
            "/charts/gateways/templates/service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    \"slb.sfdc.net/name\": istio-ingressgateway\n    \"slb.sfdc.net/portconfigurations\": |-\n      [\n       {\n        \"lbtype\": \"dsr\",\n        \"port\": 15008,\n        \"targetport\": 15008\n       },\n       {\n        \"lbtype\": \"dsr\",\n        \"port\": 15009,\n        \"targetport\": 15009\n       },\n       {\n        \"lbtype\": \"dsr\",\n        \"port\": 8085,\n        \"targetport\": 8085\n       },\n       {\n        \"lbtype\": \"dsr\",\n        \"port\": 8443,\n        \"targetport\": 8443\n       }\n      ]\n  name: istio-ingressgateway\n  namespace: core-on-sam-sp2\nspec:\n  ports:\n  - port: 8443\n    name: https-coreapp\n  - port: 8085\n    name: https-istio-coreapp\n  - port: 2525\n    name: tcp-coreapp\n  - $patch: replace",
            "/charts/gateways/templates/serviceaccount.yaml": "--- \napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-ingressgateway-service-account\n  namespace: core-on-sam-sp2",
            "/charts/pilot/templates/autoscale.yaml": "apiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: istio-pilot\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable",
            "/charts/pilot/templates/clusterrole.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-pilot-mesh-control-plane",
            "/charts/pilot/templates/clusterrolebinding.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-pilot-mesh-control-plane",
            "/charts/pilot/templates/deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-pilot\n  namespace: mesh-control-plane\nspec:\n  selector:\n    matchLabels:\n      app: pilot\n  template:\n    metadata:\n      labels:\n        name: istio-pilot\n    spec:\n      containers:\n      - env:\n        - name: ESTATE\n          value: mcpIstioConfig.istioEstate\n        name: discovery\n        ports:\n        - containerPort: 15011\n        volumeMounts:\n        - $patch: delete\n          mountPath: /etc/certs\n      - args:\n        - --debug-mode\n        - \"true\"\n        env:\n        - name: FUNCTION_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: SETTINGS_SUPERPOD\n          value: mcpIstioConfig.superpod\n        - name: SETTINGS_PATH\n          value: mcpIstioConfig.settingsPath\n        - name: SFDC_METRICS_SERVICE_HOST\n          value: mcpIstioConfig.funnelHost\n        - name: SFDC_METRICS_SERVICE_PORT\n          value: mcpIstioConfig.funnelPort\n        - name: ESTATE\n          value: mcpIstioConfig.istioEstate\n        image: mcpIstioConfig.metricsScraperImage\n        imagePullPolicy: Always\n        name: metrics-scraper\n        readinessProbe:\n          exec:\n            command:\n            - /bin/true\n          initialDelaySeconds: 5\n          periodSeconds: 30\n          timeoutSeconds: 5\n      - $patch: delete\n        name: istio-proxy\n      nodeSelector:\n        pool: mcpIstioConfig.istioEstate\n      volumes:\n      - $patch: delete\n        name: istio-certs",
            "/charts/pilot/templates/service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    \"slb.sfdc.net/name\": istio-pilot\n    \"slb.sfdc.net/portconfigurations\": |-\n      [\n       {\n        \"lbtype\": \"dsr\",\n        \"port\": 15010,\n        \"targetport\": 15010\n       }\n      ]\n  name: istio-pilot\n  namespace: mesh-control-plane",
            "/charts/pilot/templates/serviceaccount.yaml": "--- \napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-pilot-service-account",
            "/charts/sidecarInjectorWebhook/templates/clusterrole.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-sidecar-injector-mesh-control-plane",
            "/charts/sidecarInjectorWebhook/templates/clusterrolebinding.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-sidecar-injector-admin-role-binding-mesh-control-plane",
            "/charts/sidecarInjectorWebhook/templates/deployment.yaml": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-sidecar-injector\n  namespace: mesh-control-plane\nspec:\n  selector:\n    matchLabels:\n      istio: sidecar-injector\n  template:\n    metadata:\n      annotations:\n        madkub.sam.sfdc.net/allcerts: mcpIstioConfig.sidecarInjectorMadkubAnnotations\n      labels:\n        name: istio-sidecar-injector\n    spec:\n      containers:\n      - args:\n        - --caCertFile=/server-cert/ca.pem\n        - --tlsCertFile=/server-cert/server/certificates/server.pem\n        - --tlsKeyFile=/server-cert/server/keys/server-key.pem\n        - --injectConfig=/etc/istio/inject/config\n        - --meshConfig=/etc/istio/config/mesh\n        - --healthCheckInterval=2s\n        - --healthCheckFile=/health\n        - --port=15009\n        env:\n        - name: ESTATE\n          value: mcpIstioConfig.istioEstate\n        name: sidecar-injector-webhook\n        ports:\n        - containerPort: 15009\n        volumeMounts:\n        - mountPath: /etc/pki_service\n          name: maddog-certs\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - $patch: delete\n          mountPath: /etc/istio/certs\n      - args:\n        - /sam/madkub-client\n        - --madkub-endpoint=%(madkubEndpoint)s\n        - --maddog-endpoint=%(maddogEndpoint)s\n        - --maddog-server-ca=/maddog-certs/ca/security-ca.pem\n        - --madkub-server-ca=/maddog-certs/ca/cacerts.pem\n        - --cert-folders=tls-server-cert:/server-cert/\n        - --token-folder=/tokens/\n        - --requested-cert-type=client\n        - --ca-folder=/maddog-certs/ca\n        - --refresher\n        - --run-init-for-refresher-mode\n        env:\n        - name: MADKUB_NODENAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: MADKUB_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: MADKUB_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        - name: ESTATE\n          value: mcpIstioConfig.istioEstate\n        image: mcpIstioConfig.madkubImage\n        imagePullPolicy: IfNotPresent\n        name: madkub-refresher\n        resources: {}\n        volumeMounts:\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - mountPath: /maddog-certs/\n          name: maddog-certs\n        - mountPath: /tokens\n          name: tokens\n      initContainers:\n      - args:\n        - /sam/madkub-client\n        - --madkub-endpoint=%(madkubEndpoint)s\n        - --maddog-endpoint=%(maddogEndpoint)s\n        - --maddog-server-ca=/maddog-certs/ca/security-ca.pem\n        - --madkub-server-ca=/maddog-certs/ca/cacerts.pem\n        - --cert-folders=tls-server-cert:/server-cert/\n        - --token-folder=/tokens/\n        - --requested-cert-type=client\n        - --ca-folder=/maddog-certs/ca\n        env:\n        - name: MADKUB_NODENAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: spec.nodeName\n        - name: MADKUB_NAME\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.name\n        - name: MADKUB_NAMESPACE\n          valueFrom:\n            fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n        image: mcpIstioConfig.madkubImage\n        imagePullPolicy: IfNotPresent\n        name: madkub-init\n        volumeMounts:\n        - mountPath: /server-cert\n          name: tls-server-cert\n        - mountPath: /maddog-certs/\n          name: maddog-certs\n        - mountPath: /tokens\n          name: tokens\n      - command:\n        - bash\n        - -c\n        - |\n          set -ex\n          chmod 775 -R /client-cert \u0026\u0026 chown -R 7447:7447 /client-cert\n          chmod 775 -R /server-cert \u0026\u0026 chown -R 7447:7447 /server-cert\n        image: mcpIstioConfig.permissionInitContainer\n        imagePullPolicy: Always\n        name: permissionsetterinitcontainer\n        securityContext:\n          runAsNonRoot: false\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /client-cert\n          name: tls-client-cert\n        - mountPath: /server-cert\n          name: tls-server-cert\n      nodeSelector:\n        master: \"true\"\n      volumes:\n      - hostPath:\n          path: /etc/pki_service\n        name: maddog-certs\n      - emptyDir:\n          medium: Memory\n        name: tls-client-cert\n      - emptyDir:\n          medium: Memory\n        name: tls-server-cert\n      - emptyDir:\n          medium: Memory\n        name: tokens\n      - $patch: delete\n        name: certs",
            "/charts/sidecarInjectorWebhook/templates/mutatingwebhook.yaml": "--- \napiVersion: admissionregistration.k8s.io/v1beta1\nkind: MutatingWebhookConfiguration\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-sidecar-injector\n  namespace:",
            "/charts/sidecarInjectorWebhook/templates/service.yaml": "apiVersion: v1\nkind: Service\nmetadata:\n  name: istio-sidecar-injector\n  namespace: mesh-control-plane\nspec:\n  ports:\n  - port: 443\n    targetPort: 15009\n    name: sidecar-injector-port",
            "/charts/sidecarInjectorWebhook/templates/serviceaccount.yaml": "--- \napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-sidecar-injector-service-account",
            "/clusterrole.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-reader",
            "/clusterrolebinding.yaml": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-multi",
            "/configmap.yaml": "# IMPORTANT - To preserve SAM k8s out yaml formatting, \n#   do NOT leave any empty lines or comments in multi-line config values.\n# This would be of immense help when comparing the final k8s out directory \u0026 \n#   would prevent bugs due to lack of readability in k8s-out for ConfigMap.\napiVersion: v1\ndata:\n  mesh: |-\n    disablePolicyChecks: false\n    enableTracing: true\n    accessLogFile: \"/dev/stdout\"\n    accessLogFormat: \"\"\n    accessLogEncoding: 'TEXT'\n    ingressService: istio-ingressgateway\n    dnsRefreshRate: 5s\n    sdsUdsPath:\n    enableSdsTokenMount: false\n    sdsUseK8sSaJwt: false\n    trustDomain:\n    outboundTrafficPolicy:\n      mode: ALLOW_ANY\n    rootNamespace: mesh-control-plane\n    proxyListenPort: 15006\n    defaultConfig:\n      connectTimeout: 10s\n      configPath: \"/etc/istio/proxy\"\n      binaryPath: \"/usr/local/bin/envoy\"\n      serviceCluster: istio-proxy\n      drainDuration: 45s\n      parentShutdownDuration: 1m0s\n      interceptionMode: REDIRECT\n      proxyAdminPort: 15000\n      concurrency: 2\n      tracing:\n        zipkin:\n          address: zipkin.service-mesh:9411\n      controlPlaneAuthPolicy: NONE\n      discoveryAddress: istio-pilot.mesh-control-plane:15010\n  meshNetworks: |-\n    networks: {}\nkind: ConfigMap\nmetadata:\n  name: istio\n  namespace: mesh-control-plane",
            "/serviceaccount.yaml": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    manifestctl.sam.data.sfdc.net/swagger: disable\n  name: istio-multi",
            "/sidecar-injector-configmap.yaml": "apiVersion: v1\ndata:\n  config: |-\n    policy: disabled\n    alwaysInjectSelector:\n    neverInjectSelector:\n    template: |-\n      rewriteAppHTTPProbe: {{ valueOrDefault .Values.sidecarInjectorWebhook.rewriteAppHTTPProbe false }}\n      {{- if or (not .Values.istio_cni.enabled) .Values.global.proxy.enableCoreDump }}\n      initContainers:\n      {{ if ne (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode) `NONE` }}\n      {{- if not .Values.istio_cni.enabled }}\n      - name: istio-init\n      {{- if contains \"/\" .Values.global.proxy_init.image }}\n        image: \"{{ .Values.global.proxy_init.image }}\"\n      {{- else }}\n        image: \"{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}\"\n      {{- end }}\n        args:\n        - \"-p\"\n        - \"15006\"\n        - \"-u\"\n        - 7447\n        - \"-m\"\n        - \"{{ annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode }}\"\n        - \"-i\"\n        - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges` .Values.global.proxy.includeIPRanges }}\"\n        - \"-x\"\n        - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges` .Values.global.proxy.excludeIPRanges }}\"\n        - \"-b\"\n        - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` (includeInboundPorts .Spec.Containers) }}\"\n        - \"-d\"\n        - \"{{ excludeInboundPort (annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort) (annotation .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts` .Values.global.proxy.excludeInboundPorts) }}\"\n        {{ if or (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/excludeOutboundPorts`) (ne .Values.global.proxy.excludeOutboundPorts \"\") -}}\n        - \"-o\"\n        - \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundPorts` .Values.global.proxy.excludeOutboundPorts }}\"\n        {{ end -}}\n        {{ if (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`) -}}\n        - \"-k\"\n        - \"{{ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces` }}\"\n        {{ end -}}\n        imagePullPolicy: \"{{ .Values.global.imagePullPolicy }}\"\n        resources:\n          requests:\n            cpu: 10m\n            memory: 10Mi\n          limits:\n            cpu: 100m\n            memory: 50Mi\n        securityContext:\n          runAsUser: 0\n          runAsNonRoot: false\n          capabilities:\n            add:\n            - NET_ADMIN\n          {{- if .Values.global.proxy.privileged }}\n          privileged: true\n          {{- end }}\n        restartPolicy: Always\n        env:\n        {{- if contains \"*\" (annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` \"\") }}\n        - name: INBOUND_CAPTURE_PORT\n          value: 15006\n        {{- end }}\n      {{- end }}\n      {{  end -}}\n      {{- if eq .Values.global.proxy.enableCoreDump true }}\n      - name: enable-core-dump\n        args:\n        - -c\n        - sysctl -w kernel.core_pattern=/var/lib/istio/core.proxy \u0026\u0026 ulimit -c unlimited\n        command:\n          - /bin/sh\n      {{- if contains \"/\" .Values.global.proxy_init.image }}\n        image: \"{{ .Values.global.proxy_init.image }}\"\n      {{- else }}\n        image: \"{{ .Values.global.hub }}/{{ .Values.global.proxy_init.image }}:{{ .Values.global.tag }}\"\n      {{- end }}\n        imagePullPolicy: IfNotPresent\n        resources: {}\n        securityContext:\n          runAsUser: 0\n          runAsNonRoot: false\n          privileged: true\n      {{ end }}\n      {{- end }}\n      containers:\n      - name: istio-proxy\n      {{- if contains \"/\" (annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image) }}\n        image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.proxy.image }}\"\n      {{- else }}\n        image: \"{{ annotation .ObjectMeta `sidecar.istio.io/proxyImage` .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}\"\n      {{- end }}\n        ports:\n        - containerPort: 15090\n          protocol: TCP\n          name: http-envoy-prom\n        args:\n        - proxy\n        - sidecar\n        - --domain\n        - $(POD_NAMESPACE).svc.{{ .Values.global.proxy.clusterDomain }}\n        - --configPath\n        - \"{{ .ProxyConfig.ConfigPath }}\"\n        - --binaryPath\n        - \"{{ .ProxyConfig.BinaryPath }}\"\n        - --serviceCluster\n        {{ if ne \"\" (index .ObjectMeta.Labels \"app\") -}}\n        - \"{{ index .ObjectMeta.Labels `app` }}.$(POD_NAMESPACE)\"\n        {{ else -}}\n        - \"{{ valueOrDefault .DeploymentMeta.Name `istio-proxy` }}.{{ valueOrDefault .DeploymentMeta.Namespace `default` }}\"\n        {{ end -}}\n        - --drainDuration\n        - \"{{ formatDuration .ProxyConfig.DrainDuration }}\"\n        - --parentShutdownDuration\n        - \"{{ formatDuration .ProxyConfig.ParentShutdownDuration }}\"\n        - --discoveryAddress\n        - \"{{ annotation .ObjectMeta `sidecar.istio.io/discoveryAddress` .ProxyConfig.DiscoveryAddress }}\"\n      {{- if eq .Values.global.proxy.tracer \"lightstep\" }}\n        - --lightstepAddress\n        - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAddress }}\"\n        - --lightstepAccessToken\n        - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetAccessToken }}\"\n        - --lightstepSecure={{ .ProxyConfig.GetTracing.GetLightstep.GetSecure }}\n        - --lightstepCacertPath\n        - \"{{ .ProxyConfig.GetTracing.GetLightstep.GetCacertPath }}\"\n      {{- else if eq .Values.global.proxy.tracer \"zipkin\" }}\n        - --zipkinAddress\n        - \"{{ .ProxyConfig.GetTracing.GetZipkin.GetAddress }}\"\n      {{- else if eq .Values.global.proxy.tracer \"datadog\" }}\n        - --datadogAgentAddress\n        - \"{{ .ProxyConfig.GetTracing.GetDatadog.GetAddress }}\"\n      {{- end }}\n      {{- if .Values.global.proxy.logLevel }}\n        - --proxyLogLevel={{ .Values.global.proxy.logLevel }}\n      {{- end}}\n      {{- if .Values.global.proxy.componentLogLevel }}\n        - --proxyComponentLogLevel={{ .Values.global.proxy.componentLogLevel }}\n      {{- end}}\n        - --dnsRefreshRate\n        - {{ .Values.global.proxy.dnsRefreshRate }}\n        - --connectTimeout\n        - \"{{ formatDuration .ProxyConfig.ConnectTimeout }}\"\n      {{- if .Values.global.proxy.envoyStatsd.enabled }}\n        - --statsdUdpAddress\n        - \"{{ .ProxyConfig.StatsdUdpAddress }}\"\n      {{- end }}\n      {{- if .Values.global.proxy.envoyMetricsService.enabled }}\n        - --envoyMetricsServiceAddress\n        - \"{{ .ProxyConfig.EnvoyMetricsServiceAddress }}\"\n      {{- end }}\n        - --proxyAdminPort\n        - \"{{ .ProxyConfig.ProxyAdminPort }}\"\n        {{ if gt .ProxyConfig.Concurrency 0 -}}\n        - --concurrency\n        - \"{{ .ProxyConfig.Concurrency }}\"\n        {{ end -}}\n        - --controlPlaneAuthPolicy\n        - \"{{ annotation .ObjectMeta `sidecar.istio.io/controlPlaneAuthPolicy` .ProxyConfig.ControlPlaneAuthPolicy }}\"\n      {{- if (ne (annotation .ObjectMeta \"status.sidecar.istio.io/port\" .Values.global.proxy.statusPort) \"0\") }}\n        - --statusPort\n        - \"{{ annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort }}\"\n        - --applicationPorts\n        - \"{{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/applicationPorts` (applicationPorts .Spec.Containers) }}\"\n      {{- end }}\n      {{- if .Values.global.trustDomain }}\n        - --trust-domain={{ .Values.global.trustDomain }}\n      {{- end }}\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: INSTANCE_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n      {{ if eq .Values.global.proxy.tracer \"datadog\" }}\n        - name: HOST_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.hostIP\n      {{ end }}\n        - name: ISTIO_META_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: ISTIO_META_CONFIG_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: ISTIO_META_INTERCEPTION_MODE\n          value: \"{{ or (index .ObjectMeta.Annotations `sidecar.istio.io/interceptionMode`) .ProxyConfig.InterceptionMode.String }}\"\n        - name: ISTIO_META_INCLUDE_INBOUND_PORTS\n          value: \"{{ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` (applicationPorts .Spec.Containers) }}\"\n        {{- if .Values.global.network }}\n        - name: ISTIO_META_NETWORK\n          value: \"{{ .Values.global.network }}\"\n        {{- end }}\n        {{ if .ObjectMeta.Annotations }}\n        - name: ISTIO_METAJSON_ANNOTATIONS\n          value: |\n                 {{ toJSON .ObjectMeta.Annotations }}\n        {{ end }}\n        {{ if .ObjectMeta.Labels }}\n        - name: ISTIO_METAJSON_LABELS\n          value: |\n                 {{ toJSON .ObjectMeta.Labels }}\n        {{ end }}\n        {{- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) }}\n        - name: ISTIO_BOOTSTRAP_OVERRIDE\n          value: \"/etc/istio/custom-bootstrap/custom_bootstrap.json\"\n        {{- end }}\n        {{- if .Values.global.sds.customTokenDirectory }}\n        - name: ISTIO_META_SDS_TOKEN_PATH\n          value: \"{{ .Values.global.sds.customTokenDirectory -}}/sdstoken\"\n        {{- end }}\n        ###\n        # Start metadata fields used by switchboard for building metric tags.\n        ###\n        - name: ISTIO_META_hostname\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: ISTIO_META_namespace\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        ###\n        # End metadata fields used by switchboard for building metric tags.\n        ###\n        ###\n        # Start metadata fields for configuring sidecar metrics.\n        ###\n        # We currently want to include all envoy metrics, so the inclusion list includes all known prefixes.\n        - name: ISTIO_METAJSON_METRICS_INCLUSIONS\n          value: \"{\\\"sidecar.istio.io/statsInclusionPrefixes\\\": \\\"access_log_file,cluster,cluster_manager,control_plane,http,http2,http_mixer_filter,listener,listener_manager,redis,runtime,server,stats,tcp,tcp_mixer_filter,tracing\\\"}\"\n        ###\n        # End metadata fields for configuring sidecar metrics.\n        ###\n        imagePullPolicy: {{ .Values.global.imagePullPolicy }}\n        {{ if ne (annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort) `0` }}\n        readinessProbe:\n          httpGet:\n            path: /healthz/ready\n            port: {{ annotation .ObjectMeta `status.sidecar.istio.io/port` .Values.global.proxy.statusPort }}\n          initialDelaySeconds: {{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/initialDelaySeconds` .Values.global.proxy.readinessInitialDelaySeconds }}\n          periodSeconds: {{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/periodSeconds` .Values.global.proxy.readinessPeriodSeconds }}\n          failureThreshold: {{ annotation .ObjectMeta `readiness.status.sidecar.istio.io/failureThreshold` .Values.global.proxy.readinessFailureThreshold }}\n        {{ end -}}\n        securityContext:\n          {{- if .Values.global.proxy.privileged }}\n          privileged: true\n          {{- end }}\n          {{- if ne .Values.global.proxy.enableCoreDump true }}\n          readOnlyRootFilesystem: true\n          {{- end }}\n          {{ if eq (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode) `TPROXY` -}}\n          capabilities:\n            add:\n            - NET_ADMIN\n          runAsGroup: 7447\n          {{ else -}}\n          {{ if and .Values.global.sds.enabled .Values.global.sds.useTrustworthyJwt }}\n          runAsGroup: 7447\n          {{- end }}\n          runAsUser: 7447\n          {{- end }}\n        resources:\n          {{ if or (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -}}\n          requests:\n            {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) -}}\n            cpu: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU` }}\"\n            {{ end}}\n            {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -}}\n            memory: \"{{ index .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory` }}\"\n            {{ end }}\n        {{ else -}}\n      {{- if .Values.global.proxy.resources }}\n          {{ toYaml .Values.global.proxy.resources | indent 4 }}\n      {{- end }}\n        {{  end -}}\n        volumeMounts:\n        {{ if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) }}\n        - mountPath: /etc/istio/custom-bootstrap\n          name: custom-bootstrap-volume\n        {{- end }}\n        - mountPath: /etc/istio/proxy\n          name: istio-envoy\n        {{- if .Values.global.sds.enabled }}\n        - mountPath: /var/run/sds/uds_path\n          name: sds-uds-path\n          readOnly: true\n        {{- if .Values.global.sds.useTrustworthyJwt }}\n        - mountPath: /var/run/secrets/tokens\n          name: istio-token\n        {{- end }}\n        {{- if .Values.global.sds.customTokenDirectory }}\n        - mountPath: \"{{ .Values.global.sds.customTokenDirectory -}}\"\n          name: custom-sds-token\n          readOnly: true\n        {{- end }}\n        {{- else }}\n        - mountPath: /etc/certs/root-cert.pem # Maddog certs mapped to istio certs default locations.\n          name: tls-server-cert               # Volume should be defined in Manifest file.\n          subPath: ca.pem\n        - mountPath: /etc/certs/cert-chain.pem\n          name: tls-server-cert\n          subPath: server/certificates/server.pem\n        - mountPath: /etc/certs/key.pem\n          name: tls-server-cert\n          subPath: server/keys/server-key.pem\n        - mountPath: /etc/certs/client.pem\n          name: tls-client-cert\n          subPath: client/certificates/client.pem\n        - mountPath: /etc/certs/client-key.pem\n          name: tls-client-cert\n          subPath: client/keys/client-key.pem\n        {{- end }}\n        {{- if and (eq .Values.global.proxy.tracer \"lightstep\") .Values.global.tracer.lightstep.cacertPath }}\n        - mountPath: {{ directory .ProxyConfig.GetTracing.GetLightstep.GetCacertPath }}\n          name: lightstep-certs\n          readOnly: true\n        {{- end }}\n          {{- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount` }}\n          {{ range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount`) }}\n        - name: \"{{  $index }}\"\n          {{ toYaml $value | indent 4 }}\n          {{ end }}\n          {{- end }}\n      volumes:\n      {{- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) }}\n      - name: custom-bootstrap-volume\n        configMap:\n          name: {{ annotation .ObjectMeta `sidecar.istio.io/bootstrapOverride` \"\" }}\n      {{- end }}\n      - emptyDir:\n          medium: Memory\n        name: istio-envoy\n      {{- if .Values.global.sds.enabled }}\n      - name: sds-uds-path\n        hostPath:\n          path: /var/run/sds/uds_path\n          type: Socket\n      {{- if .Values.global.sds.customTokenDirectory }}\n      - name: custom-sds-token\n        secret:\n          secretName: sdstokensecret\n      {{- end }}\n      {{- if .Values.global.sds.useTrustworthyJwt }}\n      - name: istio-token\n        projected:\n          sources:\n          - serviceAccountToken:\n              path: istio-token\n              expirationSeconds: 43200\n              audience: {{ .Values.global.trustDomain }}\n      {{- end }}\n      {{- else }}\n        {{- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolume` }}\n        {{range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolume`) }}\n      - name: \"{{ $index }}\"\n        {{ toYaml $value | indent 2 }}\n        {{ end }}\n        {{ end }}\n      {{- end }}\n      {{- if and (eq .Values.global.proxy.tracer \"lightstep\") .Values.global.tracer.lightstep.cacertPath }}\n      - name: lightstep-certs\n        secret:\n          optional: true\n          secretName: lightstep.cacert\n      {{- end }}\n      {{- if .Values.global.podDNSSearchNamespaces }}\n      dnsConfig:\n        searches:\n          {{- range .Values.global.podDNSSearchNamespaces }}\n          - {{ render . }}\n          {{- end }}\n      {{- end }}\nkind: ConfigMap\nmetadata:\n  name: istio-sidecar-injector\n  namespace: mesh-control-plane"
          }
        }
      }
    },
    "upstream": "https://github.com/istio/istio/tree/7abc166577853239b05e50c68b02b4830e2417a8/install/kubernetes/helm/istio",
    "metadata": {
      "applicationType": "helm",
      "sequence": 0,
      "icon": "https://istio.io/favicons/android-192x192.png",
      "name": "istio",
      "releaseNotes": "Update default tag in Helm charts for 1.2 (#14813)",
      "version": "1.1.0",
      "license": {
        "id": "",
        "assignee": "",
        "createdAt": "0001-01-01T00:00:00Z",
        "expiresAt": "0001-01-01T00:00:00Z",
        "type": ""
      }
    },
    "upstreamContents": {
      "upstreamFiles": [
        {
          "filePath": ".helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogaXN0aW8KdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjItMCIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIGFsbCBpc3RpbyBjb21wb25lbnRzCmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHNlY3VyaXR5CiAgLSBzaWRlY2FySW5qZWN0b3JXZWJob29rCiAgLSBtaXhlcgogIC0gcGlsb3QKICAtIGdhbGxleQpzb3VyY2VzOgogIC0gaHR0cDovL2dpdGh1Yi5jb20vaXN0aW8vaXN0aW8KZW5naW5lOiBnb3RwbAppY29uOiBodHRwczovL2lzdGlvLmlvL2Zhdmljb25zL2FuZHJvaWQtMTkyeDE5Mi5wbmcK"
        },
        {
          "filePath": "LICENSE",
          "fileContents": ""
        },
        {
          "filePath": "README.md",
          "fileContents": "IyBJc3RpbwoKW0lzdGlvXShodHRwczovL2lzdGlvLmlvLykgaXMgYW4gb3BlbiBwbGF0Zm9ybSBmb3IgcHJvdmlkaW5nIGEgdW5pZm9ybSB3YXkgdG8gaW50ZWdyYXRlIG1pY3Jvc2VydmljZXMsIG1hbmFnZSB0cmFmZmljIGZsb3cgYWNyb3NzIG1pY3Jvc2VydmljZXMsIGVuZm9yY2UgcG9saWNpZXMgYW5kIGFnZ3JlZ2F0ZSB0ZWxlbWV0cnkgZGF0YS4KCgoKVGhlIGRvY3VtZW50YXRpb24gaGVyZSBpcyBmb3IgZGV2ZWxvcGVycyBvbmx5LCBwbGVhc2UgZm9sbG93IHRoZSBpbnN0YWxsYXRpb24gaW5zdHJ1Y3Rpb25zIGZyb20gW2lzdGlvLmlvXShodHRwczovL2lzdGlvLmlvL2RvY3Mvc2V0dXAva3ViZXJuZXRlcy9pbnN0YWxsL2hlbG0vKSBmb3IgYWxsIG90aGVyIHVzZXMuCgojIyBJbnRyb2R1Y3Rpb24KClRoaXMgY2hhcnQgYm9vdHN0cmFwcyBhbGwgSXN0aW8gW2NvbXBvbmVudHNdKGh0dHBzOi8vaXN0aW8uaW8vZG9jcy9jb25jZXB0cy93aGF0LWlzLWlzdGlvL292ZXJ2aWV3Lmh0bWwpIGRlcGxveW1lbnQgb24gYSBbS3ViZXJuZXRlc10oaHR0cDovL2t1YmVybmV0ZXMuaW8pIGNsdXN0ZXIgdXNpbmcgdGhlIFtIZWxtXShodHRwczovL2hlbG0uc2gpIHBhY2thZ2UgbWFuYWdlci4KCiMjIENoYXJ0IERldGFpbHMKClRoaXMgY2hhcnQgY2FuIGluc3RhbGwgbXVsdGlwbGUgSXN0aW8gY29tcG9uZW50cyBhcyBzdWJjaGFydHM6Ci0gaW5ncmVzc2dhdGV3YXkKLSBlZ3Jlc3NnYXRld2F5Ci0gc2lkZWNhckluamVjdG9yV2ViaG9vawotIGdhbGxleQotIG1peGVyCi0gcGlsb3QKLSBzZWN1cml0eShjaXRhZGVsKQotIGdyYWZhbmEKLSBwcm9tZXRoZXVzCi0gdHJhY2luZyhqYWVnZXIpCi0ga2lhbGkKClRvIGVuYWJsZSBvciBkaXNhYmxlIGVhY2ggY29tcG9uZW50LCBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgYGVuYWJsZWRgIGZsYWcuCgojIyBQcmVyZXF1aXNpdGVzCgotIEt1YmVybmV0ZXMgMS45IG9yIG5ld2VyIGNsdXN0ZXIgd2l0aCBSQkFDIChSb2xlLUJhc2VkIEFjY2VzcyBDb250cm9sKSBlbmFibGVkIGlzIHJlcXVpcmVkCi0gSGVsbSAyLjcuMiBvciBuZXdlciBvciBhbHRlcm5hdGVseSB0aGUgYWJpbGl0eSB0byBtb2RpZnkgUkJBQyBydWxlcyBpcyBhbHNvIHJlcXVpcmVkCi0gSWYgeW91IHdhbnQgdG8gZW5hYmxlIGF1dG9tYXRpYyBzaWRlY2FyIGluamVjdGlvbiwgS3ViZXJuZXRlcyAxLjkrIHdpdGggYGFkbWlzc2lvbnJlZ2lzdHJhdGlvbmAgQVBJIGlzIHJlcXVpcmVkLCBhbmQgYGt1YmUtYXBpc2VydmVyYCBwcm9jZXNzIG11c3QgaGF2ZSB0aGUgYGFkbWlzc2lvbi1jb250cm9sYCBmbGFnIHNldCB3aXRoIHRoZSBgTXV0YXRpbmdBZG1pc3Npb25XZWJob29rYCBhbmQgYFZhbGlkYXRpbmdBZG1pc3Npb25XZWJob29rYCBhZG1pc3Npb24gY29udHJvbGxlcnMgYWRkZWQgYW5kIGxpc3RlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4KLSBUaGUgYGlzdGlvLWluaXRgIGNoYXJ0IG11c3QgYmUgcnVuIHRvIGNvbXBsZXRpb24gcHJpb3IgdG8gaW5zdGFsbCB0aGUgYGlzdGlvYCBjaGFydC4KCiMjIFJlc291cmNlcyBSZXF1aXJlZAoKVGhlIGNoYXJ0IGRlcGxveXMgcG9kcyB0aGF0IGNvbnN1bWUgbWluaW11bSByZXNvdXJjZXMgYXMgc3BlY2lmaWVkIGluIHRoZSByZXNvdXJjZXMgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuCgojIyBJbnN0YWxsaW5nIHRoZSBDaGFydAoKMS4gSWYgYSBzZXJ2aWNlIGFjY291bnQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gaW5zdGFsbGVkIGZvciBUaWxsZXIsIGluc3RhbGwgb25lOgogICAgYGBgCiAgICAkIGt1YmVjdGwgYXBwbHkgLWYgaW5zdGFsbC9rdWJlcm5ldGVzL2hlbG0vaGVsbS1zZXJ2aWNlLWFjY291bnQueWFtbAogICAgYGBgCgoxLiBJbnN0YWxsIFRpbGxlciBvbiB5b3VyIGNsdXN0ZXIgd2l0aCB0aGUgc2VydmljZSBhY2NvdW50OgogICAgYGBgCiAgICAkIGhlbG0gaW5pdCAtLXNlcnZpY2UtYWNjb3VudCB0aWxsZXIKICAgIGBgYAoKMS4gU2V0IGFuZCBjcmVhdGUgdGhlIG5hbWVzcGFjZSB3aGVyZSBJc3RpbyB3YXMgaW5zdGFsbGVkOgogICAgYGBgCiAgICAkIE5BTUVTUEFDRT1pc3Rpby1zeXN0ZW0KICAgICQga3ViZWN0bCBjcmVhdGUgbnMgJE5BTUVTUEFDRQogICAgYGBgCgoxLiBJZiB5b3UgYXJlIGVuYWJsaW5nIGBraWFsaWAsIHlvdSBuZWVkIHRvIGNyZWF0ZSB0aGUgc2VjcmV0IHRoYXQgY29udGFpbnMgdGhlIHVzZXJuYW1lIGFuZCBwYXNzcGhyYXNlIGZvciBga2lhbGlgIGRhc2hib2FyZDoKICAgIGBgYAogICAgJCBlY2hvIC1uICdhZG1pbicgfCBiYXNlNjQKICAgIFlXUnRhVzQ9CiAgICAkIGVjaG8gLW4gJzFmMmQxZTJlNjdkZicgfCBiYXNlNjQKICAgIE1XWXlaREZsTW1VMk4yUm0KICAgICQgY2F0IDw8RU9GIHwga3ViZWN0bCBhcHBseSAtZiAtCiAgICBhcGlWZXJzaW9uOiB2MQogICAga2luZDogU2VjcmV0CiAgICBtZXRhZGF0YToKICAgICAgbmFtZToga2lhbGkKICAgICAgbmFtZXNwYWNlOiAkTkFNRVNQQUNFCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGtpYWxpCiAgICB0eXBlOiBPcGFxdWUKICAgIGRhdGE6CiAgICAgIHVzZXJuYW1lOiBZV1J0YVc0PQogICAgICBwYXNzcGhyYXNlOiBNV1l5WkRGbE1tVTJOMlJtCiAgICBFT0YKICAgIGBgYAoKMS4gSWYgeW91IGFyZSB1c2luZyBzZWN1cml0eSBtb2RlIGZvciBHcmFmYW5hLCBjcmVhdGUgdGhlIHNlY3JldCBmaXJzdCBhcyBmb2xsb3dzOgoKICAgIC0gRW5jb2RlIHVzZXJuYW1lLCB5b3UgY2FuIGNoYW5nZSB0aGUgdXNlcm5hbWUgdG8gdGhlIG5hbWUgYXMgeW91IHdhbnQ6CiAgICBgYGAKICAgICQgZWNobyAtbiAnYWRtaW4nIHwgYmFzZTY0CiAgICBZV1J0YVc0PQogICAgYGBgCgogICAgLSBFbmNvZGUgcGFzc3BocmFzZSwgeW91IGNhbiBjaGFuZ2UgdGhlIHBhc3NwaHJhc2UgdG8gdGhlIHBhc3NwaHJhc2UgYXMgeW91IHdhbnQ6CiAgICBgYGAKICAgICQgZWNobyAtbiAnMWYyZDFlMmU2N2RmJyB8IGJhc2U2NAogICAgTVdZeVpERmxNbVUyTjJSbQogICAgYGBgCgogICAgLSBDcmVhdGUgc2VjcmV0IGZvciBHcmFmYW5hOgogICAgYGBgCiAgICAkIGNhdCA8PEVPRiB8IGt1YmVjdGwgYXBwbHkgLWYgLQogICAgYXBpVmVyc2lvbjogdjEKICAgIGtpbmQ6IFNlY3JldAogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6IGdyYWZhbmEKICAgICAgbmFtZXNwYWNlOiAkTkFNRVNQQUNFCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGdyYWZhbmEKICAgIHR5cGU6IE9wYXF1ZQogICAgZGF0YToKICAgICAgdXNlcm5hbWU6IFlXUnRhVzQ9CiAgICAgIHBhc3NwaHJhc2U6IE1XWXlaREZsTW1VMk4yUm0KICAgIEVPRgogICAgYGBgCgoxLiBUbyBpbnN0YWxsIHRoZSBjaGFydCB3aXRoIHRoZSByZWxlYXNlIG5hbWUgYGlzdGlvYCBpbiBuYW1lc3BhY2UgJE5BTUVTUEFDRSB5b3UgZGVmaW5lZCBhYm92ZToKCiAgICAtIFdpdGggW2F1dG9tYXRpYyBzaWRlY2FyIGluamVjdGlvbl0oaHR0cHM6Ly9pc3Rpby5pby9kb2NzL3NldHVwL2t1YmVybmV0ZXMvc2lkZWNhci1pbmplY3Rpb24vI2F1dG9tYXRpYy1zaWRlY2FyLWluamVjdGlvbikgKHJlcXVpcmVzIEt1YmVybmV0ZXMgPj0xLjkuMCk6CiAgICBgYGAKICAgICQgaGVsbSBpbnN0YWxsIGlzdGlvIC0tbmFtZSBpc3RpbyAtLW5hbWVzcGFjZSAkTkFNRVNQQUNFCiAgICBgYGAKCiAgICAtIFdpdGhvdXQgdGhlIHNpZGVjYXIgaW5qZWN0aW9uIHdlYmhvb2s6CiAgICBgYGAKICAgICQgaGVsbSBpbnN0YWxsIGlzdGlvIC0tbmFtZSBpc3RpbyAtLW5hbWVzcGFjZSAkTkFNRVNQQUNFIC0tc2V0IHNpZGVjYXJJbmplY3RvcldlYmhvb2suZW5hYmxlZD1mYWxzZQogICAgYGBgCgojIyBDb25maWd1cmF0aW9uCgpUaGUgSGVsbSBjaGFydCBzaGlwcyB3aXRoIHJlYXNvbmFibGUgZGVmYXVsdHMuICBUaGVyZSBtYXkgYmUgY2lyY3Vtc3RhbmNlcyBpbiB3aGljaCBkZWZhdWx0cyByZXF1aXJlIG92ZXJyaWRlcy4KVG8gb3ZlcnJpZGUgSGVsbSB2YWx1ZXMsIHVzZSBgLS1zZXQga2V5PXZhbHVlYCBhcmd1bWVudCBkdXJpbmcgdGhlIGBoZWxtIGluc3RhbGxgIGNvbW1hbmQuICBNdWx0aXBsZSBgLS1zZXRgIG9wZXJhdGlvbnMgbWF5IGJlIHVzZWQgaW4gdGhlIHNhbWUgSGVsbSBvcGVyYXRpb24uCgpIZWxtIGNoYXJ0cyBleHBvc2UgY29uZmlndXJhdGlvbiBvcHRpb25zIHdoaWNoIGFyZSBjdXJyZW50bHkgaW4gYWxwaGEuICBUaGUgY3VycmVudGx5IGV4cG9zZWQgb3B0aW9ucyBjYW4gYmUgZm91bmQgW2hlcmVdKGh0dHBzOi8vaXN0aW8uaW8vZG9jcy9yZWZlcmVuY2UvY29uZmlnL2luc3RhbGxhdGlvbi1vcHRpb25zLykuCgojIyBVbmluc3RhbGxpbmcgdGhlIENoYXJ0CgpUbyB1bmluc3RhbGwvZGVsZXRlIHRoZSBgaXN0aW9gIHJlbGVhc2UgYnV0IGNvbnRpbnVlIHRvIHRyYWNrIHRoZSByZWxlYXNlOgogICAgYGBgCiAgICAkIGhlbG0gZGVsZXRlIGlzdGlvCiAgICBgYGAKClRvIHVuaW5zdGFsbC9kZWxldGUgdGhlIGBpc3Rpb2AgcmVsZWFzZSBjb21wbGV0ZWx5IGFuZCBtYWtlIGl0cyBuYW1lIGZyZWUgZm9yIGxhdGVyIHVzZToKICAgIGBgYAogICAgJCBoZWxtIGRlbGV0ZSBpc3RpbyAtLXB1cmdlCiAgICBgYGAK"
        },
        {
          "filePath": "charts/certmanager/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBjZXJ0bWFuYWdlcgp2ZXJzaW9uOiAxLjEuMAphcHBWZXJzaW9uOiAwLjYuMgp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIK"
        },
        {
          "filePath": "charts/certmanager/templates/NOTES.txt",
          "fileContents": "Y2VydG1hbmFnZXIgaGFzIGJlZW4gZGVwbG95ZWQgc3VjY2Vzc2Z1bGx5IQoKTW9yZSBpbmZvcm1hdGlvbiBvbiB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGlzc3VlcnMgYW5kIGhvdyB0byBjb25maWd1cmUgdGhlbQpjYW4gYmUgZm91bmQgaW4gb3VyIGRvY3VtZW50YXRpb246CgpodHRwczovL2NlcnQtbWFuYWdlci5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvcmVmZXJlbmNlL2lzc3VlcnMuaHRtbA=="
        },
        {
          "filePath": "charts/certmanager/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiY2VydG1hbmFnZXIubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAiY2VydG1hbmFnZXIuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJjZXJ0bWFuYWdlci5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/certmanager/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGNlcnRtYW5hZ2VyCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNlcnRtYW5hZ2VyLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogY2VydG1hbmFnZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBjZXJ0bWFuYWdlcgogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY2VydG1hbmFnZXIuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0gICAgICAgIAogICAgICAgIHt7LSBpZiAuVmFsdWVzLnBvZExhYmVscyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5wb2RMYWJlbHMgfCBpbmRlbnQgOCB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICB7ey0gaWYgLlZhbHVlcy5wb2RBbm5vdGF0aW9ucyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5wb2RBbm5vdGF0aW9ucyB8IGluZGVudCA4IH19CiAgICAgICAge3stIGVuZCB9fQogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBjZXJ0bWFuYWdlcgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNlcnRtYW5hZ2VyCiAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmh1YiB9fS9jZXJ0LW1hbmFnZXItY29udHJvbGxlcjp7eyAuVmFsdWVzLnRhZyB9fSIKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWNsdXN0ZXItcmVzb3VyY2UtbmFtZXNwYWNlPSQoUE9EX05BTUVTUEFDRSkKICAgICAgICAtIC0tbGVhZGVyLWVsZWN0aW9uLW5hbWVzcGFjZT0kKFBPRF9OQU1FU1BBQ0UpCiAgICAgIHt7LSBpZiAuVmFsdWVzLmV4dHJhQXJncyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5leHRyYUFyZ3MgfCBpbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogUE9EX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgIHJlc291cmNlczoKe3sgdG9ZYW1sIC5WYWx1ZXMucmVzb3VyY2VzIHwgaW5kZW50IDEwIH19CiAgICAgIAogICAgICB7ey0gaWYgLlZhbHVlcy5wb2REbnNQb2xpY3kgfX0KICAgICAgZG5zUG9saWN5OiB7eyAuVmFsdWVzLnBvZERuc1BvbGljeSB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnBvZERuc0NvbmZpZyB9fQogICAgICBkbnNDb25maWc6CiAgICAgIHt7IHRvWWFtbCAuVmFsdWVzLnBvZERuc0NvbmZpZyB8IGluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0Ke3stIGlmIC5WYWx1ZXMudG9sZXJhdGlvbnMgfX0KICAgICAgdG9sZXJhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnRvbGVyYXRpb25zIHwgaW5kZW50IDYgfX0Ke3stIGVuZCB9fQ=="
        },
        {
          "filePath": "charts/certmanager/templates/issuer.yaml",
          "fileContents": "LS0tCmFwaVZlcnNpb246IGNlcnRtYW5hZ2VyLms4cy5pby92MWFscGhhMQpraW5kOiBDbHVzdGVySXNzdWVyCm1ldGFkYXRhOgogIG5hbWU6IGxldHNlbmNyeXB0LXN0YWdpbmcKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogY2VydG1hbmFnZXIKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY2VydG1hbmFnZXIuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgYWNtZToKICAgIHNlcnZlcjogaHR0cHM6Ly9hY21lLXN0YWdpbmctdjAyLmFwaS5sZXRzZW5jcnlwdC5vcmcvZGlyZWN0b3J5CiAgICBlbWFpbDoge3sgLlZhbHVlcy5lbWFpbCB9fQogICAgIyBOYW1lIG9mIGEgc2VjcmV0IHVzZWQgdG8gc3RvcmUgdGhlIEFDTUUgYWNjb3VudCBwcml2YXRlIGtleQogICAgcHJpdmF0ZUtleVNlY3JldFJlZjoKICAgICAgbmFtZTogbGV0c2VuY3J5cHQtc3RhZ2luZwogICAgaHR0cDAxOiB7fQotLS0KYXBpVmVyc2lvbjogY2VydG1hbmFnZXIuazhzLmlvL3YxYWxwaGExCmtpbmQ6IENsdXN0ZXJJc3N1ZXIKbWV0YWRhdGE6CiAgbmFtZTogbGV0c2VuY3J5cHQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogY2VydG1hbmFnZXIKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY2VydG1hbmFnZXIuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgYWNtZToKICAgIHNlcnZlcjogaHR0cHM6Ly9hY21lLXYwMi5hcGkubGV0c2VuY3J5cHQub3JnL2RpcmVjdG9yeQogICAgZW1haWw6IHt7IC5WYWx1ZXMuZW1haWwgfX0KICAgIHByaXZhdGVLZXlTZWNyZXRSZWY6CiAgICAgIG5hbWU6IGxldHNlbmNyeXB0CiAgICBodHRwMDE6IHt9Cg=="
        },
        {
          "filePath": "charts/certmanager/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiBjZXJ0bWFuYWdlcgogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBjZXJ0bWFuYWdlcgogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJjZXJ0bWFuYWdlci5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIHZlcnNpb246IHt7IC5DaGFydC5WZXJzaW9uIH19CiAgICB7ey0gaWYgLlZhbHVlcy5wb2RMYWJlbHMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucG9kTGFiZWxzIHwgaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0Ke3sgaW5jbHVkZSAicG9kRGlzcnVwdGlvbkJ1ZGdldC5zcGVjIiAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UG9kRGlzcnVwdGlvbkJ1ZGdldCB9fQp7ey0gZW5kIH19CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBjZXJ0bWFuYWdlcgogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/certmanager/templates/rbac.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBjZXJ0bWFuYWdlcgogIGxhYmVsczoKICAgIGFwcDogY2VydG1hbmFnZXIKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiY2VydG1hbmFnZXIuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbImNlcnRtYW5hZ2VyLms4cy5pbyJdCiAgICByZXNvdXJjZXM6IFsiY2VydGlmaWNhdGVzIiwgImNlcnRpZmljYXRlcy9maW5hbGl6ZXJzIiwgImlzc3VlcnMiLCAiY2x1c3Rlcmlzc3VlcnMiLCAib3JkZXJzIiwgIm9yZGVycy9maW5hbGl6ZXJzIiwgImNoYWxsZW5nZXMiXQogICAgdmVyYnM6IFsiKiJdCiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJjb25maWdtYXBzIiwgInNlY3JldHMiLCAiZXZlbnRzIiwgInNlcnZpY2VzIiwgInBvZHMiXQogICAgdmVyYnM6IFsiKiJdCiAgLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyJdCiAgICByZXNvdXJjZXM6IFsiaW5ncmVzc2VzIl0KICAgIHZlcmJzOiBbIioiXQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogY2VydG1hbmFnZXIKICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNlcnRtYW5hZ2VyLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBjZXJ0bWFuYWdlcgpzdWJqZWN0czoKICAtIG5hbWU6IGNlcnRtYW5hZ2VyCiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAga2luZDogU2VydmljZUFjY291bnQK"
        },
        {
          "filePath": "charts/certmanager/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGNlcnRtYW5hZ2VyCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGNlcnRtYW5hZ2VyCiAgICBjaGFydDoge3sgdGVtcGxhdGUgImNlcnRtYW5hZ2VyLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/certmanager/values.yaml",
          "fileContents": "IyBDZXJ0bWFuYWdlciB1c2VzIEFDTUUgdG8gc2lnbiBjZXJ0aWZpY2F0ZXMuIFNpbmNlIElzdGlvIGdhdGV3YXlzIGFyZQojIG1vdW50aW5nIHRoZSBUTFMgc2VjcmV0cyB0aGUgQ2VydGlmaWNhdGUgQ1JEcyBtdXN0IGJlIGNyZWF0ZWQgaW4gdGhlCiMgaXN0aW8tc3lzdGVtIG5hbWVzcGFjZS4gT25jZSB0aGUgY2VydGlmaWNhdGUgaGFzIGJlZW4gY3JlYXRlZCwgdGhlCiMgZ2F0ZXdheSBtdXN0IGJlIHVwZGF0ZWQgYnkgYWRkaW5nICdzZWNyZXRWb2x1bWVzJy4gQWZ0ZXIgdGhlIGdhdGV3YXkKIyByZXN0YXJ0LCBEZXN0aW5hdGlvblJ1bGVzIGNhbiBiZSBjcmVhdGVkIHVzaW5nIHRoZSBBQ01FLXNpZ25lZCBjZXJ0aWZpY2F0ZXMuCmVuYWJsZWQ6IGZhbHNlCnJlcGxpY2FDb3VudDogMQpodWI6IHF1YXkuaW8vamV0c3RhY2sKdGFnOiB2MC42LjIKcmVzb3VyY2VzOiB7fQpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10K"
        },
        {
          "filePath": "charts/galley/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogZ2FsbGV5CnZlcnNpb246IDEuMS4wCmFwcFZlcnNpb246IDEuMS4wCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgpkZXNjcmlwdGlvbjogSGVsbSBjaGFydCBmb3IgZ2FsbGV5IGRlcGxveW1lbnQKa2V5d29yZHM6CiAgLSBpc3RpbwogIC0gZ2FsbGV5CnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/galley/OWNERS",
          "fileContents": "YXBwcm92ZXJzOgogIC0gY21sdWNpYW5vCiAgLSBnZWVrbm9pZAogIC0gb3pldnJlbgogIC0gYXlqCg=="
        },
        {
          "filePath": "charts/galley/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZ2FsbGV5Lm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KSWYgcmVsZWFzZSBuYW1lIGNvbnRhaW5zIGNoYXJ0IG5hbWUgaXQgd2lsbCBiZSB1c2VkIGFzIGEgZnVsbCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImdhbGxleS5mdWxsbmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgLX19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gLlJlbGVhc2UuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBjaGFydCBuYW1lIGFuZCB2ZXJzaW9uIGFzIHVzZWQgYnkgdGhlIGNoYXJ0IGxhYmVsLgoqL319Cnt7LSBkZWZpbmUgImdhbGxleS5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/galley/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1nYWxsZXkte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pbyJdCiAgcmVzb3VyY2VzOiBbInZhbGlkYXRpbmd3ZWJob29rY29uZmlndXJhdGlvbnMiXQogIHZlcmJzOiBbIioiXQotIGFwaUdyb3VwczogWyJjb25maWcuaXN0aW8uaW8iXSAjIGlzdGlvIG1peGVyIENSRCB3YXRjaGVyCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsibmV0d29ya2luZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiYXV0aGVudGljYXRpb24uaXN0aW8uaW8iXQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbInJiYWMuaXN0aW8uaW8iXQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbImV4dGVuc2lvbnMiLCJhcHBzIl0KICByZXNvdXJjZXM6IFsiZGVwbG95bWVudHMiXQogIHJlc291cmNlTmFtZXM6IFsiaXN0aW8tZ2FsbGV5Il0KICB2ZXJiczogWyJnZXQiXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJwb2RzIiwgIm5vZGVzIiwgInNlcnZpY2VzIiwgImVuZHBvaW50cyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyJleHRlbnNpb25zIl0KICByZXNvdXJjZXM6IFsiaW5ncmVzc2VzIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbImV4dGVuc2lvbnMiXQogIHJlc291cmNlczogWyJkZXBsb3ltZW50cy9maW5hbGl6ZXJzIl0KICByZXNvdXJjZU5hbWVzOiBbImlzdGlvLWdhbGxleSJdCiAgdmVyYnM6IFsidXBkYXRlIl0K"
        },
        {
          "filePath": "charts/galley/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ2FsbGV5LWFkbWluLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYWxsZXkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJnYWxsZXkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvLWdhbGxleS17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogaXN0aW8tZ2FsbGV5LXNlcnZpY2UtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/galley/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleS1jb25maWd1cmF0aW9uCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYWxsZXkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJnYWxsZXkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBpc3RpbzogZ2FsbGV5CmRhdGE6CiAgdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uLnlhbWw6IHwtCiAgICB7ey0gaW5jbHVkZSAidmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uLnlhbWwudHBsIiAuIHwgaW5kZW50IDR9fQ=="
        },
        {
          "filePath": "charts/galley/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IGdhbGxleQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGlzdGlvOiBnYWxsZXkKICBzdHJhdGVneToKICAgIHJvbGxpbmdVcGRhdGU6CiAgICAgIG1heFN1cmdlOiAxCiAgICAgIG1heFVuYXZhaWxhYmxlOiAwCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDoge3sgdGVtcGxhdGUgImdhbGxleS5uYW1lIiAuIH19CiAgICAgICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJnYWxsZXkuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0gICAgICAKICAgICAgICBpc3RpbzogZ2FsbGV5CiAgICAgIGFubm90YXRpb25zOgogICAgICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvLWdhbGxleS1zZXJ2aWNlLWFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGdhbGxleQp7ey0gaWYgY29udGFpbnMgIi8iIC5WYWx1ZXMuaW1hZ2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZSB9fSIKe3stIGVsc2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19Igp7ey0gZW5kIH19CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDQ0MwogICAgICAgICAgLSBjb250YWluZXJQb3J0OiB7eyAuVmFsdWVzLmdsb2JhbC5tb25pdG9yaW5nUG9ydCB9fQogICAgICAgICAgLSBjb250YWluZXJQb3J0OiA5OTAxCiAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9nYWxsZXkKICAgICAgICAgIC0gc2VydmVyCiAgICAgICAgICAtIC0tbWVzaENvbmZpZ0ZpbGU9L2V0Yy9tZXNoLWNvbmZpZy9tZXNoCiAgICAgICAgICAtIC0tbGl2ZW5lc3NQcm9iZUludGVydmFsPTFzCiAgICAgICAgICAtIC0tbGl2ZW5lc3NQcm9iZVBhdGg9L2hlYWx0aGxpdmVuZXNzCiAgICAgICAgICAtIC0tcmVhZGluZXNzUHJvYmVQYXRoPS9oZWFsdGhyZWFkeQogICAgICAgICAgLSAtLXJlYWRpbmVzc1Byb2JlSW50ZXJ2YWw9MXMKICAgICAgICAgIC0gLS1kZXBsb3ltZW50LW5hbWVzcGFjZT17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Ke3stIGlmICQuVmFsdWVzLmdsb2JhbC5jb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWR9fQogICAgICAgICAgLSAtLWluc2VjdXJlPWZhbHNlCnt7LSBlbHNlIH19CiAgICAgICAgICAtIC0taW5zZWN1cmU9dHJ1ZQp7ey0gZW5kIH19Cnt7LSBpZiBub3QgJC5WYWx1ZXMuZ2xvYmFsLnVzZU1DUCB9fQogICAgICAgICAgLSAtLWVuYWJsZS1zZXJ2ZXI9ZmFsc2UKe3stIGVuZCB9fQogICAgICAgICAgLSAtLXZhbGlkYXRpb24td2ViaG9vay1jb25maWctZmlsZQogICAgICAgICAgLSAvZXRjL2NvbmZpZy92YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb24ueWFtbAogICAgICAgICAgLSAtLW1vbml0b3JpbmdQb3J0PXt7IC5WYWx1ZXMuZ2xvYmFsLm1vbml0b3JpbmdQb3J0IH19Cnt7LSBpZiAkLlZhbHVlcy5nbG9iYWwubG9nZ2luZy5sZXZlbCB9fQogICAgICAgICAgLSAtLWxvZ19vdXRwdXRfbGV2ZWw9e3sgJC5WYWx1ZXMuZ2xvYmFsLmxvZ2dpbmcubGV2ZWwgfX0Ke3stIGVuZH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jZXJ0cwogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2NvbmZpZwogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgLSBuYW1lOiBtZXNoLWNvbmZpZwogICAgICAgICAgICBtb3VudFBhdGg6IC9ldGMvbWVzaC1jb25maWcKICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAgIC0gL3Vzci9sb2NhbC9iaW4vZ2FsbGV5CiAgICAgICAgICAgICAgICAtIHByb2JlCiAgICAgICAgICAgICAgICAtIC0tcHJvYmUtcGF0aD0vaGVhbHRobGl2ZW5lc3MKICAgICAgICAgICAgICAgIC0gLS1pbnRlcnZhbD0xMHMKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiA1CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9nYWxsZXkKICAgICAgICAgICAgICAgIC0gcHJvYmUKICAgICAgICAgICAgICAgIC0gLS1wcm9iZS1wYXRoPS9oZWFsdGhyZWFkeQogICAgICAgICAgICAgICAgLSAtLWludGVydmFsPTEwcwogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA1CiAgICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDUKICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY2VydHMKICAgICAgICBzZWNyZXQ6CiAgICAgICAgICBzZWNyZXROYW1lOiBpc3Rpby5pc3Rpby1nYWxsZXktc2VydmljZS1hY2NvdW50CiAgICAgIC0gbmFtZTogY29uZmlnCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogaXN0aW8tZ2FsbGV5LWNvbmZpZ3VyYXRpb24KICAgICAgLSBuYW1lOiBtZXNoLWNvbmZpZwogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGlzdGlvCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cnt7LSBpZiAuVmFsdWVzLnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy50b2xlcmF0aW9ucyB8IGluZGVudCA2IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/galley/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1nYWxsZXkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdhbGxleS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhbGxleS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBnYWxsZXkKc3BlYzoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0Ke3sgaW5jbHVkZSAicG9kRGlzcnVwdGlvbkJ1ZGdldC5zcGVjIiAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UG9kRGlzcnVwdGlvbkJ1ZGdldCB9fQp7ey0gZW5kIH19CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5Lm5hbWUiIC4gfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICBpc3RpbzogZ2FsbGV5Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/galley/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1nYWxsZXkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdhbGxleS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhbGxleS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBnYWxsZXkKc3BlYzoKICBwb3J0czoKICAtIHBvcnQ6IDQ0MwogICAgbmFtZTogaHR0cHMtdmFsaWRhdGlvbgogIC0gcG9ydDoge3sgLlZhbHVlcy5nbG9iYWwubW9uaXRvcmluZ1BvcnQgfX0KICAgIG5hbWU6IGh0dHAtbW9uaXRvcmluZwogIC0gcG9ydDogOTkwMQogICAgbmFtZTogZ3JwYy1tY3AKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBnYWxsZXkK"
        },
        {
          "filePath": "charts/galley/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdhbGxleS1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdhbGxleS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhbGxleS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0K"
        },
        {
          "filePath": "charts/galley/templates/validatingwebhookconfiguration.yaml.tpl",
          "fileContents": "e3sgZGVmaW5lICJ2YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb24ueWFtbC50cGwiIH19CmFwaVZlcnNpb246IGFkbWlzc2lvbnJlZ2lzdHJhdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBWYWxpZGF0aW5nV2ViaG9va0NvbmZpZ3VyYXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ2FsbGV5CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2FsbGV5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IGdhbGxleQp3ZWJob29rczoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmNvbmZpZ1ZhbGlkYXRpb24gfX0KICAtIG5hbWU6IHBpbG90LnZhbGlkYXRpb24uaXN0aW8uaW8KICAgIGNsaWVudENvbmZpZzoKICAgICAgc2VydmljZToKICAgICAgICBuYW1lOiBpc3Rpby1nYWxsZXkKICAgICAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgICAgIHBhdGg6ICIvYWRtaXRwaWxvdCIKICAgICAgY2FCdW5kbGU6ICIiCiAgICBydWxlczoKICAgICAgLSBvcGVyYXRpb25zOgogICAgICAgIC0gQ1JFQVRFCiAgICAgICAgLSBVUERBVEUKICAgICAgICBhcGlHcm91cHM6CiAgICAgICAgLSBjb25maWcuaXN0aW8uaW8KICAgICAgICBhcGlWZXJzaW9uczoKICAgICAgICAtIHYxYWxwaGEyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgIC0gaHR0cGFwaXNwZWNzCiAgICAgICAgLSBodHRwYXBpc3BlY2JpbmRpbmdzCiAgICAgICAgLSBxdW90YXNwZWNzCiAgICAgICAgLSBxdW90YXNwZWNiaW5kaW5ncwogICAgICAtIG9wZXJhdGlvbnM6CiAgICAgICAgLSBDUkVBVEUKICAgICAgICAtIFVQREFURQogICAgICAgIGFwaUdyb3VwczoKICAgICAgICAtIHJiYWMuaXN0aW8uaW8KICAgICAgICBhcGlWZXJzaW9uczoKICAgICAgICAtICIqIgogICAgICAgIHJlc291cmNlczoKICAgICAgICAtICIqIgogICAgICAtIG9wZXJhdGlvbnM6CiAgICAgICAgLSBDUkVBVEUKICAgICAgICAtIFVQREFURQogICAgICAgIGFwaUdyb3VwczoKICAgICAgICAtIGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvCiAgICAgICAgYXBpVmVyc2lvbnM6CiAgICAgICAgLSAiKiIKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgLSAiKiIKICAgICAgLSBvcGVyYXRpb25zOgogICAgICAgIC0gQ1JFQVRFCiAgICAgICAgLSBVUERBVEUKICAgICAgICBhcGlHcm91cHM6CiAgICAgICAgLSBuZXR3b3JraW5nLmlzdGlvLmlvCiAgICAgICAgYXBpVmVyc2lvbnM6CiAgICAgICAgLSAiKiIKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgLSBkZXN0aW5hdGlvbnJ1bGVzCiAgICAgICAgLSBlbnZveWZpbHRlcnMKICAgICAgICAtIGdhdGV3YXlzCiAgICAgICAgLSBzZXJ2aWNlZW50cmllcwogICAgICAgIC0gc2lkZWNhcnMKICAgICAgICAtIHZpcnR1YWxzZXJ2aWNlcwogICAgZmFpbHVyZVBvbGljeTogRmFpbAogICAgc2lkZUVmZmVjdHM6IE5vbmUKICAtIG5hbWU6IG1peGVyLnZhbGlkYXRpb24uaXN0aW8uaW8KICAgIGNsaWVudENvbmZpZzoKICAgICAgc2VydmljZToKICAgICAgICBuYW1lOiBpc3Rpby1nYWxsZXkKICAgICAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgICAgIHBhdGg6ICIvYWRtaXRtaXhlciIKICAgICAgY2FCdW5kbGU6ICIiCiAgICBydWxlczoKICAgICAgLSBvcGVyYXRpb25zOgogICAgICAgIC0gQ1JFQVRFCiAgICAgICAgLSBVUERBVEUKICAgICAgICBhcGlHcm91cHM6CiAgICAgICAgLSBjb25maWcuaXN0aW8uaW8KICAgICAgICBhcGlWZXJzaW9uczoKICAgICAgICAtIHYxYWxwaGEyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgIC0gcnVsZXMKICAgICAgICAtIGF0dHJpYnV0ZW1hbmlmZXN0cwogICAgICAgIC0gY2lyY29udXNlcwogICAgICAgIC0gZGVuaWVycwogICAgICAgIC0gZmx1ZW50ZHMKICAgICAgICAtIGt1YmVybmV0ZXNlbnZzCiAgICAgICAgLSBsaXN0Y2hlY2tlcnMKICAgICAgICAtIG1lbXF1b3RhcwogICAgICAgIC0gbm9vcHMKICAgICAgICAtIG9wYXMKICAgICAgICAtIHByb21ldGhldXNlcwogICAgICAgIC0gcmJhY3MKICAgICAgICAtIHNvbGFyd2luZHNlcwogICAgICAgIC0gc3RhY2tkcml2ZXJzCiAgICAgICAgLSBjbG91ZHdhdGNoZXMKICAgICAgICAtIGRvZ3N0YXRzZHMKICAgICAgICAtIHN0YXRzZHMKICAgICAgICAtIHN0ZGlvcwogICAgICAgIC0gYXBpa2V5cwogICAgICAgIC0gYXV0aG9yaXphdGlvbnMKICAgICAgICAtIGNoZWNrbm90aGluZ3MKICAgICAgICAjIC0ga3ViZXJuZXRlc2VzCiAgICAgICAgLSBsaXN0ZW50cmllcwogICAgICAgIC0gbG9nZW50cmllcwogICAgICAgIC0gbWV0cmljcwogICAgICAgIC0gcXVvdGFzCiAgICAgICAgLSByZXBvcnRub3RoaW5ncwogICAgICAgIC0gdHJhY2VzcGFucwogICAgICAgIC0gYWRhcHRlcnMKICAgICAgICAtIGhhbmRsZXJzCiAgICAgICAgLSBpbnN0YW5jZXMKICAgICAgICAtIHRlbXBsYXRlcwogICAgICAgIC0gemlwa2lucwogICAgZmFpbHVyZVBvbGljeTogRmFpbAogICAgc2lkZUVmZmVjdHM6IE5vbmUKe3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/galley/values.yaml",
          "fileContents": "IwojIGdhbGxleSBjb25maWd1cmF0aW9uCiMKZW5hYmxlZDogdHJ1ZQpyZXBsaWNhQ291bnQ6IDEKaW1hZ2U6IGdhbGxleQpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10K"
        },
        {
          "filePath": "charts/gateways/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogZ2F0ZXdheXMKdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBkZXBsb3lpbmcgSXN0aW8gZ2F0ZXdheXMKa2V5d29yZHM6CiAgLSBpc3RpbwogIC0gaW5ncmVzc2dhdGV3YXkKICAtIGVncmVzc2dhdGV3YXkKICAtIGdhdGV3YXlzCnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/gateways/templates/_affinity.tpl",
          "fileContents": "e3svKiBhZmZpbml0eSAtIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vYXNzaWduLXBvZC1ub2RlLyAqL319Cgp7ey0gZGVmaW5lICJnYXRld2F5bm9kZWFmZmluaXR5IiB9fQogIG5vZGVBZmZpbml0eToKICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICB7ey0gaW5jbHVkZSAiZ2F0ZXdheU5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZyIgLiB9fQogICAgcHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICB7ey0gaW5jbHVkZSAiZ2F0ZXdheU5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAiZ2F0ZXdheU5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZyIgfX0KICAgICAgbm9kZVNlbGVjdG9yVGVybXM6CiAgICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAtIGtleTogYmV0YS5rdWJlcm5ldGVzLmlvL2FyY2gKICAgICAgICAgIG9wZXJhdG9yOiBJbgogICAgICAgICAgdmFsdWVzOgogICAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5yb290LlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAgICAgICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAgICAgICAtIHt7ICRrZXkgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stICRub2RlU2VsZWN0b3IgOj0gZGVmYXVsdCAucm9vdC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHROb2RlU2VsZWN0b3IgLm5vZGVTZWxlY3RvciAtfX0KICAgICAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAkbm9kZVNlbGVjdG9yIH19CiAgICAgICAgLSBrZXk6IHt7ICRrZXkgfX0KICAgICAgICAgIG9wZXJhdG9yOiBJbgogICAgICAgICAgdmFsdWVzOgogICAgICAgICAgLSB7eyAkdmFsIH19CiAgICAgICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cgp7ey0gZGVmaW5lICJnYXRld2F5Tm9kZUFmZmluaXR5UHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZyIgfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAucm9vdC5WYWx1ZXMuZ2xvYmFsLmFyY2ggfX0KICAgIHt7LSBpZiBndCAoJHZhbCB8IGludCkgMCB9fQogICAgLSB3ZWlnaHQ6IHt7ICR2YWwgfCBpbnQgfX0KICAgICAgcHJlZmVyZW5jZToKICAgICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgIC0ga2V5OiBiZXRhLmt1YmVybmV0ZXMuaW8vYXJjaAogICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAtIHt7ICRrZXkgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgImdhdGV3YXlwb2RBbnRpQWZmaW5pdHkiIH19Cnt7LSBpZiBvciAucG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciAucG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3J9fQogIHBvZEFudGlBZmZpbml0eToKICAgIHt7LSBpZiAucG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciB9fQogICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJnYXRld2F5cG9kQW50aUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiAuIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLnBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yIH19CiAgICBwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJnYXRld2F5cG9kQW50aUFmZmluaXR5UHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZyIgLiB9fQogICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgImdhdGV3YXlwb2RBbnRpQWZmaW5pdHlSZXF1aXJlZER1cmluZ1NjaGVkdWxpbmciIH19CiAgICB7ey0gcmFuZ2UgJGluZGV4LCAkaXRlbSA6PSAucG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciB9fQogICAgLSBsYWJlbFNlbGVjdG9yOgogICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgLSBrZXk6IHt7ICRpdGVtLmtleSB9fQogICAgICAgICAgb3BlcmF0b3I6IHt7ICRpdGVtLm9wZXJhdG9yIH19CiAgICAgICAgICB7ey0gaWYgJGl0ZW0udmFsdWVzIH19CiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICB7ey0gJHZhbHMgOj0gc3BsaXQgIiwiICRpdGVtLnZhbHVlcyB9fQogICAgICAgICAge3stIHJhbmdlICRpLCAkdiA6PSAkdmFscyB9fQogICAgICAgICAgLSB7eyAkdiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICB0b3BvbG9neUtleToge3sgJGl0ZW0udG9wb2xvZ3lLZXkgfX0KICAgIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAiZ2F0ZXdheXBvZEFudGlBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIH19CiAgICB7ey0gcmFuZ2UgJGluZGV4LCAkaXRlbSA6PSAucG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IgfX0KICAgIC0gcG9kQWZmaW5pdHlUZXJtOgogICAgICAgIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgICAgLSBrZXk6IHt7ICRpdGVtLmtleSB9fQogICAgICAgICAgICBvcGVyYXRvcjoge3sgJGl0ZW0ub3BlcmF0b3IgfX0KICAgICAgICAgICAge3stIGlmICRpdGVtLnZhbHVlcyB9fQogICAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAgIHt7LSAkdmFscyA6PSBzcGxpdCAiLCIgJGl0ZW0udmFsdWVzIH19CiAgICAgICAgICAgIHt7LSByYW5nZSAkaSwgJHYgOj0gJHZhbHMgfX0KICAgICAgICAgICAgLSB7eyAkdiB9fQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB0b3BvbG9neUtleToge3sgJGl0ZW0udG9wb2xvZ3lLZXkgfX0KICAgICAgd2VpZ2h0OiAxMDAKICAgIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/gateways/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZ2F0ZXdheS5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJnYXRld2F5LmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAiZ2F0ZXdheS5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/gateways/templates/autoscale.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG5lICRrZXkgImVuYWJsZWQiIH19Cnt7LSBpZiBhbmQgJHNwZWMuZW5hYmxlZCAkc3BlYy5hdXRvc2NhbGVFbmFibGVkICRzcGVjLmF1dG9zY2FsZU1pbiAkc3BlYy5hdXRvc2NhbGVNYXggfX0KYXBpVmVyc2lvbjogYXV0b3NjYWxpbmcvdjJiZXRhMQpraW5kOiBIb3Jpem9udGFsUG9kQXV0b3NjYWxlcgptZXRhZGF0YToKICBuYW1lOiB7eyAka2V5IH19CiAgbmFtZXNwYWNlOiB7eyAkc3BlYy5uYW1lc3BhY2UgfCBkZWZhdWx0ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhdGV3YXkuY2hhcnQiICQgfX0KICAgIGhlcml0YWdlOiB7eyAkLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLmxhYmVscyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQpzcGVjOgogIG1heFJlcGxpY2FzOiB7eyAkc3BlYy5hdXRvc2NhbGVNYXggfX0KICBtaW5SZXBsaWNhczoge3sgJHNwZWMuYXV0b3NjYWxlTWluIH19CiAgc2NhbGVUYXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiBhcHBzL3YxCiAgICBraW5kOiBEZXBsb3ltZW50CiAgICBuYW1lOiB7eyAka2V5IH19CiAgbWV0cmljczoKICAgIC0gdHlwZTogUmVzb3VyY2UKICAgICAgcmVzb3VyY2U6CiAgICAgICAgbmFtZTogY3B1CiAgICAgICAgdGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uOiB7eyAkc3BlYy5jcHUudGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uIH19Ci0tLQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/gateways/templates/deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/gateways/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIGFuZCAobmUgJGtleSAiZW5hYmxlZCIpIH19Cnt7LSBpZiAkc3BlYy5lbmFibGVkIH19Cnt7LSBpZiAkLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFBvZERpc3J1cHRpb25CdWRnZXQuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBwb2xpY3kvdjFiZXRhMQpraW5kOiBQb2REaXNydXB0aW9uQnVkZ2V0Cm1ldGFkYXRhOgogIG5hbWU6IHt7ICRrZXkgfX0KICBuYW1lc3BhY2U6IHt7ICRzcGVjLm5hbWVzcGFjZSB8IGRlZmF1bHQgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgJCB9fQogICAgaGVyaXRhZ2U6IHt7ICQuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CnNwZWM6Cnt7LSBpZiAkLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFBvZERpc3J1cHRpb25CdWRnZXQuZW5hYmxlZCB9fQp7eyBpbmNsdWRlICJwb2REaXNydXB0aW9uQnVkZ2V0LnNwZWMiICQuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UG9kRGlzcnVwdGlvbkJ1ZGdldCB9fQp7ey0gZW5kIH19CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWwgfX0KICAgICAge3stIGVuZCB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/gateways/templates/preconfigured.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLms4c0luZ3Jlc3MuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IEdhdGV3YXkKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tYXV0b2dlbmVyYXRlZC1rOHMtaW5ncmVzcwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhdGV3YXkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBpc3Rpbzoge3sgLlZhbHVlcy5nbG9iYWwuazhzSW5ncmVzcy5nYXRld2F5TmFtZSB9fQogIHNlcnZlcnM6CiAgLSBwb3J0OgogICAgICBudW1iZXI6IDgwCiAgICAgIHByb3RvY29sOiBIVFRQMgogICAgICBuYW1lOiBodHRwCiAgICBob3N0czoKICAgIC0gIioiCnt7IGlmIC5WYWx1ZXMuZ2xvYmFsLms4c0luZ3Jlc3MuZW5hYmxlSHR0cHMgfX0KICAtIHBvcnQ6CiAgICAgIG51bWJlcjogNDQzCiAgICAgIHByb3RvY29sOiBIVFRQUwogICAgICBuYW1lOiBodHRwcy1kZWZhdWx0CiAgICB0bHM6CiAgICAgIG1vZGU6IFNJTVBMRQogICAgICBzZXJ2ZXJDZXJ0aWZpY2F0ZTogL2V0Yy9pc3Rpby9pbmdyZXNzLWNlcnRzL3Rscy5jcnQKICAgICAgcHJpdmF0ZUtleTogL2V0Yy9pc3Rpby9pbmdyZXNzLWNlcnRzL3Rscy5rZXkKICAgIGhvc3RzOgogICAgLSAiKiIKe3sgZW5kIH19ICAgIAotLS0gICAgCnt7IGVuZCB9fQoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb24uZW5hYmxlZCB9fQp7ey0gaWYgLlZhbHVlcy5nbG9iYWwubWVzaEV4cGFuc2lvbi51c2VJTEIgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBHYXRld2F5Cm1ldGFkYXRhOgogIG5hbWU6IG1lc2hleHBhbnNpb24taWxiLWdhdGV3YXkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdhdGV3YXkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJnYXRld2F5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHNlbGVjdG9yOgogICAgaXN0aW86IGlsYmdhdGV3YXkKICBzZXJ2ZXJzOgogIC0gcG9ydDoKICAgICAgbnVtYmVyOiAxNTAxMQogICAgICBwcm90b2NvbDogVENQCiAgICAgIG5hbWU6IHRjcC1waWxvdAogICAgaG9zdHM6CiAgICAtICIqIgogIC0gcG9ydDoKICAgICAgbnVtYmVyOiA4MDYwCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgbmFtZTogdGNwLWNpdGFkZWwKICAgIGhvc3RzOgogICAgLSAiKiIKICAtIHBvcnQ6CiAgICAgIG51bWJlcjogMTUwMDQKICAgICAgbmFtZTogdGxzLW1peGVyCiAgICAgIHByb3RvY29sOiBUTFMKICAgIHRsczoKICAgICAgbW9kZTogQVVUT19QQVNTVEhST1VHSAogICAgaG9zdHM6CiAgICAtICIqIgotLS0Ke3stIGVsc2UgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBHYXRld2F5Cm1ldGFkYXRhOgogIG5hbWU6IG1lc2hleHBhbnNpb24tZ2F0ZXdheQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdhdGV3YXkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAge3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0KICB7ey0gaWYgZXEgJGtleSAiaXN0aW8taW5ncmVzc2dhdGV3YXkiIH19CiAge3stIGlmICRzcGVjLmVuYWJsZWQgfX0KICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLmxhYmVscyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHNlcnZlcnM6CiAgLSBwb3J0OgogICAgICBudW1iZXI6IDE1MDExCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgbmFtZTogdGNwLXBpbG90CiAgICBob3N0czoKICAgIC0gIioiCiAgLSBwb3J0OgogICAgICBudW1iZXI6IDgwNjAKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiB0Y3AtY2l0YWRlbAogICAgaG9zdHM6CiAgICAtICIqIgogIC0gcG9ydDoKICAgICAgbnVtYmVyOiAxNTAwNAogICAgICBuYW1lOiB0bHMtbWl4ZXIKICAgICAgcHJvdG9jb2w6IFRMUwogICAgdGxzOgogICAgICBtb2RlOiBBVVRPX1BBU1NUSFJPVUdICiAgICBob3N0czoKICAgIC0gIioiCi0tLQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5tdWx0aUNsdXN0ZXIuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IEdhdGV3YXkKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbXVsdGljbHVzdGVyLWVncmVzc2dhdGV3YXkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdhdGV3YXkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJnYXRld2F5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHNlbGVjdG9yOgogIHt7LSByYW5nZSAka2V5LCAkc3BlYyA6PSAuVmFsdWVzIH19CiAge3stIGlmIGVxICRrZXkgImlzdGlvLWVncmVzc2dhdGV3YXkiIH19CiAge3stIGlmICRzcGVjLmVuYWJsZWQgfX0KICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLmxhYmVscyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHNlcnZlcnM6CiAgLSBob3N0czoKICAgIC0gIiouZ2xvYmFsIgogICAgcG9ydDoKICAgICAgbmFtZTogdGxzCiAgICAgIG51bWJlcjogMTU0NDMKICAgICAgcHJvdG9jb2w6IFRMUwogICAgdGxzOgogICAgICBtb2RlOiBBVVRPX1BBU1NUSFJPVUdICi0tLQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IEdhdGV3YXkKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbXVsdGljbHVzdGVyLWluZ3Jlc3NnYXRld2F5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYXRld2F5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBzZWxlY3RvcjoKICB7ey0gcmFuZ2UgJGtleSwgJHNwZWMgOj0gLlZhbHVlcyB9fQogIHt7LSBpZiBlcSAka2V5ICJpc3Rpby1pbmdyZXNzZ2F0ZXdheSIgfX0KICB7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAgc2VydmVyczoKICAtIGhvc3RzOgogICAgLSAiKi5nbG9iYWwiCiAgICBwb3J0OgogICAgICBuYW1lOiB0bHMKICAgICAgbnVtYmVyOiAxNTQ0MwogICAgICBwcm90b2NvbDogVExTCiAgICB0bHM6CiAgICAgIG1vZGU6IEFVVE9fUEFTU1RIUk9VR0gKLS0tCmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogRW52b3lGaWx0ZXIKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbXVsdGljbHVzdGVyLWluZ3Jlc3NnYXRld2F5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYXRld2F5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICB3b3JrbG9hZExhYmVsczoKICB7ey0gcmFuZ2UgJGtleSwgJHNwZWMgOj0gLlZhbHVlcyB9fQogIHt7LSBpZiBlcSAka2V5ICJpc3Rpby1pbmdyZXNzZ2F0ZXdheSIgfX0KICB7ey0gaWYgJHNwZWMuZW5hYmxlZCB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19CiAgZmlsdGVyczoKICAtIGxpc3RlbmVyTWF0Y2g6CiAgICAgIHBvcnROdW1iZXI6IDE1NDQzCiAgICAgIGxpc3RlbmVyVHlwZTogR0FURVdBWQogICAgaW5zZXJ0UG9zaXRpb246CiAgICAgIGluZGV4OiBBRlRFUgogICAgICByZWxhdGl2ZVRvOiBlbnZveS5maWx0ZXJzLm5ldHdvcmsuc25pX2NsdXN0ZXIKICAgIGZpbHRlck5hbWU6IGVudm95LmZpbHRlcnMubmV0d29yay50Y3BfY2x1c3Rlcl9yZXdyaXRlCiAgICBmaWx0ZXJUeXBlOiBORVRXT1JLCiAgICBmaWx0ZXJDb25maWc6CiAgICAgIGNsdXN0ZXJfcGF0dGVybjogIlxcLmdsb2JhbCQiCiAgICAgIGNsdXN0ZXJfcmVwbGFjZW1lbnQ6ICIuc3ZjLnt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmNsdXN0ZXJEb21haW4gfX0iCi0tLQojIyBUbyBlbnN1cmUgYWxsIHRyYWZmaWMgdG8gKi5nbG9iYWwgaXMgdXNpbmcgbVRMUwphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IERlc3RpbmF0aW9uUnVsZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1tdWx0aWNsdXN0ZXItZGVzdGluYXRpb25ydWxlCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJnYXRld2F5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBob3N0OiAiKi5nbG9iYWwiCiAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRDb25maWdWaXNpYmlsaXR5U2V0dGluZ3MgfX0KICBleHBvcnRUbzoKICAtICcqJwogIHt7LSBlbmQgfX0KICB0cmFmZmljUG9saWN5OgogICAgdGxzOgogICAgICBtb2RlOiBJU1RJT19NVVRVQUwKLS0tCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/gateways/templates/role.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG5lICRrZXkgImVuYWJsZWQiIH19Cnt7LSBpZiAkc3BlYy5lbmFibGVkIH19Cnt7LSBpZiAoJHNwZWMuc2RzKSBhbmQgKGVxICRzcGVjLnNkcy5lbmFibGVkIHRydWUpIH19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZQptZXRhZGF0YToKICBuYW1lOiB7eyAka2V5IH19LXNkcwogIG5hbWVzcGFjZToge3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VjcmV0cyJdCiAgdmVyYnM6IFsiZ2V0IiwgIndhdGNoIiwgImxpc3QiXQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/gateways/templates/rolebindings.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG5lICRrZXkgImVuYWJsZWQiIH19Cnt7LSBpZiAkc3BlYy5lbmFibGVkIH19Cnt7LSBpZiAoJHNwZWMuc2RzKSBhbmQgKGVxICRzcGVjLnNkcy5lbmFibGVkIHRydWUpIH19CmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToge3sgJGtleSB9fS1zZHMKICBuYW1lc3BhY2U6IHt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IFJvbGUKICBuYW1lOiB7eyAka2V5IH19LXNkcwpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IHt7ICRrZXkgfX0tc2VydmljZS1hY2NvdW50Ci0tLQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/gateways/templates/service.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG5lICRrZXkgImVuYWJsZWQiIH19Cnt7LSBpZiAkc3BlYy5lbmFibGVkIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToge3sgJGtleSB9fQogIG5hbWVzcGFjZToge3sgJHNwZWMubmFtZXNwYWNlIHwgZGVmYXVsdCAkLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAkc3BlYy5zZXJ2aWNlQW5ub3RhdGlvbnMgfX0KICAgIHt7ICRrZXkgfX06IHt7ICR2YWwgfCBxdW90ZSB9fQogICAge3stIGVuZCB9fQogIGxhYmVsczoKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgJCB9fQogICAgaGVyaXRhZ2U6IHt7ICQuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CnNwZWM6Cnt7LSBpZiAkc3BlYy5sb2FkQmFsYW5jZXJJUCB9fQogIGxvYWRCYWxhbmNlcklQOiAie3sgJHNwZWMubG9hZEJhbGFuY2VySVAgfX0iCnt7LSBlbmQgfX0Ke3stIGlmICRzcGVjLmxvYWRCYWxhbmNlclNvdXJjZVJhbmdlcyB9fQogIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoKe3sgdG9ZYW1sICRzcGVjLmxvYWRCYWxhbmNlclNvdXJjZVJhbmdlcyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Ke3stIGlmICRzcGVjLmV4dGVybmFsVHJhZmZpY1BvbGljeSB9fQogIGV4dGVybmFsVHJhZmZpY1BvbGljeToge3skc3BlYy5leHRlcm5hbFRyYWZmaWNQb2xpY3kgfX0Ke3stIGVuZCB9fQp7ey0gaWYgJHNwZWMuZXh0ZXJuYWxJUHMgfX0KICBleHRlcm5hbElQczoKe3sgdG9ZYW1sICRzcGVjLmV4dGVybmFsSVBzIHwgaW5kZW50IDQgfX0Ke3stIGVuZCB9fQogIHR5cGU6IHt7IC50eXBlIH19CiAgc2VsZWN0b3I6CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gJHNwZWMubGFiZWxzIH19CiAgICB7eyAka2V5IH19OiB7eyAkdmFsIH19CiAgICB7ey0gZW5kIH19CiAgcG9ydHM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbCA6PSAkc3BlYy5wb3J0cyB9fQogICAgLQogICAgICB7ey0gcmFuZ2UgJHBrZXksICRwdmFsIDo9ICR2YWwgfX0KICAgICAge3sgJHBrZXl9fToge3sgJHB2YWwgfX0KICAgICAge3stIGVuZCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmICQuVmFsdWVzLmdsb2JhbC5tZXNoRXhwYW5zaW9uLmVuYWJsZWQgfX0KICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRzcGVjLm1lc2hFeHBhbnNpb25Qb3J0cyB9fQogICAgLQogICAgICB7ey0gcmFuZ2UgJHBrZXksICRwdmFsIDo9ICR2YWwgfX0KICAgICAge3sgJHBrZXl9fToge3sgJHB2YWwgfX0KICAgICAge3stIGVuZCB9fQogICAge3stIGVuZCB9fQogICAge3stIGVuZCB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/gateways/templates/serviceaccount.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG5lICRrZXkgImVuYWJsZWQiIH19Cnt7LSBpZiAkc3BlYy5lbmFibGVkIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cnt7LSBpZiAkLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQppbWFnZVB1bGxTZWNyZXRzOgp7ey0gcmFuZ2UgJC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IHt7ICRrZXkgfX0tc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAkc3BlYy5uYW1lc3BhY2UgfCBkZWZhdWx0ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7ICRzcGVjLmxhYmVscy5hcHAgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ2F0ZXdheS5jaGFydCIgJCB9fQogICAgaGVyaXRhZ2U6IHt7ICQuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCg=="
        },
        {
          "filePath": "charts/gateways/values.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBncmFmYW5hCnZlcnNpb246IDEuMS4wCmFwcFZlcnNpb246IDEuMS4wCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/grafana/dashboards/galley-dashboard.json",
          "fileContents": "ewogICJfX2lucHV0cyI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiRFNfUFJPTUVUSEVVUyIsCiAgICAgICJsYWJlbCI6ICJQcm9tZXRoZXVzIiwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJ0eXBlIjogImRhdGFzb3VyY2UiLAogICAgICAicGx1Z2luSWQiOiAicHJvbWV0aGV1cyIsCiAgICAgICJwbHVnaW5OYW1lIjogIlByb21ldGhldXMiCiAgICB9CiAgXSwKICAiYW5ub3RhdGlvbnMiOiB7CiAgICAibGlzdCI6IFsKICAgICAgewogICAgICAgICJidWlsdEluIjogMSwKICAgICAgICAiZGF0YXNvdXJjZSI6ICItLSBHcmFmYW5hIC0tIiwKICAgICAgICAiZW5hYmxlIjogdHJ1ZSwKICAgICAgICAiaGlkZSI6IHRydWUsCiAgICAgICAgImljb25Db2xvciI6ICJyZ2JhKDAsIDIxMSwgMjU1LCAxKSIsCiAgICAgICAgIm5hbWUiOiAiQW5ub3RhdGlvbnMgJiBBbGVydHMiLAogICAgICAgICJ0eXBlIjogImRhc2hib2FyZCIKICAgICAgfQogICAgXQogIH0sCiAgImVkaXRhYmxlIjogZmFsc2UsCiAgImduZXRJZCI6IG51bGwsCiAgImdyYXBoVG9vbHRpcCI6IDAsCiAgImxpbmtzIjogW10sCiAgInBhbmVscyI6IFsKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMAogICAgICB9LAogICAgICAiaWQiOiA0NiwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAic3VtKGlzdGlvX2J1aWxke2NvbXBvbmVudD1cImdhbGxleVwifSkgYnkgKHRhZykiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7eyB0YWcgfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJHYWxsZXkgVmVyc2lvbnMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiBmYWxzZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDUKICAgICAgfSwKICAgICAgImlkIjogNDAsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRpdGxlIjogIlJlc291cmNlIFVzYWdlIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA4LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA2CiAgICAgIH0sCiAgICAgICJpZCI6IDM2LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJwcm9jZXNzX3ZpcnR1YWxfbWVtb3J5X2J5dGVze2pvYj1cImdhbGxleVwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlZpcnR1YWwgTWVtb3J5IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicHJvY2Vzc19yZXNpZGVudF9tZW1vcnlfYnl0ZXN7am9iPVwiZ2FsbGV5XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUmVzaWRlbnQgTWVtb3J5IiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiZ29fbWVtc3RhdHNfaGVhcF9zeXNfYnl0ZXN7am9iPVwiZ2FsbGV5XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiaGVhcCBzeXMiLAogICAgICAgICAgInJlZklkIjogIkMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnb19tZW1zdGF0c19oZWFwX2FsbG9jX2J5dGVze2pvYj1cImdhbGxleVwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogImhlYXAgYWxsb2MiLAogICAgICAgICAgInJlZklkIjogIkQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnb19tZW1zdGF0c19hbGxvY19ieXRlc3tqb2I9XCJnYWxsZXlcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJBbGxvYyIsCiAgICAgICAgICAicmVmSWQiOiAiRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdvX21lbXN0YXRzX2hlYXBfaW51c2VfYnl0ZXN7am9iPVwiZ2FsbGV5XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiSGVhcCBpbi11c2UiLAogICAgICAgICAgInJlZklkIjogIkciCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnb19tZW1zdGF0c19zdGFja19pbnVzZV9ieXRlc3tqb2I9XCJnYWxsZXlcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJTdGFjayBpbi11c2UiLAogICAgICAgICAgInJlZklkIjogIkgiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oY29udGFpbmVyX21lbW9yeV91c2FnZV9ieXRlc3tjb250YWluZXJfbmFtZT1+XCJnYWxsZXlcIiwgcG9kX25hbWU9flwiaXN0aW8tZ2FsbGV5LS4qXCJ9KSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlRvdGFsIChraXMpIiwKICAgICAgICAgICJyZWZJZCI6ICJFIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiTWVtb3J5IiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogZmFsc2UKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA4LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDYsCiAgICAgICAgInkiOiA2CiAgICAgIH0sCiAgICAgICJpZCI6IDM4LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShjb250YWluZXJfY3B1X3VzYWdlX3NlY29uZHNfdG90YWx7am9iPVwia3ViZXJuZXRlcy1jYWR2aXNvclwiLGNvbnRhaW5lcl9uYW1lPX5cImdhbGxleVwiLCBwb2RfbmFtZT1+XCJpc3Rpby1nYWxsZXktLipcIn1bMW1dKSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJUb3RhbCAoazhzKSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bShyYXRlKGNvbnRhaW5lcl9jcHVfdXNhZ2Vfc2Vjb25kc190b3RhbHtqb2I9XCJrdWJlcm5ldGVzLWNhZHZpc29yXCIsY29udGFpbmVyX25hbWU9flwiZ2FsbGV5XCIsIHBvZF9uYW1lPX5cImlzdGlvLWdhbGxleS0uKlwifVsxbV0pKSBieSAoY29udGFpbmVyX25hbWUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgY29udGFpbmVyX25hbWUgfX0gKGs4cykiLAogICAgICAgICAgInJlZklkIjogIkIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJpcmF0ZShwcm9jZXNzX2NwdV9zZWNvbmRzX3RvdGFse2pvYj1cImdhbGxleVwifVsxbV0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiZ2FsbGV5IChzZWxmLXJlcG9ydGVkKSIsCiAgICAgICAgICAicmVmSWQiOiAiQyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkNQVSIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA4LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogNgogICAgICB9LAogICAgICAiaWQiOiA0MiwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicHJvY2Vzc19vcGVuX2Zkc3tqb2I9XCJnYWxsZXlcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJPcGVuIEZEcyAoZ2FsbGV5KSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImNvbnRhaW5lcl9mc191c2FnZV9ieXRlc3tjb250YWluZXJfbmFtZT1+XCJnYWxsZXlcIiwgcG9kX25hbWU9flwiaXN0aW8tZ2FsbGV5LS4qXCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgY29udGFpbmVyX25hbWUgfX0gIiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiRGlzayIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IGZhbHNlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogOCwKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiAxOCwKICAgICAgICAieSI6IDYKICAgICAgfSwKICAgICAgImlkIjogNDQsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdvX2dvcm91dGluZXN7am9iPVwiZ2FsbGV5XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiZ29yb3V0aW5lc190b3RhbCIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdhbGxleV9tY3Bfc291cmNlX2NsaWVudHNfdG90YWwiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJjbGllbnRzX3RvdGFsIiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiZ29fZ29yb3V0aW5lc3tqb2I9XCJnYWxsZXlcIn0vZ2FsbGV5X21jcF9zb3VyY2VfY2xpZW50c190b3RhbCIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogImF2Z19nb3JvdXRpbmVzX3Blcl9jbGllbnQiLAogICAgICAgICAgInJlZklkIjogIkMiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJHb3JvdXRpbmVzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDE0CiAgICAgIH0sCiAgICAgICJpZCI6IDEwLAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0aXRsZSI6ICJSdW50aW1lIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA2LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAxNQogICAgICB9LAogICAgICAiaWQiOiAyLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShnYWxsZXlfcnVudGltZV9zdHJhdGVneV9vbl9jaGFuZ2VfdG90YWxbMW1dKSkgKiA2MCIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlN0cmF0ZWd5IENoYW5nZSBFdmVudHMiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShnYWxsZXlfcnVudGltZV9wcm9jZXNzb3JfZXZlbnRzX3Byb2Nlc3NlZF90b3RhbFsxbV0pKSAqIDYwIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUHJvY2Vzc2VkIEV2ZW50cyIsCiAgICAgICAgICAicmVmSWQiOiAiQiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bShyYXRlKGdhbGxleV9ydW50aW1lX3Byb2Nlc3Nvcl9zbmFwc2hvdHNfcHVibGlzaGVkX3RvdGFsWzFtXSkpICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJTbmFwc2hvdCBQdWJsaXNoZWQiLAogICAgICAgICAgInJlZklkIjogIkMiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJFdmVudCBSYXRlcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIkV2ZW50cy9taW4iLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA2LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDgsCiAgICAgICAgInkiOiAxNQogICAgICB9LAogICAgICAiaWQiOiA0LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShnYWxsZXlfcnVudGltZV9zdHJhdGVneV90aW1lcl9tYXhfdGltZV9yZWFjaGVkX3RvdGFsWzFtXSkpICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJNYXggVGltZSBSZWFjaGVkIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUoZ2FsbGV5X3J1bnRpbWVfc3RyYXRlZ3lfdGltZXJfcXVpZXNjZV9yZWFjaGVkX3RvdGFsWzFtXSkpICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJRdWllc2NlIFJlYWNoZWQiLAogICAgICAgICAgInJlZklkIjogIkIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShnYWxsZXlfcnVudGltZV9zdHJhdGVneV90aW1lcl9yZXNldHNfdG90YWxbMW1dKSkgKiA2MCIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlRpbWVyIFJlc2V0cyIsCiAgICAgICAgICAicmVmSWQiOiAiQyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlRpbWVyIFJhdGVzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiRXZlbnRzL21pbiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiAxNiwKICAgICAgICAieSI6IDE1CiAgICAgIH0sCiAgICAgICJpZCI6IDgsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDMsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiaGlzdG9ncmFtX3F1YW50aWxlKDAuNTAsIHN1bSBieSAobGUpIChnYWxsZXlfcnVudGltZV9wcm9jZXNzb3Jfc25hcHNob3RfZXZlbnRzX3RvdGFsX2J1Y2tldCkpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUDUwIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiaGlzdG9ncmFtX3F1YW50aWxlKDAuOTAsIHN1bSBieSAobGUpIChnYWxsZXlfcnVudGltZV9wcm9jZXNzb3Jfc25hcHNob3RfZXZlbnRzX3RvdGFsX2J1Y2tldCkpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUDkwIiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiaGlzdG9ncmFtX3F1YW50aWxlKDAuOTUsIHN1bSBieSAobGUpIChnYWxsZXlfcnVudGltZV9wcm9jZXNzb3Jfc25hcHNob3RfZXZlbnRzX3RvdGFsX2J1Y2tldCkpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUDk1IiwKICAgICAgICAgICJyZWZJZCI6ICJDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiaGlzdG9ncmFtX3F1YW50aWxlKDAuOTksIHN1bSBieSAobGUpIChnYWxsZXlfcnVudGltZV9wcm9jZXNzb3Jfc25hcHNob3RfZXZlbnRzX3RvdGFsX2J1Y2tldCkpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUDk5IiwKICAgICAgICAgICJyZWZJZCI6ICJEIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiRXZlbnRzIFBlciBTbmFwc2hvdCIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA2LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDgsCiAgICAgICAgInkiOiAyMQogICAgICB9LAogICAgICAiaWQiOiA2LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0gYnkgKHR5cGVVUkwpIChnYWxsZXlfcnVudGltZV9zdGF0ZV90eXBlX2luc3RhbmNlc190b3RhbCkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7eyB0eXBlVVJMIH19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiU3RhdGUgVHlwZSBJbnN0YW5jZXMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICJDb3VudCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJjb2xsYXBzZWQiOiBmYWxzZSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMjcKICAgICAgfSwKICAgICAgImlkIjogMzQsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRpdGxlIjogIlZhbGlkYXRpb24iLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDYsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDI4CiAgICAgIH0sCiAgICAgICJpZCI6IDI4LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnYWxsZXlfdmFsaWRhdGlvbl9jZXJ0X2tleV91cGRhdGVze2pvYj1cImdhbGxleVwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIktleSBVcGRhdGVzIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiZ2FsbGV5X3ZhbGlkYXRpb25fY2VydF9rZXlfdXBkYXRlX2Vycm9yc3tqb2I9XCJnYWxsZXlcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJLZXkgVXBkYXRlIEVycm9yczoge3sgZXJyb3IgfX0iLAogICAgICAgICAgInJlZklkIjogIkIiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJWYWxpZGF0aW9uIFdlYmhvb2sgQ2VydGlmaWNhdGUiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiA4LAogICAgICAgICJ5IjogMjgKICAgICAgfSwKICAgICAgImlkIjogMzAsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bShnYWxsZXlfdmFsaWRhdGlvbl9wYXNzZWR7am9iPVwiZ2FsbGV5XCJ9KSBieSAoZ3JvdXAsIHZlcnNpb24sIHJlc291cmNlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlBhc3NlZDoge3sgZ3JvdXAgfX0ve3sgdmVyc2lvbiB9fS97e3Jlc291cmNlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oZ2FsbGV5X3ZhbGlkYXRpb25fZmFpbGVke2pvYj1cImdhbGxleVwifSkgYnkgKGdyb3VwLCB2ZXJzaW9uLCByZXNvdXJjZSwgcmVhc29uKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIkZhaWxlZDoge3sgZ3JvdXAgfX0ve3sgdmVyc2lvbiB9fS97e3Jlc291cmNlfX0gKHt7IHJlYXNvbn19KSIsCiAgICAgICAgICAicmVmSWQiOiAiQiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlJlc291cmNlIFZhbGlkYXRpb24iLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiAxNiwKICAgICAgICAieSI6IDI4CiAgICAgIH0sCiAgICAgICJpZCI6IDMyLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oZ2FsbGV5X3ZhbGlkYXRpb25faHR0cF9lcnJvcntqb2I9XCJnYWxsZXlcIn0pIGJ5IChzdGF0dXMpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgc3RhdHVzIH19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiVmFsaWRhdGlvbiBIVFRQIEVycm9ycyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImNvbGxhcHNlZCI6IGZhbHNlLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDEsCiAgICAgICAgInciOiAyNCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAzNAogICAgICB9LAogICAgICAiaWQiOiAxMiwKICAgICAgInBhbmVscyI6IFtdLAogICAgICAidGl0bGUiOiAiS3ViZXJuZXRlcyBTb3VyY2UiLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDYsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDM1CiAgICAgIH0sCiAgICAgICJpZCI6IDE0LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJyYXRlKGdhbGxleV9zb3VyY2Vfa3ViZV9ldmVudF9zdWNjZXNzX3RvdGFsWzFtXSkgKiA2MCIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlN1Y2Nlc3MiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJyYXRlKGdhbGxleV9zb3VyY2Vfa3ViZV9ldmVudF9lcnJvcl90b3RhbFsxbV0pICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJFcnJvciIsCiAgICAgICAgICAicmVmSWQiOiAiQiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlNvdXJjZSBFdmVudCBSYXRlIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiRXZlbnRzL21pbiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiA4LAogICAgICAgICJ5IjogMzUKICAgICAgfSwKICAgICAgImlkIjogMTYsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInJhdGUoZ2FsbGV5X3NvdXJjZV9rdWJlX2R5bmFtaWNfY29udmVydGVyX3N1Y2Nlc3NfdG90YWxbMW1dKSAqIDYwIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie2FwaVZlcnNpb249XCJ7e2FwaVZlcnNpb259fVwiLGdyb3VwPVwie3tncm91cH19XCIsa2luZD1cInt7a2luZH19XCJ9IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiS3ViZXJuZXRlcyBPYmplY3QgQ29udmVyc2lvbiBTdWNjZXNzZXMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICJDb252ZXJzaW9ucy9taW4iLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDYsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMTYsCiAgICAgICAgInkiOiAzNQogICAgICB9LAogICAgICAiaWQiOiAyNCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicmF0ZShnYWxsZXlfc291cmNlX2t1YmVfZHluYW1pY19jb252ZXJ0ZXJfZmFpbHVyZV90b3RhbFsxbV0pICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJFcnJvciIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkt1YmVybmV0ZXMgT2JqZWN0IENvbnZlcnNpb24gRmFpbHVyZXMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICJGYWlsdXJlcy9taW4iLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDQxCiAgICAgIH0sCiAgICAgICJpZCI6IDE4LAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNoIENvbmZpZ3VyYXRpb24gUHJvdG9jb2wiLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDYsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDQyCiAgICAgIH0sCiAgICAgICJpZCI6IDIwLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oZ2FsbGV5X21jcF9zb3VyY2VfY2xpZW50c190b3RhbCkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJDbGllbnRzIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiQ29ubmVjdGVkIENsaWVudHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiA4LAogICAgICAgICJ5IjogNDIKICAgICAgfSwKICAgICAgImlkIjogMjIsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bSBieShjb2xsZWN0aW9uKShpcmF0ZShnYWxsZXlfbWNwX3NvdXJjZV9yZXF1ZXN0X2Fja3NfdG90YWxbMW1dKSAqIDYwKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIiIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlJlcXVlc3QgQUNLcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIkFDS3MvbWluIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA2LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDE2LAogICAgICAgICJ5IjogNDIKICAgICAgfSwKICAgICAgImlkIjogMjYsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInJhdGUoZ2FsbGV5X21jcF9zb3VyY2VfcmVxdWVzdF9uYWNrc190b3RhbFsxbV0pICogNjAiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJSZXF1ZXN0IE5BQ0tzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiTkFDS3MvbWluIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfQogIF0sCiAgInJlZnJlc2giOiAiNXMiLAogICJzY2hlbWFWZXJzaW9uIjogMTYsCiAgInN0eWxlIjogImRhcmsiLAogICJ0YWdzIjogW10sCiAgInRlbXBsYXRpbmciOiB7CiAgICAibGlzdCI6IFtdCiAgfSwKICAidGltZSI6IHsKICAgICJmcm9tIjogIm5vdy01bSIsCiAgICAidG8iOiAibm93IgogIH0sCiAgInRpbWVwaWNrZXIiOiB7CiAgICAicmVmcmVzaF9pbnRlcnZhbHMiOiBbCiAgICAgICI1cyIsCiAgICAgICIxMHMiLAogICAgICAiMzBzIiwKICAgICAgIjFtIiwKICAgICAgIjVtIiwKICAgICAgIjE1bSIsCiAgICAgICIzMG0iLAogICAgICAiMWgiLAogICAgICAiMmgiLAogICAgICAiMWQiCiAgICBdLAogICAgInRpbWVfb3B0aW9ucyI6IFsKICAgICAgIjVtIiwKICAgICAgIjE1bSIsCiAgICAgICIxaCIsCiAgICAgICI2aCIsCiAgICAgICIxMmgiLAogICAgICAiMjRoIiwKICAgICAgIjJkIiwKICAgICAgIjdkIiwKICAgICAgIjMwZCIKICAgIF0KICB9LAogICJ0aW1lem9uZSI6ICIiLAogICJ0aXRsZSI6ICJJc3RpbyBHYWxsZXkgRGFzaGJvYXJkIiwKICAidWlkIjogIlRTRVk2akxtayIsCiAgInZlcnNpb24iOiAxCn0K"
        },
        {
          "filePath": "charts/grafana/dashboards/istio-mesh-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-performance-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-service-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/istio-workload-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/mixer-dashboard.json",
          "fileContents": ""
        },
        {
          "filePath": "charts/grafana/dashboards/pilot-dashboard.json",
          "fileContents": "ewogICJhbm5vdGF0aW9ucyI6IHsKICAgICJsaXN0IjogWwogICAgICB7CiAgICAgICAgImJ1aWx0SW4iOiAxLAogICAgICAgICJkYXRhc291cmNlIjogIi0tIEdyYWZhbmEgLS0iLAogICAgICAgICJlbmFibGUiOiB0cnVlLAogICAgICAgICJoaWRlIjogdHJ1ZSwKICAgICAgICAiaWNvbkNvbG9yIjogInJnYmEoMCwgMjExLCAyNTUsIDEpIiwKICAgICAgICAibmFtZSI6ICJBbm5vdGF0aW9ucyAmIEFsZXJ0cyIsCiAgICAgICAgInR5cGUiOiAiZGFzaGJvYXJkIgogICAgICB9CiAgICBdCiAgfSwKICAiZWRpdGFibGUiOiBmYWxzZSwKICAiZ25ldElkIjogbnVsbCwKICAiZ3JhcGhUb29sdGlwIjogMSwKICAiaWQiOiA2LAogICJsaW5rcyI6IFtdLAogICJwYW5lbHMiOiBbCiAgICB7CiAgICAgICJjb2xsYXBzZWQiOiBmYWxzZSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMAogICAgICB9LAogICAgICAiaWQiOiA2MCwKICAgICAgInBhbmVscyI6IFtdLAogICAgICAidGl0bGUiOiAiRGVwbG95ZWQgVmVyc2lvbnMiLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAyNCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAxCiAgICAgIH0sCiAgICAgICJpZCI6IDU2LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oaXN0aW9fYnVpbGR7Y29tcG9uZW50PVwicGlsb3RcIn0pIGJ5ICh0YWcpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgdGFnIH19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiUGlsb3QgVmVyc2lvbnMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiBmYWxzZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDYKICAgICAgfSwKICAgICAgImlkIjogNjIsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRpdGxlIjogIlJlc291cmNlIFVzYWdlIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA3CiAgICAgIH0sCiAgICAgICJpZCI6IDUsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInByb2Nlc3NfdmlydHVhbF9tZW1vcnlfYnl0ZXN7am9iPVwicGlsb3RcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiVmlydHVhbCBNZW1vcnkiLAogICAgICAgICAgInJlZklkIjogIkkiLAogICAgICAgICAgInN0ZXAiOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJwcm9jZXNzX3Jlc2lkZW50X21lbW9yeV9ieXRlc3tqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlJlc2lkZW50IE1lbW9yeSIsCiAgICAgICAgICAicmVmSWQiOiAiSCIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdvX21lbXN0YXRzX2hlYXBfc3lzX2J5dGVze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiB0cnVlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiaGVhcCBzeXMiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnb19tZW1zdGF0c19oZWFwX2FsbG9jX2J5dGVze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiB0cnVlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiaGVhcCBhbGxvYyIsCiAgICAgICAgICAicmVmSWQiOiAiRCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdvX21lbXN0YXRzX2FsbG9jX2J5dGVze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiQWxsb2MiLAogICAgICAgICAgInJlZklkIjogIkYiLAogICAgICAgICAgInN0ZXAiOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJnb19tZW1zdGF0c19oZWFwX2ludXNlX2J5dGVze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIkhlYXAgaW4tdXNlIiwKICAgICAgICAgICJyZWZJZCI6ICJFIiwKICAgICAgICAgICJzdGVwIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiZ29fbWVtc3RhdHNfc3RhY2tfaW51c2VfYnl0ZXN7am9iPVwicGlsb3RcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJTdGFjayBpbi11c2UiLAogICAgICAgICAgInJlZklkIjogIkciLAogICAgICAgICAgInN0ZXAiOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oY29udGFpbmVyX21lbW9yeV91c2FnZV9ieXRlc3tjb250YWluZXJfbmFtZT1+XCJkaXNjb3Zlcnl8aXN0aW8tcHJveHlcIiwgcG9kX25hbWU9flwiaXN0aW8tcGlsb3QtLipcIn0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlRvdGFsIChrOHMpIiwKICAgICAgICAgICJyZWZJZCI6ICJDIiwKICAgICAgICAgICJzdGVwIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiY29udGFpbmVyX21lbW9yeV91c2FnZV9ieXRlc3tjb250YWluZXJfbmFtZT1+XCJkaXNjb3Zlcnl8aXN0aW8tcHJveHlcIiwgcG9kX25hbWU9flwiaXN0aW8tcGlsb3QtLipcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaGlkZSI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgY29udGFpbmVyX25hbWUgfX0gKGs4cykiLAogICAgICAgICAgInJlZklkIjogIkIiLAogICAgICAgICAgInN0ZXAiOiAyCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJNZW1vcnkiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogImJ5dGVzIiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiBmYWxzZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDcsCiAgICAgICAgInciOiA2LAogICAgICAgICJ4IjogNiwKICAgICAgICAieSI6IDcKICAgICAgfSwKICAgICAgImlkIjogNiwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUoY29udGFpbmVyX2NwdV91c2FnZV9zZWNvbmRzX3RvdGFse2pvYj1cImt1YmVybmV0ZXMtY2Fkdmlzb3JcIixjb250YWluZXJfbmFtZT1+XCJkaXNjb3Zlcnl8aXN0aW8tcHJveHlcIiwgcG9kX25hbWU9flwiaXN0aW8tcGlsb3QtLipcIn1bMW1dKSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaGlkZSI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiVG90YWwgKGs4cykiLAogICAgICAgICAgInJlZklkIjogIkEiLAogICAgICAgICAgInN0ZXAiOiAyCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShjb250YWluZXJfY3B1X3VzYWdlX3NlY29uZHNfdG90YWx7am9iPVwia3ViZXJuZXRlcy1jYWR2aXNvclwiLGNvbnRhaW5lcl9uYW1lPX5cImRpc2NvdmVyeXxpc3Rpby1wcm94eVwiLCBwb2RfbmFtZT1+XCJpc3Rpby1waWxvdC0uKlwifVsxbV0pKSBieSAoY29udGFpbmVyX25hbWUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7IGNvbnRhaW5lcl9uYW1lIH19IChrOHMpIiwKICAgICAgICAgICJyZWZJZCI6ICJCIiwKICAgICAgICAgICJzdGVwIjogMgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAiaXJhdGUocHJvY2Vzc19jcHVfc2Vjb25kc190b3RhbHtqb2I9XCJwaWxvdFwifVsxbV0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInBpbG90IChzZWxmLXJlcG9ydGVkKSIsCiAgICAgICAgICAicmVmSWQiOiAiQyIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkNQVSIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogNwogICAgICB9LAogICAgICAiaWQiOiA3LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJwcm9jZXNzX29wZW5fZmRze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiB0cnVlLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbCI6ICIiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiT3BlbiBGRHMgKHBpbG90KSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogImNvbnRhaW5lcl9mc191c2FnZV9ieXRlc3tjb250YWluZXJfbmFtZT1+XCJkaXNjb3Zlcnl8aXN0aW8tcHJveHlcIiwgcG9kX25hbWU9flwiaXN0aW8tcGlsb3QtLipcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7eyBjb250YWluZXJfbmFtZSB9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQiIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkRpc2siLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogImJ5dGVzIiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogbnVsbCwKICAgICAgICAgICJmb3JtYXQiOiAibm9uZSIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMTAyNCwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IGZhbHNlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNywKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiAxOCwKICAgICAgICAieSI6IDcKICAgICAgfSwKICAgICAgImlkIjogNCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogImdvX2dvcm91dGluZXN7am9iPVwicGlsb3RcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAyLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJOdW1iZXIgb2YgR29yb3V0aW5lcyIsCiAgICAgICAgICAicmVmSWQiOiAiQSIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkdvcm91dGluZXMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDE0CiAgICAgIH0sCiAgICAgICJpZCI6IDU4LAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0aXRsZSI6ICJQaWxvdCBQdXNoIEluZm9ybWF0aW9uIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogdHJ1ZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiU2hvd3MgcGlsb3QgcHVzaGVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDgsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAxNQogICAgICB9LAogICAgICAiaWQiOiA2MjIsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IGZhbHNlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocGlsb3RfeGRzX3B1c2hlc3t0eXBlIX5cIi4qX3NlbmRlcnJcIn1bMW1dKSkgYnkgKHR5cGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbCI6ICIiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgdHlwZSB9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQiIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlBpbG90IFB1c2hlcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiBmYWxzZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFsKICAgICAgICAgICJ0b3RhbCIKICAgICAgICBdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogIm9wcyIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiBmYWxzZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImRlc2NyaXB0aW9uIjogIkNhcHR1cmVzIGEgdmFyaWV0eSBvZiBwaWxvdCBlcnJvcnMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogOCwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMTIsCiAgICAgICAgInkiOiAxNQogICAgICB9LAogICAgICAiaWQiOiA2NywKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAibGFiZWxfcmVwbGFjZShzdW0ocGlsb3RfeGRzX2Nkc19yZWplY3R7am9iPVwicGlsb3RcIn0pIGJ5IChub2RlLCBlcnIpLCBcIm5vZGVcIiwgXCIkMVwiLCBcIm5vZGVcIiwgXCIuKn4uKn4oLiopfi4qXCIpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlJlamVjdGVkIENEUyBDb25maWdzIC0ge3sgbm9kZSB9fToge3sgZXJyIH19IiwKICAgICAgICAgICJyZWZJZCI6ICJDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfeGRzX2Vkc19yZWplY3R7am9iPVwicGlsb3RcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaGlkZSI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUmVqZWN0ZWQgRURTIENvbmZpZ3MiLAogICAgICAgICAgInJlZklkIjogIkQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJyYXRlKHBpbG90X3hkc193cml0ZV90aW1lb3V0e2pvYj1cInBpbG90XCJ9WzFtXSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJXcml0ZSBUaW1lb3V0cyIsCiAgICAgICAgICAicmVmSWQiOiAiRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInJhdGUocGlsb3RfeGRzX3B1c2hfdGltZW91dHtqb2I9XCJwaWxvdFwifVsxbV0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUHVzaCBUaW1lb3V0cyIsCiAgICAgICAgICAicmVmSWQiOiAiRyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHBpbG90X3hkc19wdXNoX2Vycm9yc3tqb2I9XCJwaWxvdFwifVsxbV0pKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJoaWRlIjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJQdXNoIEVycm9ycyAoe3sgdHlwZSB9fSkiLAogICAgICAgICAgInJlZklkIjogIkkiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJQaWxvdCBFcnJvcnMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJjb2xsYXBzZWQiOiBmYWxzZSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMjMKICAgICAgfSwKICAgICAgImlkIjogNjQsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRpdGxlIjogInhEUyIsCiAgICAgICJ0eXBlIjogInJvdyIKICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMjQKICAgICAgfSwKICAgICAgImlkIjogNDAsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInN1bShpcmF0ZShlbnZveV9jbHVzdGVyX3VwZGF0ZV9zdWNjZXNze2NsdXN0ZXJfbmFtZT1cInhkcy1ncnBjXCJ9WzFtXSkpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlhEUyBHUlBDIFN1Y2Nlc3NlcyIsCiAgICAgICAgICAicmVmSWQiOiAiQyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIlVwZGF0ZXMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogIm9wcyIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJvcHMiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IGZhbHNlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiA4LAogICAgICAgICJ5IjogMjQKICAgICAgfSwKICAgICAgImlkIjogNDIsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogInJvdW5kKHN1bShyYXRlKGVudm95X2NsdXN0ZXJfdXBkYXRlX2F0dGVtcHR7Y2x1c3Rlcl9uYW1lPVwieGRzLWdycGNcIn1bMW1dKSkgLSBzdW0ocmF0ZShlbnZveV9jbHVzdGVyX3VwZGF0ZV9zdWNjZXNze2NsdXN0ZXJfbmFtZT1cInhkcy1ncnBjXCJ9WzFtXSkpKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDIsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlhEUyBHUlBDICIsCiAgICAgICAgICAicmVmSWQiOiAiQSIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkZhaWx1cmVzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJvcHMiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IGZhbHNlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogIlByb21ldGhldXMiLAogICAgICAiZmlsbCI6IDEsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNiwKICAgICAgICAidyI6IDgsCiAgICAgICAgIngiOiAxNiwKICAgICAgICAieSI6IDI0CiAgICAgIH0sCiAgICAgICJpZCI6IDQxLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IGZhbHNlLAogICAgICAgICJtYXgiOiBmYWxzZSwKICAgICAgICAibWluIjogZmFsc2UsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwiLAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicG9pbnRyYWRpdXMiOiA1LAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFtdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0oZW52b3lfY2x1c3Rlcl91cHN0cmVhbV9jeF9hY3RpdmV7Y2x1c3Rlcl9uYW1lPVwieGRzLWdycGNcIn0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMiwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUGlsb3QgKFhEUyBHUlBDKSIsCiAgICAgICAgICAicmVmSWQiOiAiQyIsCiAgICAgICAgICAic3RlcCI6IDIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkFjdGl2ZSBDb25uZWN0aW9ucyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA4LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAzMAogICAgICB9LAogICAgICAiaWQiOiA0NSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfY29uZmxpY3RfaW5ib3VuZF9saXN0ZW5lcntqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIkluYm91bmQgTGlzdGVuZXJzIiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfY29uZmxpY3Rfb3V0Ym91bmRfbGlzdGVuZXJfaHR0cF9vdmVyX2N1cnJlbnRfdGNwe2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiT3V0Ym91bmQgTGlzdGVuZXJzIChodHRwIG92ZXIgY3VycmVudCB0Y3ApIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfY29uZmxpY3Rfb3V0Ym91bmRfbGlzdGVuZXJfdGNwX292ZXJfY3VycmVudF90Y3B7am9iPVwicGlsb3RcIn0iLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJPdXRib3VuZCBMaXN0ZW5lcnMgKHRjcCBvdmVyIGN1cnJlbnQgdGNwKSIsCiAgICAgICAgICAicmVmSWQiOiAiQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInBpbG90X2NvbmZsaWN0X291dGJvdW5kX2xpc3RlbmVyX3RjcF9vdmVyX2N1cnJlbnRfaHR0cHtqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIk91dGJvdW5kIExpc3RlbmVycyAodGNwIG92ZXIgY3VycmVudCBodHRwKSIsCiAgICAgICAgICAicmVmSWQiOiAiRCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkNvbmZsaWN0cyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA4LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDgsCiAgICAgICAgInkiOiAzMAogICAgICB9LAogICAgICAiaWQiOiA0NywKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfdmlydF9zZXJ2aWNlc3tqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlZpcnR1YWwgU2VydmljZXMiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJwaWxvdF9zZXJ2aWNlc3tqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlNlcnZpY2VzIiwKICAgICAgICAgICJyZWZJZCI6ICJCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAibGFiZWxfcmVwbGFjZShzdW0ocGlsb3RfeGRzX2Nkc19yZWplY3R7am9iPVwicGlsb3RcIn0pIGJ5IChub2RlLCBlcnIpLCBcIm5vZGVcIiwgXCIkMVwiLCBcIm5vZGVcIiwgXCIuKn4uKn4oLiopfi4qXCIpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImhpZGUiOiB0cnVlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiUmVqZWN0ZWQgQ0RTIENvbmZpZ3MgLSB7eyBub2RlIH19OiB7eyBlcnIgfX0iLAogICAgICAgICAgInJlZklkIjogIkMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJwaWxvdF94ZHNfZWRzX3JlamVjdHtqb2I9XCJwaWxvdFwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJoaWRlIjogdHJ1ZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlJlamVjdGVkIEVEUyBDb25maWdzIiwKICAgICAgICAgICJyZWZJZCI6ICJEIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicGlsb3RfeGRze2pvYj1cInBpbG90XCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiQ29ubmVjdGVkIEVuZHBvaW50cyIsCiAgICAgICAgICAicmVmSWQiOiAiRSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJleHByIjogInJhdGUocGlsb3RfeGRzX3dyaXRlX3RpbWVvdXR7am9iPVwicGlsb3RcIn1bMW1dKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIldyaXRlIFRpbWVvdXRzIiwKICAgICAgICAgICJyZWZJZCI6ICJGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicmF0ZShwaWxvdF94ZHNfcHVzaF90aW1lb3V0e2pvYj1cInBpbG90XCJ9WzFtXSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJQdXNoIFRpbWVvdXRzIiwKICAgICAgICAgICJyZWZJZCI6ICJHIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicmF0ZShwaWxvdF94ZHNfcHVzaGVze2pvYj1cInBpbG90XCJ9WzFtXSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJQdXNoZXMgKHt7IHR5cGUgfX0pIiwKICAgICAgICAgICJyZWZJZCI6ICJIIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAicmF0ZShwaWxvdF94ZHNfcHVzaF9lcnJvcnN7am9iPVwicGlsb3RcIn1bMW1dKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIlB1c2ggRXJyb3JzICh7eyB0eXBlIH19KSIsCiAgICAgICAgICAicmVmSWQiOiAiSSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lRnJvbSI6IG51bGwsCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGltZVNoaWZ0IjogbnVsbCwKICAgICAgInRpdGxlIjogIkFEUyBNb25pdG9yaW5nIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6ICJQcm9tZXRoZXVzIiwKICAgICAgImZpbGwiOiAxLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDgsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMTYsCiAgICAgICAgInkiOiAzMAogICAgICB9LAogICAgICAiaWQiOiA0OSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAibGFiZWxfcmVwbGFjZShzdW0ocGlsb3RfeGRzX2Nkc19yZWplY3R7am9iPVwicGlsb3RcIn0pIGJ5IChub2RlLCBlcnIpLCBcIm5vZGVcIiwgXCIkMVwiLCBcIm5vZGVcIiwgXCIuKn4uKn4oLiopfi4qXCIpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgbm9kZSB9fSAgKHt7IGVyciB9fSkiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJSZWplY3RlZCBDRFMgQ29uZmlncyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAzOAogICAgICB9LAogICAgICAiaWQiOiA1MiwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAibGFiZWxfcmVwbGFjZShzdW0ocGlsb3RfeGRzX2Vkc19yZWplY3R7am9iPVwicGlsb3RcIn0pIGJ5IChub2RlLCBlcnIpLCBcIm5vZGVcIiwgXCIkMVwiLCBcIm5vZGVcIiwgXCIuKn4uKn4oLiopfi4qXCIpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgbm9kZSB9fSAoe3tlcnJ9fSkiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJSZWplY3RlZCBFRFMgQ29uZmlncyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDgsCiAgICAgICAgInkiOiAzOAogICAgICB9LAogICAgICAiaWQiOiA1NCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImV4cHIiOiAibGFiZWxfcmVwbGFjZShzdW0ocGlsb3RfeGRzX2xkc19yZWplY3R7am9iPVwicGlsb3RcIn0pIGJ5IChub2RlLCBlcnIpLCBcIm5vZGVcIiwgXCIkMVwiLCBcIm5vZGVcIiwgXCIuKn4uKn4oLiopfi4qXCIpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3sgbm9kZSB9fSAoe3tlcnJ9fSkiLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJSZWplY3RlZCBMRFMgQ29uZmlncyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMCwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAiYnVja2V0cyI6IG51bGwsCiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgIm5hbWUiOiBudWxsLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogbnVsbCwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtYXgiOiBudWxsLAogICAgICAgICAgIm1pbiI6IG51bGwsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZSwKICAgICAgICAiYWxpZ25MZXZlbCI6IG51bGwKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDE2LAogICAgICAgICJ5IjogMzgKICAgICAgfSwKICAgICAgImlkIjogNTMsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogZmFsc2UsCiAgICAgICAgIm1heCI6IGZhbHNlLAogICAgICAgICJtaW4iOiBmYWxzZSwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwb2ludHJhZGl1cyI6IDUsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogW10sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiBmYWxzZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJleHByIjogImxhYmVsX3JlcGxhY2Uoc3VtKHBpbG90X3hkc19yZHNfcmVqZWN0e2pvYj1cInBpbG90XCJ9KSBieSAobm9kZSwgZXJyKSwgXCJub2RlXCIsIFwiJDFcIiwgXCJub2RlXCIsIFwiLip+Lip+KC4qKX4uKlwiKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7IG5vZGUgfX0gKHt7ZXJyfX0pIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVGcm9tIjogbnVsbCwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aW1lU2hpZnQiOiBudWxsLAogICAgICAidGl0bGUiOiAiUmVqZWN0ZWQgUkRTIENvbmZpZ3MiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDAsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgImJ1Y2tldHMiOiBudWxsLAogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJuYW1lIjogbnVsbCwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6IG51bGwsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWF4IjogbnVsbCwKICAgICAgICAgICJtaW4iOiBudWxsLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UsCiAgICAgICAgImFsaWduTGV2ZWwiOiBudWxsCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHsKICAgICAgICAib3V0Ym91bmR8ODB8fGRlZmF1bHQtaHR0cC1iYWNrZW5kLmt1YmUtc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsIjogInJnYmEoMjU1LCAyNTUsIDI1NSwgMC45NykiCiAgICAgIH0sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiAiUHJvbWV0aGV1cyIsCiAgICAgICJmaWxsIjogMSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA3LAogICAgICAgICJ3IjogOCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA0NQogICAgICB9LAogICAgICAiaWQiOiA1MSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiBmYWxzZSwKICAgICAgICAibWF4IjogZmFsc2UsCiAgICAgICAgIm1pbiI6IGZhbHNlLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBvaW50cmFkaXVzIjogNSwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIm91dGJvdW5kfDgwfHxkZWZhdWx0LWh0dHAtYmFja2VuZC5rdWJlLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbCIsCiAgICAgICAgICAieWF4aXMiOiAxCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZXhwciI6ICJzdW0ocGlsb3RfeGRzX2Vkc19pbnN0YW5jZXN7am9iPVwicGlsb3RcIn0pIGJ5IChjbHVzdGVyKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7IGNsdXN0ZXIgfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZUZyb20iOiBudWxsLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpbWVTaGlmdCI6IG51bGwsCiAgICAgICJ0aXRsZSI6ICJFRFMgSW5zdGFuY2VzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAwLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJidWNrZXRzIjogbnVsbCwKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAibmFtZSI6IG51bGwsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiBudWxsLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1heCI6IG51bGwsCiAgICAgICAgICAibWluIjogbnVsbCwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlLAogICAgICAgICJhbGlnbkxldmVsIjogbnVsbAogICAgICB9CiAgICB9CiAgXSwKICAicmVmcmVzaCI6ICI1cyIsCiAgInNjaGVtYVZlcnNpb24iOiAxOCwKICAic3R5bGUiOiAiZGFyayIsCiAgInRhZ3MiOiBbXSwKICAidGVtcGxhdGluZyI6IHsKICAgICJsaXN0IjogW10KICB9LAogICJ0aW1lIjogewogICAgImZyb20iOiAibm93LTVtIiwKICAgICJ0byI6ICJub3ciCiAgfSwKICAidGltZXBpY2tlciI6IHsKICAgICJyZWZyZXNoX2ludGVydmFscyI6IFsKICAgICAgIjVzIiwKICAgICAgIjEwcyIsCiAgICAgICIzMHMiLAogICAgICAiMW0iLAogICAgICAiNW0iLAogICAgICAiMTVtIiwKICAgICAgIjMwbSIsCiAgICAgICIxaCIsCiAgICAgICIyaCIsCiAgICAgICIxZCIKICAgIF0sCiAgICAidGltZV9vcHRpb25zIjogWwogICAgICAiNW0iLAogICAgICAiMTVtIiwKICAgICAgIjFoIiwKICAgICAgIjZoIiwKICAgICAgIjEyaCIsCiAgICAgICIyNGgiLAogICAgICAiMmQiLAogICAgICAiN2QiLAogICAgICAiMzBkIgogICAgXQogIH0sCiAgInRpbWV6b25lIjogImJyb3dzZXIiLAogICJ0aXRsZSI6ICJJc3RpbyBQaWxvdCBEYXNoYm9hcmQiLAogICJ1aWQiOiAiMy0tTUxWWlprIiwKICAidmVyc2lvbiI6IDEKfQo="
        },
        {
          "filePath": "charts/grafana/fix_datasources.sh",
          "fileContents": "IyEvYmluL2Jhc2gKCnNldCAtZQoKVEhJU19ESVI9IiQoIGNkICIkKCBkaXJuYW1lICIke0JBU0hfU09VUkNFWzBdfSIgKSIgJiYgcHdkICkiClVYPSQodW5hbWUpCgpmb3IgZGIgaW4gIiR7VEhJU19ESVJ9Ii9kYXNoYm9hcmRzLyouanNvbjsgZG8KICAgIGlmIFtbICR7VVh9ID09ICJEYXJ3aW4iIF1dOyB0aGVuCiAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDE2CiAgICAgICAgc2VkIC1pICcnICdzLyR7RFNfUFJPTUVUSEVVU30vUHJvbWV0aGV1cy9nJyAiJGRiIgogICAgZWxzZQogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAxNgogICAgICAgIHNlZCAtaSAncy8ke0RTX1BST01FVEhFVVN9L1Byb21ldGhldXMvZycgIiRkYiIKICAgIGZpCmRvbmUK"
        },
        {
          "filePath": "charts/grafana/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZ3JhZmFuYS5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJncmFmYW5hLmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAiZ3JhZmFuYS5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/grafana/templates/configmap-custom-resources.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEtY3VzdG9tLXJlc291cmNlcwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdyYWZhbmEuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBpc3RpbzogZ3JhZmFuYQpkYXRhOgogIGN1c3RvbS1yZXNvdXJjZXMueWFtbDogfC0KICAgIHt7LSBpbmNsdWRlICJncmFmYW5hLWRlZmF1bHQueWFtbC50cGwiIC4gfCBpbmRlbnQgNH19CiAgcnVuLnNoOiB8LQogICAge3stIGluY2x1ZGUgImluc3RhbGwtY3VzdG9tLXJlc291cmNlcy5zaC50cGwiIC4gfCBpbmRlbnQgNH19Cg=="
        },
        {
          "filePath": "charts/grafana/templates/configmap-dashboards.yaml",
          "fileContents": "e3stICRmaWxlcyA6PSAuRmlsZXMgfX0Ke3stIHJhbmdlICRwYXRoLCAkYnl0ZXMgOj0gLkZpbGVzLkdsb2IgImRhc2hib2FyZHMvKi5qc29uIiB9fQp7ey0gJGZpbGVuYW1lIDo9IHRyaW1TdWZmaXggKGV4dCAkcGF0aCkgKGJhc2UgJHBhdGgpIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1ncmFmYW5hLWNvbmZpZ3VyYXRpb24tZGFzaGJvYXJkcy17eyAkZmlsZW5hbWUgfX0KICBuYW1lc3BhY2U6IHt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJncmFmYW5hLm5hbWUiICQgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5jaGFydCIgJCB9fQogICAgaGVyaXRhZ2U6IHt7ICQuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IGdyYWZhbmEKZGF0YToKICB7eyBiYXNlICRwYXRoIH19OiAne3sgJGZpbGVzLkdldCAkcGF0aCB9fScKLS0tCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/grafana/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IGdyYWZhbmEKZGF0YToKe3stIGlmIC5WYWx1ZXMuZGF0YXNvdXJjZXMgfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuZGF0YXNvdXJjZXMgfX0KICB7eyAka2V5IH19OiB8Cnt7IHRvWWFtbCAkdmFsdWUgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey0gaWYgLlZhbHVlcy5kYXNoYm9hcmRQcm92aWRlcnMgfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuZGFzaGJvYXJkUHJvdmlkZXJzIH19CiAge3sgJGtleSB9fTogfAp7eyB0b1lhbWwgJHZhbHVlIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/grafana/templates/create-custom-resources-job.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp7ey0gaWYgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQppbWFnZVB1bGxTZWNyZXRzOgp7ey0gcmFuZ2UgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQogIC0gbmFtZToge3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdyYWZhbmEuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyJhdXRoZW50aWNhdGlvbi5pc3Rpby5pbyJdICMgbmVlZGVkIHRvIGNyZWF0ZSBkZWZhdWx0IGF1dGhuIHBvbGljeQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyIqIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJncmFmYW5hLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Ci0tLQphcGlWZXJzaW9uOiBiYXRjaC92MQpraW5kOiBKb2IKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwte3sgLlZhbHVlcy5nbG9iYWwudGFnIHwgcHJpbnRmICIldiIgfCB0cnVuYyAzMiB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1pbnN0YWxsCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6IGlzdGlvLWdyYWZhbmEtcG9zdC1pbnN0YWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGlzdGlvLWdyYWZhbmEKICAgICAgICBjaGFydDoge3sgdGVtcGxhdGUgImdyYWZhbmEuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tZ3JhZmFuYS1wb3N0LWluc3RhbGwtYWNjb3VudAogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZToga3ViZWN0bAogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0va3ViZWN0bDp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0iCiAgICAgICAgICBjb21tYW5kOiBbICIvYmluL2Jhc2giLCAiL3RtcC9ncmFmYW5hL3J1bi5zaCIsICIvdG1wL2dyYWZhbmEvY3VzdG9tLXJlc291cmNlcy55YW1sIiBdCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAiL3RtcC9ncmFmYW5hIgogICAgICAgICAgICAgIG5hbWU6IHRtcC1jb25maWdtYXAtZ3JhZmFuYQogICAgICB2b2x1bWVzOgogICAgICAgIC0gbmFtZTogdG1wLWNvbmZpZ21hcC1ncmFmYW5hCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGlzdGlvLWdyYWZhbmEtY3VzdG9tLXJlc291cmNlcwogICAgICByZXN0YXJ0UG9saWN5OiBPbkZhaWx1cmUKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/grafana/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGdyYWZhbmEKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogZ3JhZmFuYQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGdyYWZhbmEKICAgICAgICBjaGFydDoge3sgdGVtcGxhdGUgImdyYWZhbmEuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBwcm9tZXRoZXVzLmlvL3NjcmFwZTogInRydWUiCiAgICBzcGVjOgogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcnVuQXNVc2VyOiA0NzIKICAgICAgICBmc0dyb3VwOiA0NzIKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAgICAgaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAgICAgICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiB7eyAuQ2hhcnQuTmFtZSB9fQogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmltYWdlLnJlcG9zaXRvcnkgfX06e3sgLlZhbHVlcy5pbWFnZS50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDMwMDAKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9sb2dpbgogICAgICAgICAgICAgIHBvcnQ6IDMwMDAKICAgICAgICAgIGVudjoKICAgICAgICAgIC0gbmFtZTogR1JBRkFOQV9QT1JUCiAgICAgICAgICAgIHZhbHVlOiAiMzAwMCIKe3stIGlmIC5WYWx1ZXMuc2VjdXJpdHkuZW5hYmxlZCB9fQogICAgICAgICAgLSBuYW1lOiBHRl9TRUNVUklUWV9BRE1JTl9VU0VSCiAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyAuVmFsdWVzLnNlY3VyaXR5LnNlY3JldE5hbWUgfX0KICAgICAgICAgICAgICAgIGtleToge3sgLlZhbHVlcy5zZWN1cml0eS51c2VybmFtZUtleSB9fQogICAgICAgICAgLSBuYW1lOiBHRl9TRUNVUklUWV9BRE1JTl9QQVNTV09SRAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgc2VjcmV0S2V5UmVmOgogICAgICAgICAgICAgICAgbmFtZToge3sgLlZhbHVlcy5zZWN1cml0eS5zZWNyZXROYW1lIH19CiAgICAgICAgICAgICAgICBrZXk6IHt7IC5WYWx1ZXMuc2VjdXJpdHkucGFzc3BocmFzZUtleSB9fQogICAgICAgICAgLSBuYW1lOiBHRl9BVVRIX0JBU0lDX0VOQUJMRUQKICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgLSBuYW1lOiBHRl9BVVRIX0FOT05ZTU9VU19FTkFCTEVECiAgICAgICAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAgICAgICAtIG5hbWU6IEdGX0FVVEhfRElTQUJMRV9MT0dJTl9GT1JNCiAgICAgICAgICAgIHZhbHVlOiAiZmFsc2UiCnt7LSBlbHNlIH19CiAgICAgICAgICAtIG5hbWU6IEdGX0FVVEhfQkFTSUNfRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgICAgLSBuYW1lOiBHRl9BVVRIX0FOT05ZTU9VU19FTkFCTEVECiAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgIC0gbmFtZTogR0ZfQVVUSF9BTk9OWU1PVVNfT1JHX1JPTEUKICAgICAgICAgICAgdmFsdWU6IEFkbWluCnt7LSBlbmQgfX0KICAgICAgICAgIC0gbmFtZTogR0ZfUEFUSFNfREFUQQogICAgICAgICAgICB2YWx1ZTogL2RhdGEvZ3JhZmFuYQogICAgICAgICAgcmVzb3VyY2VzOgp7ey0gaWYgLlZhbHVlcy5yZXNvdXJjZXMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbHNlIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbmQgfX0KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgIC0gbmFtZTogZGF0YQogICAgICAgICAgICBtb3VudFBhdGg6IC9kYXRhL2dyYWZhbmEKICAgICAgICAgIHt7LSByYW5nZSAkcGF0aCwgJGJ5dGVzIDo9IC5GaWxlcy5HbG9iICJkYXNoYm9hcmRzLyouanNvbiIgfX0KICAgICAgICAgIHt7LSAkZmlsZW5hbWUgOj0gdHJpbVN1ZmZpeCAoZXh0ICRwYXRoKSAoYmFzZSAkcGF0aCkgfX0KICAgICAgICAgIC0gbmFtZTogZGFzaGJvYXJkcy1pc3Rpby17eyAkZmlsZW5hbWUgfX0KICAgICAgICAgICAgbW91bnRQYXRoOiAiL3Zhci9saWIvZ3JhZmFuYS9kYXNoYm9hcmRzL2lzdGlvL3t7IGJhc2UgJHBhdGggfX0iCiAgICAgICAgICAgIHN1YlBhdGg6IHt7IGJhc2UgJHBhdGggfX0KICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIC0gbmFtZTogY29uZmlnCiAgICAgICAgICAgIG1vdW50UGF0aDogIi9ldGMvZ3JhZmFuYS9wcm92aXNpb25pbmcvZGF0YXNvdXJjZXMvZGF0YXNvdXJjZXMueWFtbCIKICAgICAgICAgICAgc3ViUGF0aDogZGF0YXNvdXJjZXMueWFtbAogICAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgICAgbW91bnRQYXRoOiAiL2V0Yy9ncmFmYW5hL3Byb3Zpc2lvbmluZy9kYXNoYm9hcmRzL2Rhc2hib2FyZHByb3ZpZGVycy55YW1sIgogICAgICAgICAgICBzdWJQYXRoOiBkYXNoYm9hcmRwcm92aWRlcnMueWFtbAogICAgICBhZmZpbml0eToKICAgICAge3stIGluY2x1ZGUgIm5vZGVhZmZpbml0eSIgLiB8IGluZGVudCA2IH19CiAgICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQp7ey0gaWYgLlZhbHVlcy50b2xlcmF0aW9ucyB9fQogICAgICB0b2xlcmF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMudG9sZXJhdGlvbnMgfCBpbmRlbnQgNiB9fQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY29uZmlnCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogaXN0aW8tZ3JhZmFuYQogICAgICAtIG5hbWU6IGRhdGEKe3stIGlmIC5WYWx1ZXMucGVyc2lzdCB9fQogICAgICAgIHBlcnNpc3RlbnRWb2x1bWVDbGFpbToKICAgICAgICAgIGNsYWltTmFtZTogaXN0aW8tZ3JhZmFuYS1wdmMKe3stIGVsc2UgfX0KICAgICAgICBlbXB0eURpcjoge30Ke3stIGVuZCB9fQp7ey0gcmFuZ2UgJHBhdGgsICRieXRlcyA6PSAuRmlsZXMuR2xvYiAiZGFzaGJvYXJkcy8qLmpzb24iIH19Cnt7LSAkZmlsZW5hbWUgOj0gdHJpbVN1ZmZpeCAoZXh0ICRwYXRoKSAoYmFzZSAkcGF0aCkgfX0KICAgICAgLSBuYW1lOiBkYXNoYm9hcmRzLWlzdGlvLXt7ICRmaWxlbmFtZSB9fQogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6ICBpc3Rpby1ncmFmYW5hLWNvbmZpZ3VyYXRpb24tZGFzaGJvYXJkcy17eyAkZmlsZW5hbWUgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/grafana/templates/grafana-ports-mtls.yaml",
          "fileContents": "e3sgZGVmaW5lICJncmFmYW5hLWRlZmF1bHQueWFtbC50cGwiIH19CmFwaVZlcnNpb246IGF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvL3YxYWxwaGExCmtpbmQ6IFBvbGljeQptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hLXBvcnRzLW10bHMtZGlzYWJsZWQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHRhcmdldHM6CiAgLSBuYW1lOiBncmFmYW5hCiAgICBwb3J0czoKICAgIC0gbnVtYmVyOiB7eyAuVmFsdWVzLnNlcnZpY2UuZXh0ZXJuYWxQb3J0IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/grafana/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJncmFmYW5hLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgcnVsZXM6Cnt7LSBpZiAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgaWYgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgZWxzZSB9fSAvIHt7IGVuZCB9fQogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBncmFmYW5hCiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IDMwMDAKICAgIHt7LSBlbmQgLX19Cnt7LSBlbHNlIH19CiAgICAtIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIHBhdGg6IHt7IGlmIC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgLlZhbHVlcy5jb250ZXh0UGF0aCB9fSB7eyBlbHNlIH19IC8ge3sgZW5kIH19CiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IGdyYWZhbmEKICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDogMzAwMAp7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuaW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLmluZ3Jlc3MudGxzIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/grafana/templates/pvc.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMucGVyc2lzdCB9fQpraW5kOiBQZXJzaXN0ZW50Vm9sdW1lQ2xhaW0KYXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tZ3JhZmFuYS1wdmMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImdyYWZhbmEubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHN0b3JhZ2VDbGFzc05hbWU6IHt7IC5WYWx1ZXMuc3RvcmFnZUNsYXNzTmFtZSB9fQogIGFjY2Vzc01vZGVzOgogICAgLSB7eyAuVmFsdWVzLmFjY2Vzc01vZGUgfX0KICByZXNvdXJjZXM6CiAgICByZXF1ZXN0czoKICAgICAgc3RvcmFnZTogNUdpCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/grafana/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBncmFmYW5hCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImdyYWZhbmEuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgdHlwZToge3sgLlZhbHVlcy5zZXJ2aWNlLnR5cGUgfX0KICBwb3J0czoKICAgIC0gcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmV4dGVybmFsUG9ydCB9fQogICAgICB0YXJnZXRQb3J0OiAzMDAwCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgbmFtZToge3sgLlZhbHVlcy5zZXJ2aWNlLm5hbWUgfX0KICBzZWxlY3RvcjoKICAgIGFwcDogZ3JhZmFuYQp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlLmxvYWRCYWxhbmNlcklQIH19CiAgbG9hZEJhbGFuY2VySVA6ICJ7eyAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0iCnt7LSBlbmQgfX0KICB7e2lmIC5WYWx1ZXMuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXN9fQogIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoKICAgIHt7cmFuZ2UgJHJhbmdlTGlzdCA6PSAuVmFsdWVzLnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzfX0KICAgIC0ge3sgJHJhbmdlTGlzdCB9fQogICAge3tlbmR9fQogIHt7ZW5kfX0="
        },
        {
          "filePath": "charts/grafana/templates/tests/test-grafana-connection.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmVuYWJsZUhlbG1UZXN0IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZ3JhZmFuYS5mdWxsbmFtZSIgLiB9fS10ZXN0CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IGdyYWZhbmEtdGVzdAogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJncmFmYW5hLmNoYXJ0IiAuIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IGdyYWZhbmEKICBhbm5vdGF0aW9uczoKICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICBoZWxtLnNoL2hvb2s6IHRlc3Qtc3VjY2VzcwpzcGVjOgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgY29udGFpbmVyczoKICAgIC0gbmFtZTogInt7IHRlbXBsYXRlICJncmFmYW5hLmZ1bGxuYW1lIiAuIH19LXRlc3QiCiAgICAgIGltYWdlOiB7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0ve3sgLlZhbHVlcy5nbG9iYWwucHJveHkuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19CiAgICAgIGltYWdlUHVsbFBvbGljeTogInt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fSIKICAgICAgY29tbWFuZDogWydjdXJsJ10KICAgICAgYXJnczogWydodHRwOi8vZ3JhZmFuYTp7eyAuVmFsdWVzLmdyYWZhbmEuc2VydmljZS5leHRlcm5hbFBvcnQgfX0nXQogIHJlc3RhcnRQb2xpY3k6IE5ldmVyCiAgYWZmaW5pdHk6CiAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDQgfX0KICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/grafana/values.yaml",
          "fileContents": "IwojIGFkZG9uIGdyYWZhbmEgY29uZmlndXJhdGlvbgojCmVuYWJsZWQ6IGZhbHNlCnJlcGxpY2FDb3VudDogMQppbWFnZToKICByZXBvc2l0b3J5OiBncmFmYW5hL2dyYWZhbmEKICB0YWc6IDYuMS42CmluZ3Jlc3M6CiAgZW5hYmxlZDogZmFsc2UKICAjIyBVc2VkIHRvIGNyZWF0ZSBhbiBJbmdyZXNzIHJlY29yZC4KICBob3N0czoKICAgIC0gZ3JhZmFuYS5sb2NhbAogIGFubm90YXRpb25zOgogICAgIyBrdWJlcm5ldGVzLmlvL2luZ3Jlc3MuY2xhc3M6IG5naW54CiAgICAjIGt1YmVybmV0ZXMuaW8vdGxzLWFjbWU6ICJ0cnVlIgogIHRsczoKICAgICMgU2VjcmV0cyBtdXN0IGJlIG1hbnVhbGx5IGNyZWF0ZWQgaW4gdGhlIG5hbWVzcGFjZS4KICAgICMgLSBzZWNyZXROYW1lOiBncmFmYW5hLXRscwogICAgIyAgIGhvc3RzOgogICAgIyAgICAgLSBncmFmYW5hLmxvY2FsCnBlcnNpc3Q6IGZhbHNlCnN0b3JhZ2VDbGFzc05hbWU6ICIiCmFjY2Vzc01vZGU6IFJlYWRXcml0ZU1hbnkKc2VjdXJpdHk6CiAgZW5hYmxlZDogZmFsc2UKICBzZWNyZXROYW1lOiBncmFmYW5hCiAgdXNlcm5hbWVLZXk6IHVzZXJuYW1lCiAgcGFzc3BocmFzZUtleTogcGFzc3BocmFzZQpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10KCmNvbnRleHRQYXRoOiAvZ3JhZmFuYQpzZXJ2aWNlOgogIGFubm90YXRpb25zOiB7fQogIG5hbWU6IGh0dHAKICB0eXBlOiBDbHVzdGVySVAKICBleHRlcm5hbFBvcnQ6IDMwMDAKICBsb2FkQmFsYW5jZXJJUDoKICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6CgpkYXRhc291cmNlczoKICBkYXRhc291cmNlcy55YW1sOgogICAgYXBpVmVyc2lvbjogMQogICAgZGF0YXNvdXJjZXM6CiAgICAtIG5hbWU6IFByb21ldGhldXMKICAgICAgdHlwZTogcHJvbWV0aGV1cwogICAgICBvcmdJZDogMQogICAgICB1cmw6IGh0dHA6Ly9wcm9tZXRoZXVzOjkwOTAKICAgICAgYWNjZXNzOiBwcm94eQogICAgICBpc0RlZmF1bHQ6IHRydWUKICAgICAganNvbkRhdGE6CiAgICAgICAgdGltZUludGVydmFsOiA1cwogICAgICBlZGl0YWJsZTogdHJ1ZQoKZGFzaGJvYXJkUHJvdmlkZXJzOgogIGRhc2hib2FyZHByb3ZpZGVycy55YW1sOgogICAgYXBpVmVyc2lvbjogMQogICAgcHJvdmlkZXJzOgogICAgLSBuYW1lOiAnaXN0aW8nCiAgICAgIG9yZ0lkOiAxCiAgICAgIGZvbGRlcjogJ2lzdGlvJwogICAgICB0eXBlOiBmaWxlCiAgICAgIGRpc2FibGVEZWxldGlvbjogZmFsc2UKICAgICAgb3B0aW9uczoKICAgICAgICBwYXRoOiAvdmFyL2xpYi9ncmFmYW5hL2Rhc2hib2FyZHMvaXN0aW8K"
        },
        {
          "filePath": "charts/istiocoredns/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IElzdGlvIENvcmVETlMgcHJvdmlkZXMgRE5TIHJlc29sdXRpb24gZm9yIHNlcnZpY2VzIGluIG11bHRpY2x1c3RlciBzZXR1cHMuCm5hbWU6IGlzdGlvY29yZWRucwp2ZXJzaW9uOiAxLjEuMAphcHBWZXJzaW9uOiAwLjEKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCg=="
        },
        {
          "filePath": "charts/istiocoredns/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiaXN0aW9jb3JlZG5zLm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KSWYgcmVsZWFzZSBuYW1lIGNvbnRhaW5zIGNoYXJ0IG5hbWUgaXQgd2lsbCBiZSB1c2VkIGFzIGEgZnVsbCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvY29yZWRucy5mdWxsbmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgLX19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gLlJlbGVhc2UuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBjaGFydCBuYW1lIGFuZCB2ZXJzaW9uIGFzIHVzZWQgYnkgdGhlIGNoYXJ0IGxhYmVsLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvY29yZWRucy5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/istiocoredns/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpb2NvcmVkbnMKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJpc3Rpb2NvcmVkbnMubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJpc3Rpb2NvcmVkbnMuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyJuZXR3b3JraW5nLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiZ2V0IiwgIndhdGNoIiwgImxpc3QiXQo="
        },
        {
          "filePath": "charts/istiocoredns/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8taXN0aW9jb3JlZG5zLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJpc3Rpb2NvcmVkbnMubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJpc3Rpb2NvcmVkbnMuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvY29yZWRucwpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGlzdGlvY29yZWRucy1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "charts/istiocoredns/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNvcmVkbnMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KZGF0YToKICBDb3JlZmlsZTogfAogICAgLjo1MyB7CiAgICAgICAgICBlcnJvcnMKICAgICAgICAgIGhlYWx0aAogICAgICAgICAgcHJveHkgZ2xvYmFsIDEyNy4wLjAuMTo4MDUzIHsKICAgICAgICAgICAgcHJvdG9jb2wgZ3JwYyBpbnNlY3VyZQogICAgICAgICAgfQogICAgICAgICAgcHJvbWV0aGV1cyA6OTE1MwogICAgICAgICAgcHJveHkgLiAvZXRjL3Jlc29sdi5jb25mCiAgICAgICAgICBjYWNoZSAzMAogICAgICAgICAgcmVsb2FkCiAgICAgICAgfQotLS0K"
        },
        {
          "filePath": "charts/istiocoredns/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvY29yZWRucwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiaXN0aW9jb3JlZG5zLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiaXN0aW9jb3JlZG5zLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogaXN0aW9jb3JlZG5zCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogaXN0aW9jb3JlZG5zCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IGlzdGlvY29yZWRucwogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAiaXN0aW9jb3JlZG5zLmNoYXJ0IiAuIH19CiAgICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICAgIGFubm90YXRpb25zOgogICAgICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGlzdGlvY29yZWRucy1zZXJ2aWNlLWFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBjb3JlZG5zCiAgICAgICAgaW1hZ2U6IHt7IC5WYWx1ZXMuY29yZUROU0ltYWdlIH19CiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICBhcmdzOiBbICItY29uZiIsICIvZXRjL2NvcmVkbnMvQ29yZWZpbGUiIF0KICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgICBtb3VudFBhdGg6IC9ldGMvY29yZWRucwogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucwogICAgICAgICAgcHJvdG9jb2w6IFVEUAogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucy10Y3AKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkxNTMKICAgICAgICAgIG5hbWU6IG1ldHJpY3MKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcGF0aDogL2hlYWx0aAogICAgICAgICAgICBwb3J0OiA4MDgwCiAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNjAKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgICAgICBzdWNjZXNzVGhyZXNob2xkOiAxCiAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiA1CiAgICAgICAgcmVzb3VyY2VzOgp7ey0gaWYgLlZhbHVlcy5yZXNvdXJjZXMgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMucmVzb3VyY2VzIHwgaW5kZW50IDEwIH19Cnt7LSBlbHNlIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UmVzb3VyY2VzIHwgaW5kZW50IDEwIH19Cnt7LSBlbmQgfX0KICAgICAgLSBuYW1lOiBpc3Rpby1jb3JlZG5zLXBsdWdpbgogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9wbHVnaW4KICAgICAgICBpbWFnZToge3sgLlZhbHVlcy5jb3JlRE5TUGx1Z2luSW1hZ2UgfX0KICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDogODA1MwogICAgICAgICAgbmFtZTogZG5zLWdycGMKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTAgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTAgfX0Ke3stIGVuZCB9fQogICAgICBkbnNQb2xpY3k6IERlZmF1bHQKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogY29yZWRucwogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAtIGtleTogQ29yZWZpbGUKICAgICAgICAgICAgcGF0aDogQ29yZWZpbGUKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0Ke3stIGlmIC5WYWx1ZXMudG9sZXJhdGlvbnMgfX0KICAgICAgdG9sZXJhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnRvbGVyYXRpb25zIHwgaW5kZW50IDYgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/istiocoredns/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpb2NvcmVkbnMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBzZWxlY3RvcjoKICAgIGFwcDogaXN0aW9jb3JlZG5zCiAgcG9ydHM6CiAgLSBuYW1lOiBkbnMKICAgIHBvcnQ6IDUzCiAgICBwcm90b2NvbDogVURQCiAgLSBuYW1lOiBkbnMtdGNwCiAgICBwb3J0OiA1MwogICAgcHJvdG9jb2w6IFRDUAo="
        },
        {
          "filePath": "charts/istiocoredns/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvY29yZWRucy1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImlzdGlvY29yZWRucy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0K"
        },
        {
          "filePath": "charts/istiocoredns/values.yaml",
          "fileContents": "IwojIGFkZG9uIGlzdGlvY29yZWRucyB0cmFjaW5nIGNvbmZpZ3VyYXRpb24KIwplbmFibGVkOiBmYWxzZQpyZXBsaWNhQ291bnQ6IDEKY29yZUROU0ltYWdlOiBjb3JlZG5zL2NvcmVkbnM6MS4xLjIKIyBTb3VyY2UgY29kZSBmb3IgdGhlIHBsdWdpbiBjYW4gYmUgZm91bmQgYXQKIyBodHRwczovL2dpdGh1Yi5jb20vaXN0aW8tZWNvc3lzdGVtL2lzdGlvLWNvcmVkbnMtcGx1Z2luCiMgVGhlIHBsdWdpbiBsaXN0ZW5zIGZvciBETlMgcmVxdWVzdHMgZnJvbSBjb3JlZG5zIHNlcnZlciBhdCAxMjcuMC4wLjE6ODA1Mwpjb3JlRE5TUGx1Z2luSW1hZ2U6IGlzdGlvL2NvcmVkbnMtcGx1Z2luOjAuMi1pc3Rpby0xLjEKbm9kZVNlbGVjdG9yOiB7fQp0b2xlcmF0aW9uczogW10KCiMgU3BlY2lmeSB0aGUgcG9kIGFudGktYWZmaW5pdHkgdGhhdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB3aGljaCBub2RlcwojIHlvdXIgcG9kIGlzIGVsaWdpYmxlIHRvIGJlIHNjaGVkdWxlZCBiYXNlZCBvbiBsYWJlbHMgb24gcG9kcyB0aGF0IGFyZQojIGFscmVhZHkgcnVubmluZyBvbiB0aGUgbm9kZSByYXRoZXIgdGhhbiBiYXNlZCBvbiBsYWJlbHMgb24gbm9kZXMuCiMgVGhlcmUgYXJlIGN1cnJlbnRseSB0d28gdHlwZXMgb2YgYW50aS1hZmZpbml0eToKIyAgICAicmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyAgICAicHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgd2hpY2ggZGVub3RlIOKAnGhhcmTigJ0gdnMuIOKAnHNvZnTigJ0gcmVxdWlyZW1lbnRzLCB5b3UgY2FuIGRlZmluZSB5b3VyIHZhbHVlcwojIGluICJwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yIiBhbmQgInBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yIgojIGNvcnJlc3BvbmRpbmdseS4KIyBGb3IgZXhhbXBsZToKIyBwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOgojIC0ga2V5OiBzZWN1cml0eQojICAgb3BlcmF0b3I6IEluCiMgICB2YWx1ZXM6IFMxLFMyCiMgICB0b3BvbG9neUtleTogImt1YmVybmV0ZXMuaW8vaG9zdG5hbWUiCiMgVGhpcyBwb2QgYW50aS1hZmZpbml0eSBydWxlIHNheXMgdGhhdCB0aGUgcG9kIHJlcXVpcmVzIG5vdCB0byBiZSBzY2hlZHVsZWQKIyBvbnRvIGEgbm9kZSBpZiB0aGF0IG5vZGUgaXMgYWxyZWFkeSBydW5uaW5nIGEgcG9kIHdpdGggbGFiZWwgaGF2aW5nIGtleQojIOKAnHNlY3VyaXR54oCdIGFuZCB2YWx1ZSDigJxTMeKAnS4KcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjogW10KcG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3I6IFtdCg=="
        },
        {
          "filePath": "charts/kiali/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEtpYWxpIGlzIGFuIG9wZW4gc291cmNlIHByb2plY3QgZm9yIHNlcnZpY2UgbWVzaCBvYnNlcnZhYmlsaXR5LCByZWZlciB0byBodHRwczovL3d3dy5raWFsaS5pbyBmb3IgZGV0YWlscy4KbmFtZToga2lhbGkKdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMC4yMAp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIK"
        },
        {
          "filePath": "charts/kiali/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAia2lhbGkubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAia2lhbGkuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJraWFsaS5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/kiali/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImtpYWxpLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAia2lhbGkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczoKICAtIGNvbmZpZ21hcHMKICAtIGVuZHBvaW50cwogIC0gbmFtZXNwYWNlcwogIC0gbm9kZXMKICAtIHBvZHMKICAtIHBvZHMvbG9nCiAgLSByZXBsaWNhdGlvbmNvbnRyb2xsZXJzCiAgLSBzZXJ2aWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczogWyJleHRlbnNpb25zIiwgImFwcHMiXQogIHJlc291cmNlczoKICAtIGRlcGxveW1lbnRzCiAgLSByZXBsaWNhc2V0cwogIC0gc3RhdGVmdWxzZXRzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbImF1dG9zY2FsaW5nIl0KICByZXNvdXJjZXM6CiAgLSBob3Jpem9udGFscG9kYXV0b3NjYWxlcnMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsiYmF0Y2giXQogIHJlc291cmNlczoKICAtIGNyb25qb2JzCiAgLSBqb2JzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbImNvbmZpZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gYWRhcHRlcnMKICAtIGFwaWtleXMKICAtIGJ5cGFzc2VzCiAgLSBhdXRob3JpemF0aW9ucwogIC0gY2hlY2tub3RoaW5ncwogIC0gY2lyY29udXNlcwogIC0gY2xvdWR3YXRjaGVzCiAgLSBkZW5pZXJzCiAgLSBkb2dzdGF0c2RzCiAgLSBlZGdlcwogIC0gZmx1ZW50ZHMKICAtIGhhbmRsZXJzCiAgLSBpbnN0YW5jZXMKICAtIGt1YmVybmV0ZXNlbnZzCiAgLSBrdWJlcm5ldGVzZXMKICAtIGxpc3RjaGVja2VycwogIC0gbGlzdGVudHJpZXMKICAtIGxvZ2VudHJpZXMKICAtIG1lbXF1b3RhcwogIC0gbWV0cmljcwogIC0gbm9vcHMKICAtIG9wYXMKICAtIHByb21ldGhldXNlcwogIC0gcXVvdGFzCiAgLSBxdW90YXNwZWNiaW5kaW5ncwogIC0gcXVvdGFzcGVjcwogIC0gcmJhY3MKICAtIHJlZGlzcXVvdGFzCiAgLSByZXBvcnRub3RoaW5ncwogIC0gcnVsZXMKICAtIHNpZ25hbGZ4cwogIC0gc29sYXJ3aW5kc2VzCiAgLSBzdGFja2RyaXZlcnMKICAtIHN0YXRzZHMKICAtIHN0ZGlvcwogIC0gdGVtcGxhdGVzCiAgLSB0cmFjZXNwYW5zCiAgLSB6aXBraW5zCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIGRlbGV0ZQogIC0gZ2V0CiAgLSBsaXN0CiAgLSBwYXRjaAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsibmV0d29ya2luZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gZGVzdGluYXRpb25ydWxlcwogIC0gZ2F0ZXdheXMKICAtIHNlcnZpY2VlbnRyaWVzCiAgLSB2aXJ0dWFsc2VydmljZXMKICB2ZXJiczoKICAtIGNyZWF0ZQogIC0gZGVsZXRlCiAgLSBnZXQKICAtIGxpc3QKICAtIHBhdGNoCiAgLSB3YXRjaAotIGFwaUdyb3VwczogWyJhdXRoZW50aWNhdGlvbi5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gbWVzaHBvbGljaWVzCiAgLSBwb2xpY2llcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBkZWxldGUKICAtIGdldAogIC0gbGlzdAogIC0gcGF0Y2gKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbInJiYWMuaXN0aW8uaW8iXQogIHJlc291cmNlczoKICAtIGNsdXN0ZXJyYmFjY29uZmlncwogIC0gcmJhY2NvbmZpZ3MKICAtIHNlcnZpY2Vyb2xlYmluZGluZ3MKICAtIHNlcnZpY2Vyb2xlcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSBkZWxldGUKICAtIGdldAogIC0gbGlzdAogIC0gcGF0Y2gKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbIm1vbml0b3Jpbmcua2lhbGkuaW8iXQogIHJlc291cmNlczoKICAtIG1vbml0b3JpbmdkYXNoYm9hcmRzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZToga2lhbGktdmlld2VyCiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAia2lhbGkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJraWFsaS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOgogIC0gY29uZmlnbWFwcwogIC0gZW5kcG9pbnRzCiAgLSBuYW1lc3BhY2VzCiAgLSBub2RlcwogIC0gcG9kcwogIC0gcG9kcy9sb2cKICAtIHJlcGxpY2F0aW9uY29udHJvbGxlcnMKICAtIHNlcnZpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbImV4dGVuc2lvbnMiLCAiYXBwcyJdCiAgcmVzb3VyY2VzOgogIC0gZGVwbG95bWVudHMKICAtIHJlcGxpY2FzZXRzCiAgLSBzdGF0ZWZ1bHNldHMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsiYXV0b3NjYWxpbmciXQogIHJlc291cmNlczoKICAtIGhvcml6b250YWxwb2RhdXRvc2NhbGVycwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczogWyJiYXRjaCJdCiAgcmVzb3VyY2VzOgogIC0gY3JvbmpvYnMKICAtIGpvYnMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsiY29uZmlnLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6CiAgLSBhZGFwdGVycwogIC0gYXBpa2V5cwogIC0gYnlwYXNzZXMKICAtIGF1dGhvcml6YXRpb25zCiAgLSBjaGVja25vdGhpbmdzCiAgLSBjaXJjb251c2VzCiAgLSBjbG91ZHdhdGNoZXMKICAtIGRlbmllcnMKICAtIGRvZ3N0YXRzZHMKICAtIGVkZ2VzCiAgLSBmbHVlbnRkcwogIC0gaGFuZGxlcnMKICAtIGluc3RhbmNlcwogIC0ga3ViZXJuZXRlc2VudnMKICAtIGt1YmVybmV0ZXNlcwogIC0gbGlzdGNoZWNrZXJzCiAgLSBsaXN0ZW50cmllcwogIC0gbG9nZW50cmllcwogIC0gbWVtcXVvdGFzCiAgLSBtZXRyaWNzCiAgLSBub29wcwogIC0gb3BhcwogIC0gcHJvbWV0aGV1c2VzCiAgLSBxdW90YXMKICAtIHF1b3Rhc3BlY2JpbmRpbmdzCiAgLSBxdW90YXNwZWNzCiAgLSByYmFjcwogIC0gcmVkaXNxdW90YXMKICAtIHJlcG9ydG5vdGhpbmdzCiAgLSBydWxlcwogIC0gc2lnbmFsZnhzCiAgLSBzb2xhcndpbmRzZXMKICAtIHN0YWNrZHJpdmVycwogIC0gc3RhdHNkcwogIC0gc3RkaW9zCiAgLSB0ZW1wbGF0ZXMKICAtIHRyYWNlc3BhbnMKICAtIHppcGtpbnMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsibmV0d29ya2luZy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gZGVzdGluYXRpb25ydWxlcwogIC0gZ2F0ZXdheXMKICAtIHNlcnZpY2VlbnRyaWVzCiAgLSB2aXJ0dWFsc2VydmljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsiYXV0aGVudGljYXRpb24uaXN0aW8uaW8iXQogIHJlc291cmNlczoKICAtIG1lc2hwb2xpY2llcwogIC0gcG9saWNpZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6IFsicmJhYy5pc3Rpby5pbyJdCiAgcmVzb3VyY2VzOgogIC0gY2x1c3RlcnJiYWNjb25maWdzCiAgLSByYmFjY29uZmlncwogIC0gc2VydmljZXJvbGViaW5kaW5ncwogIC0gc2VydmljZXJvbGVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOiBbIm1vbml0b3Jpbmcua2lhbGkuaW8iXQogIHJlc291cmNlczoKICAtIG1vbml0b3JpbmdkYXNoYm9hcmRzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QK"
        },
        {
          "filePath": "charts/kiali/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8ta2lhbGktYWRtaW4tcm9sZS1iaW5kaW5nLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImtpYWxpLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAia2lhbGkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGtpYWxpe3stIGlmIC5WYWx1ZXMuZGFzaGJvYXJkLnZpZXdPbmx5TW9kZSB9fS12aWV3ZXJ7ey0gZW5kIH19CnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToga2lhbGktc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/kiali/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJraWFsaS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImtpYWxpLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpkYXRhOgogIGNvbmZpZy55YW1sOiB8CiAgICBpc3Rpb19uYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgYXV0aDoKICAgICAgc3RyYXRlZ3k6ICJsb2dpbiIKICAgIHNlcnZlcjoKICAgICAgcG9ydDogMjAwMDEKe3stIGlmIC5WYWx1ZXMuY29udGV4dFBhdGggfX0KICAgICAgd2ViX3Jvb3Q6IHt7IC5WYWx1ZXMuY29udGV4dFBhdGggfX0Ke3stIGVuZCB9fQogICAgZXh0ZXJuYWxfc2VydmljZXM6CiAgICAgIHRyYWNpbmc6CiAgICAgICAgdXJsOiB7eyAuVmFsdWVzLmRhc2hib2FyZC5qYWVnZXJVUkwgfX0KICAgICAgZ3JhZmFuYToKICAgICAgICB1cmw6IHt7IC5WYWx1ZXMuZGFzaGJvYXJkLmdyYWZhbmFVUkwgfX0KICAgICAgcHJvbWV0aGV1czoKICAgICAgICB1cmw6IHt7IC5WYWx1ZXMucHJvbWV0aGV1c0FkZHIgfX0K"
        },
        {
          "filePath": "charts/kiali/templates/demosecret.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuY3JlYXRlRGVtb1NlY3JldCB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZToge3sgLlZhbHVlcy5kYXNoYm9hcmQuc2VjcmV0TmFtZSB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAia2lhbGkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJraWFsaS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KdHlwZTogT3BhcXVlCmRhdGE6CiAgdXNlcm5hbWU6IFlXUnRhVzQ9ICAgIyBhZG1pbgogIHBhc3NwaHJhc2U6IFlXUnRhVzQ9ICMgYWRtaW4Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/kiali/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJraWFsaS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImtpYWxpLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHJlcGxpY2FzOiB7eyAuVmFsdWVzLnJlcGxpY2FDb3VudCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoga2lhbGkKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBuYW1lOiBraWFsaQogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBraWFsaQogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAia2lhbGkuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICIiCiAgICAgICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogICAgICAgIHByb21ldGhldXMuaW8vcG9ydDogIjkwOTAiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGtpYWxpLXNlcnZpY2UtYWNjb3VudAp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAtIGltYWdlOiAie3sgLlZhbHVlcy5odWIgfX0va2lhbGk6e3sgLlZhbHVlcy50YWcgfX0iCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxQb2xpY3kgfX0KICAgICAgICBuYW1lOiBraWFsaQogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAiL29wdC9raWFsaS9raWFsaSIKICAgICAgICAtICItY29uZmlnIgogICAgICAgIC0gIi9raWFsaS1jb25maWd1cmF0aW9uL2NvbmZpZy55YW1sIgogICAgICAgIC0gIi12IgogICAgICAgIC0gIjQiCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogQUNUSVZFX05BTUVTUEFDRQogICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICBmaWVsZFJlZjoKICAgICAgICAgICAgICBmaWVsZFBhdGg6IG1ldGFkYXRhLm5hbWVzcGFjZQogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGtpYWxpLWNvbmZpZ3VyYXRpb24KICAgICAgICAgIG1vdW50UGF0aDogIi9raWFsaS1jb25maWd1cmF0aW9uIgogICAgICAgIC0gbmFtZToga2lhbGktc2VjcmV0CiAgICAgICAgICBtb3VudFBhdGg6ICIva2lhbGktc2VjcmV0IgogICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMCB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMCB9fQp7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZToga2lhbGktY29uZmlndXJhdGlvbgogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IGtpYWxpCiAgICAgIC0gbmFtZToga2lhbGktc2VjcmV0CiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZToge3sgLlZhbHVlcy5kYXNoYm9hcmQuc2VjcmV0TmFtZSB9fQogICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/kiali/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAia2lhbGkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJraWFsaS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgcnVsZXM6Cnt7LSBpZiAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgaWYgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgZWxzZSB9fSAvIHt7IGVuZCB9fQogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBraWFsaQogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiAyMDAwMQogICAge3stIGVuZCAtfX0Ke3stIGVsc2UgfX0KICAgIC0gaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgaWYgLlZhbHVlcy5jb250ZXh0UGF0aCB9fSB7eyAuVmFsdWVzLmNvbnRleHRQYXRoIH19IHt7IGVsc2UgfX0gLyB7eyBlbmQgfX0KICAgICAgICAgICAgYmFja2VuZDoKICAgICAgICAgICAgICBzZXJ2aWNlTmFtZToga2lhbGkKICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDogMjAwMDEKe3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLmluZ3Jlc3MudGxzIH19CiAgdGxzOgp7eyB0b1lhbWwgLlZhbHVlcy5pbmdyZXNzLnRscyB8IGluZGVudCA0IH19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
        },
        {
          "filePath": "charts/kiali/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBraWFsaQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAia2lhbGkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJraWFsaS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGh0dHAta2lhbGkKICAgIHByb3RvY29sOiBUQ1AKICAgIHBvcnQ6IDIwMDAxCiAgc2VsZWN0b3I6CiAgICBhcHA6IGtpYWxpCg=="
        },
        {
          "filePath": "charts/kiali/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGtpYWxpLXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAia2lhbGkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJraWFsaS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0K"
        },
        {
          "filePath": "charts/kiali/templates/tests/test-kiali-connection.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmVuYWJsZUhlbG1UZXN0IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAia2lhbGkuZnVsbG5hbWUiIC4gfX0tdGVzdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBraWFsaS10ZXN0CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImtpYWxpLmNoYXJ0IiAuIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IGtpYWxpCiAgYW5ub3RhdGlvbnM6CiAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgaGVsbS5zaC9ob29rOiB0ZXN0LXN1Y2Nlc3MKc3BlYzoKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogIGNvbnRhaW5lcnM6CiAgICAtIG5hbWU6ICJ7eyB0ZW1wbGF0ZSAia2lhbGkuZnVsbG5hbWUiIC4gfX0tdGVzdCIKICAgICAgaW1hZ2U6IHt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS97eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5pbWFnZSB9fTp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0KICAgICAgaW1hZ2VQdWxsUG9saWN5OiAie3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19IgogICAgICBjb21tYW5kOiBbJ2N1cmwnXQogICAgICBhcmdzOiBbJ2h0dHA6Ly9raWFsaToyMDAwMSddCiAgcmVzdGFydFBvbGljeTogTmV2ZXIKICBhZmZpbml0eToKICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNCB9fQogICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/kiali/values.yaml",
          "fileContents": "IwojIGFkZG9uIGtpYWxpCiMKZW5hYmxlZDogZmFsc2UgIyBOb3RlIHRoYXQgaWYgdXNpbmcgdGhlIGRlbW8gb3IgZGVtby1hdXRoIHlhbWwgd2hlbiBpbnN0YWxsaW5nIHZpYSBIZWxtLCB0aGlzIGRlZmF1bHQgd2lsbCBiZSBgdHJ1ZWAuCnJlcGxpY2FDb3VudDogMQpodWI6IHF1YXkuaW8va2lhbGkKdGFnOiB2MC4yMApjb250ZXh0UGF0aDogL2tpYWxpICMgVGhlIHJvb3QgY29udGV4dCBwYXRoIHRvIGFjY2VzcyB0aGUgS2lhbGkgVUkuCm5vZGVTZWxlY3Rvcjoge30KCiMgU3BlY2lmeSB0aGUgcG9kIGFudGktYWZmaW5pdHkgdGhhdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB3aGljaCBub2RlcwojIHlvdXIgcG9kIGlzIGVsaWdpYmxlIHRvIGJlIHNjaGVkdWxlZCBiYXNlZCBvbiBsYWJlbHMgb24gcG9kcyB0aGF0IGFyZQojIGFscmVhZHkgcnVubmluZyBvbiB0aGUgbm9kZSByYXRoZXIgdGhhbiBiYXNlZCBvbiBsYWJlbHMgb24gbm9kZXMuCiMgVGhlcmUgYXJlIGN1cnJlbnRseSB0d28gdHlwZXMgb2YgYW50aS1hZmZpbml0eToKIyAgICAicmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyAgICAicHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgd2hpY2ggZGVub3RlIOKAnGhhcmTigJ0gdnMuIOKAnHNvZnTigJ0gcmVxdWlyZW1lbnRzLCB5b3UgY2FuIGRlZmluZSB5b3VyIHZhbHVlcwojIGluICJwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yIiBhbmQgInBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yIgojIGNvcnJlc3BvbmRpbmdseS4KIyBGb3IgZXhhbXBsZToKIyBwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOgojIC0ga2V5OiBzZWN1cml0eQojICAgb3BlcmF0b3I6IEluCiMgICB2YWx1ZXM6IFMxLFMyCiMgICB0b3BvbG9neUtleTogImt1YmVybmV0ZXMuaW8vaG9zdG5hbWUiCiMgVGhpcyBwb2QgYW50aS1hZmZpbml0eSBydWxlIHNheXMgdGhhdCB0aGUgcG9kIHJlcXVpcmVzIG5vdCB0byBiZSBzY2hlZHVsZWQKIyBvbnRvIGEgbm9kZSBpZiB0aGF0IG5vZGUgaXMgYWxyZWFkeSBydW5uaW5nIGEgcG9kIHdpdGggbGFiZWwgaGF2aW5nIGtleQojIOKAnHNlY3VyaXR54oCdIGFuZCB2YWx1ZSDigJxTMeKAnS4KcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjogW10KcG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3I6IFtdCgppbmdyZXNzOgogIGVuYWJsZWQ6IGZhbHNlCiAgIyMgVXNlZCB0byBjcmVhdGUgYW4gSW5ncmVzcyByZWNvcmQuCiAgaG9zdHM6CiAgICAtIGtpYWxpLmxvY2FsCiAgYW5ub3RhdGlvbnM6CiAgICAjIGt1YmVybmV0ZXMuaW8vaW5ncmVzcy5jbGFzczogbmdpbngKICAgICMga3ViZXJuZXRlcy5pby90bHMtYWNtZTogInRydWUiCiAgdGxzOgogICAgIyBTZWNyZXRzIG11c3QgYmUgbWFudWFsbHkgY3JlYXRlZCBpbiB0aGUgbmFtZXNwYWNlLgogICAgIyAtIHNlY3JldE5hbWU6IGtpYWxpLXRscwogICAgIyAgIGhvc3RzOgogICAgIyAgICAgLSBraWFsaS5sb2NhbAoKZGFzaGJvYXJkOgogIHNlY3JldE5hbWU6IGtpYWxpICMgWW91IG11c3QgY3JlYXRlIGEgc2VjcmV0IHdpdGggdGhpcyBuYW1lIC0gb25lIGlzIG5vdCBwcm92aWRlZCBvdXQtb2YtYm94LgogIHZpZXdPbmx5TW9kZTogZmFsc2UgIyBCaW5kIHRoZSBzZXJ2aWNlIGFjY291bnQgdG8gYSByb2xlIHdpdGggb25seSByZWFkIGFjY2VzcwogIGdyYWZhbmFVUkw6ICAjIElmIHlvdSBoYXZlIEdyYWZhbmEgaW5zdGFsbGVkIGFuZCBpdCBpcyBhY2Nlc3NpYmxlIHRvIGNsaWVudCBicm93c2VycywgdGhlbiBzZXQgdGhpcyB0byBpdHMgZXh0ZXJuYWwgVVJMLiBLaWFsaSB3aWxsIHJlZGlyZWN0IHVzZXJzIHRvIHRoaXMgVVJMIHdoZW4gR3JhZmFuYSBtZXRyaWNzIGFyZSB0byBiZSBzaG93bi4KICBqYWVnZXJVUkw6ICAjIElmIHlvdSBoYXZlIEphZWdlciBpbnN0YWxsZWQgYW5kIGl0IGlzIGFjY2Vzc2libGUgdG8gY2xpZW50IGJyb3dzZXJzLCB0aGVuIHNldCB0aGlzIHByb3BlcnR5IHRvIGl0cyBleHRlcm5hbCBVUkwuIEtpYWxpIHdpbGwgcmVkaXJlY3QgdXNlcnMgdG8gdGhpcyBVUkwgd2hlbiBKYWVnZXIgdHJhY2luZyBpcyB0byBiZSBzaG93bi4KcHJvbWV0aGV1c0FkZHI6IGh0dHA6Ly9wcm9tZXRoZXVzOjkwOTAKCiMgV2hlbiB0cnVlLCBhIHNlY3JldCB3aWxsIGJlIGNyZWF0ZWQgd2l0aCBhIGRlZmF1bHQgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLiBVc2VmdWwgZm9yIGRlbW9zLgpjcmVhdGVEZW1vU2VjcmV0OiBmYWxzZQo="
        },
        {
          "filePath": "charts/mixer/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogbWl4ZXIKdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBtaXhlciBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIG1peGVyCnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/mixer/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAibWl4ZXIubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAibWl4ZXIuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJtaXhlci5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/mixer/templates/autoscale.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG9yIChlcSAka2V5ICJwb2xpY3kiKSAoZXEgJGtleSAidGVsZW1ldHJ5IikgfX0Ke3stIGlmIGFuZCAkc3BlYy5lbmFibGVkICRzcGVjLmF1dG9zY2FsZUVuYWJsZWQgJHNwZWMuYXV0b3NjYWxlTWluICRzcGVjLmF1dG9zY2FsZU1heCB9fQphcGlWZXJzaW9uOiBhdXRvc2NhbGluZy92MmJldGExCmtpbmQ6IEhvcml6b250YWxQb2RBdXRvc2NhbGVyCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXt7ICRrZXkgfX0KICBuYW1lc3BhY2U6IHt7ICQuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJtaXhlci5uYW1lIiAkIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgIm1peGVyLmNoYXJ0IiAkIH19CiAgICBoZXJpdGFnZToge3sgJC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7ICQuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgICBtYXhSZXBsaWNhczoge3sgJHNwZWMuYXV0b3NjYWxlTWF4IH19CiAgICBtaW5SZXBsaWNhczoge3sgJHNwZWMuYXV0b3NjYWxlTWluIH19CiAgICBzY2FsZVRhcmdldFJlZjoKICAgICAgYXBpVmVyc2lvbjogYXBwcy92MQogICAgICBraW5kOiBEZXBsb3ltZW50CiAgICAgIG5hbWU6IGlzdGlvLXt7ICRrZXkgfX0KICAgIG1ldHJpY3M6CiAgICAtIHR5cGU6IFJlc291cmNlCiAgICAgIHJlc291cmNlOgogICAgICAgIG5hbWU6IGNwdQogICAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjoge3sgJHNwZWMuY3B1LnRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbiB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/mixer/templates/clusterrole.yaml",
          "fileContents": "e3stIGlmIG9yICguVmFsdWVzLnBvbGljeS5lbmFibGVkKSAoLlZhbHVlcy50ZWxlbWV0cnkuZW5hYmxlZCkgfX0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1taXhlci17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJtaXhlci5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgIm1peGVyLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiY29uZmlnLmlzdGlvLmlvIl0gIyBpc3RpbyBDUkQgd2F0Y2hlcgogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyJjcmVhdGUiLCAiZ2V0IiwgImxpc3QiLCAid2F0Y2giLCAicGF0Y2giXQotIGFwaUdyb3VwczogWyJhcGlleHRlbnNpb25zLms4cy5pbyJdCiAgcmVzb3VyY2VzOiBbImN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyIsICJlbmRwb2ludHMiLCAicG9kcyIsICJzZXJ2aWNlcyIsICJuYW1lc3BhY2VzIiwgInNlY3JldHMiLCAicmVwbGljYXRpb25jb250cm9sbGVycyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyJleHRlbnNpb25zIiwgImFwcHMiXQogIHJlc291cmNlczogWyJyZXBsaWNhc2V0cyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/mixer/templates/clusterrolebinding.yaml",
          "fileContents": "e3stIGlmIG9yICguVmFsdWVzLnBvbGljeS5lbmFibGVkKSAoLlZhbHVlcy50ZWxlbWV0cnkuZW5hYmxlZCkgfX0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbWl4ZXItYWRtaW4tcm9sZS1iaW5kaW5nLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgIm1peGVyLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAibWl4ZXIuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGlzdGlvLW1peGVyLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1taXhlci1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/mixer/templates/config.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/mixer/templates/deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/mixer/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG9yIChlcSAka2V5ICJwb2xpY3kiKSAoZXEgJGtleSAidGVsZW1ldHJ5IikgfX0Ke3stIGlmICRzcGVjLmVuYWJsZWQgfX0Ke3stIGlmICQuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UG9kRGlzcnVwdGlvbkJ1ZGdldC5lbmFibGVkIH19CmFwaVZlcnNpb246IHBvbGljeS92MWJldGExCmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8te3sgJGtleSB9fQogIG5hbWVzcGFjZToge3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgJGtleSB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJtaXhlci5jaGFydCIgJCB9fQogICAgaGVyaXRhZ2U6IHt7ICQuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAkLlJlbGVhc2UuTmFtZSB9fQogICAgdmVyc2lvbjoge3sgJC5DaGFydC5WZXJzaW9uIH19CiAgICBpc3RpbzogbWl4ZXIKICAgIGlzdGlvLW1peGVyLXR5cGU6IHt7ICRrZXkgfX0Kc3BlYzoKe3stIGlmICQuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UG9kRGlzcnVwdGlvbkJ1ZGdldC5lbmFibGVkIH19Cnt7IGluY2x1ZGUgInBvZERpc3J1cHRpb25CdWRnZXQuc3BlYyIgJC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0IH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHt7ICRrZXkgfX0KICAgICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICAgICAgaXN0aW86IG1peGVyCiAgICAgIGlzdGlvLW1peGVyLXR5cGU6IHt7ICRrZXkgfX0KLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/mixer/templates/service.yaml",
          "fileContents": "e3stIHJhbmdlICRrZXksICRzcGVjIDo9IC5WYWx1ZXMgfX0Ke3stIGlmIG9yIChlcSAka2V5ICJwb2xpY3kiKSAoZXEgJGtleSAidGVsZW1ldHJ5IikgfX0Ke3stIGlmICRzcGVjLmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby17eyAka2V5IH19CiAgbmFtZXNwYWNlOiB7eyAkLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgIG5ldHdvcmtpbmcuaXN0aW8uaW8vZXhwb3J0VG86ICIqIgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgIm1peGVyLm5hbWUiICQgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAibWl4ZXIuY2hhcnQiICQgfX0KICAgIGhlcml0YWdlOiB7eyAkLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgJC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBtaXhlcgpzcGVjOgogIHBvcnRzOgogIC0gbmFtZTogZ3JwYy1taXhlcgogICAgcG9ydDogOTA5MQogIC0gbmFtZTogZ3JwYy1taXhlci1tdGxzCiAgICBwb3J0OiAxNTAwNAogIC0gbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgICBwb3J0OiB7eyAkLlZhbHVlcy5nbG9iYWwubW9uaXRvcmluZ1BvcnQgfX0Ke3stIGlmIGVxICRrZXkgInRlbGVtZXRyeSIgfX0KICAtIG5hbWU6IHByb21ldGhldXMKICAgIHBvcnQ6IDQyNDIyCnt7LSBpZiAkc3BlYy5zZXNzaW9uQWZmaW5pdHlFbmFibGVkIH19CiAgc2Vzc2lvbkFmZmluaXR5OiBDbGllbnRJUAp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIGlzdGlvOiBtaXhlcgogICAgaXN0aW8tbWl4ZXItdHlwZToge3sgJGtleSB9fQotLS0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCg=="
        },
        {
          "filePath": "charts/mixer/templates/serviceaccount.yaml",
          "fileContents": "e3stIGlmIG9yICguVmFsdWVzLnBvbGljeS5lbmFibGVkKSAoLlZhbHVlcy50ZWxlbWV0cnkuZW5hYmxlZCkgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLW1peGVyLXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAibWl4ZXIubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJtaXhlci5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/mixer/values.yaml",
          "fileContents": "IwojIG1peGVyIGNvbmZpZ3VyYXRpb24KIwppbWFnZTogbWl4ZXIKCmVudjoKICBHT0RFQlVHOiBnY3RyYWNlPTEKICAjIG1heCBwcm9jcyBzaG91bGQgYmUgY2VpbChjcHUgbGltaXQgKyAxKQogIEdPTUFYUFJPQ1M6ICI2IgoKcG9saWN5OgogICMgaWYgcG9saWN5IGlzIGVuYWJsZWQsIGdsb2JhbC5kaXNhYmxlUG9saWN5Q2hlY2tzIGhhcyBhZmZlY3QuCiAgZW5hYmxlZDogZmFsc2UKICByZXBsaWNhQ291bnQ6IDEKICBhdXRvc2NhbGVFbmFibGVkOiB0cnVlCiAgYXV0b3NjYWxlTWluOiAxCiAgYXV0b3NjYWxlTWF4OiA1CiAgY3B1OgogICAgdGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uOiA4MAoKdGVsZW1ldHJ5OgogIGVuYWJsZWQ6IHRydWUKICByZXBsaWNhQ291bnQ6IDEKICBhdXRvc2NhbGVFbmFibGVkOiB0cnVlCiAgYXV0b3NjYWxlTWluOiAxCiAgYXV0b3NjYWxlTWF4OiA1CiAgY3B1OgogICAgdGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uOiA4MAogIHNlc3Npb25BZmZpbml0eUVuYWJsZWQ6IGZhbHNlCgogICMgbWl4ZXIgbG9hZCBzaGVkZGluZyBjb25maWd1cmF0aW9uLgogICMgV2hlbiBtaXhlciBkZXRlY3RzIHRoYXQgaXQgaXMgb3ZlcmxvYWRlZCwgaXQgc3RhcnRzIHJlamVjdGluZyBncnBjIHJlcXVlc3RzLgogIGxvYWRzaGVkZGluZzoKICAgICMgZGlzYWJsZWQsIGxvZ29ubHkgb3IgZW5mb3JjZQogICAgbW9kZTogZW5mb3JjZQogICAgIyBiYXNlZCBvbiBtZWFzdXJlbWVudHMgMTAwbXMgcDUwIHRyYW5zbGF0ZXMgdG8gcDk5IG9mIHVuZGVyIDFzLiBUaGlzIGlzIG9rIGZvciB0ZWxlbWV0cnkgd2hpY2ggaXMgaW5oZXJlbnRseSBhc3luYy4KICAgIGxhdGVuY3lUaHJlc2hvbGQ6IDEwMG1zCiAgcmVzb3VyY2VzOgogICAgcmVxdWVzdHM6CiAgICAgIGNwdTogMTAwMG0KICAgICAgbWVtb3J5OiAxRwogICAgbGltaXRzOgogICAgICAjIEl0IGlzIGJlc3QgdG8gZG8gaG9yaXpvbnRhbCBzY2FsaW5nIG9mIG1peGVyIHVzaW5nIG1vZGVyYXRlIGNwdSBhbGxvY2F0aW9uLgogICAgICAjIFdlIGhhdmUgZXhwZXJpbWVudGFsbHkgZm91bmQgdGhhdCB0aGVzZSB2YWx1ZXMgd29yayB3ZWxsLgogICAgICBjcHU6IDQ4MDBtCiAgICAgIG1lbW9yeTogNEcKCnBvZEFubm90YXRpb25zOiB7fQpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10KCmFkYXB0ZXJzOgogIGt1YmVybmV0ZXNlbnY6CiAgICBlbmFibGVkOiB0cnVlCgogICMgc3RkaW8gaXMgYSBkZWJ1ZyBhZGFwdGVyIGluIGlzdGlvLXRlbGVtZXRyeSwgaXQgaXMgbm90IHJlY29tbWVuZGVkIGZvciBwcm9kdWN0aW9uIHVzZS4KICBzdGRpbzoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBvdXRwdXRBc0pzb246IHRydWUKICBwcm9tZXRoZXVzOgogICAgZW5hYmxlZDogdHJ1ZQogICAgbWV0cmljc0V4cGlyeUR1cmF0aW9uOiAxMG0KICAjIFNldHRpbmcgdGhpcyB0byBmYWxzZSBzZXRzIHRoZSB1c2VBZGFwdGVyQ1JEcyBtaXhlciBzdGFydHVwIGFyZ3VtZW50IHRvIGZhbHNlCiAgdXNlQWRhcHRlckNSRHM6IGZhbHNlCg=="
        },
        {
          "filePath": "charts/nodeagent/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogbm9kZWFnZW50CnZlcnNpb246IDEuMS4wCmFwcFZlcnNpb246IDEuMS4wCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgpkZXNjcmlwdGlvbjogSGVsbSBjaGFydCBmb3Igbm9kZWFnZW50IGRlcGxveW1lbnQKa2V5d29yZHM6CiAgLSBpc3RpbwogIC0gbm9kZWFnZW50CnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/nodeagent/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAibm9kZWFnZW50Lm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KSWYgcmVsZWFzZSBuYW1lIGNvbnRhaW5zIGNoYXJ0IG5hbWUgaXQgd2lsbCBiZSB1c2VkIGFzIGEgZnVsbCBuYW1lLgoqL319Cnt7LSBkZWZpbmUgIm5vZGVhZ2VudC5mdWxsbmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgLX19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gLlJlbGVhc2UuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBjaGFydCBuYW1lIGFuZCB2ZXJzaW9uIGFzIHVzZWQgYnkgdGhlIGNoYXJ0IGxhYmVsLgoqL319Cnt7LSBkZWZpbmUgIm5vZGVhZ2VudC5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/nodeagent/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1ub2RlYWdlbnQte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAibm9kZWFnZW50Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAibm9kZWFnZW50LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyJdCiAgdmVyYnM6IFsiZ2V0Il0="
        },
        {
          "filePath": "charts/nodeagent/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbm9kZWFnZW50LXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgIm5vZGVhZ2VudC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgIm5vZGVhZ2VudC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tbm9kZWFnZW50LXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1ub2RlYWdlbnQtc2VydmljZS1hY2NvdW50CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQ=="
        },
        {
          "filePath": "charts/nodeagent/templates/daemonset.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbm9kZWFnZW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJub2RlYWdlbnQubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJub2RlYWdlbnQuY2hhcnQiIC4gfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3Rpbzogbm9kZWFnZW50CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgaXN0aW86IG5vZGVhZ2VudAogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHt7IHRlbXBsYXRlICJub2RlYWdlbnQubmFtZSIgLiB9fQogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAibm9kZWFnZW50LmNoYXJ0IiAuIH19CiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICAgICAgaXN0aW86IG5vZGVhZ2VudAogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBpc3Rpby1ub2RlYWdlbnQtc2VydmljZS1hY2NvdW50Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbm9kZWFnZW50Cnt7LSBpZiBjb250YWlucyAiLyIgLlZhbHVlcy5pbWFnZSB9fQogICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZSB9fSIKe3stIGVsc2UgfX0KICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS97eyAuVmFsdWVzLmltYWdlIH19Ont7IC5WYWx1ZXMuZ2xvYmFsLnRhZyB9fSIKe3stIGVuZCB9fQogICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbW91bnRQYXRoOiAvdmFyL3J1bi9zZHMKICAgICAgICAgIG5hbWU6IHNkc3Vkc3BhdGgKICAgICAgICBlbnY6CiAgICAgICAge3stIGlmIC5WYWx1ZXMuZW52IH19CiAgICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5lbnYgfX0KICAgICAgICAtIG5hbWU6IHt7ICRrZXkgfX0KICAgICAgICAgIHZhbHVlOiAie3sgJHZhbCB9fSIKICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIC0gbmFtZTogIlRydXN0X0RvbWFpbiIKICAgICAgICAgIHZhbHVlOiAie3sgLlZhbHVlcy5nbG9iYWwudHJ1c3REb21haW4gfX0iCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogc2RzdWRzcGF0aAogICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgcGF0aDogL3Zhci9ydW4vc2RzCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cgp7ey0gaWYgLlZhbHVlcy50b2xlcmF0aW9ucyB9fQogICAgICB0b2xlcmF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMudG9sZXJhdGlvbnMgfCBpbmRlbnQgNiB9fQp7ey0gZW5kIH19"
        },
        {
          "filePath": "charts/nodeagent/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLW5vZGVhZ2VudC1zZXJ2aWNlLWFjY291bnQKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgIm5vZGVhZ2VudC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgIm5vZGVhZ2VudC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0="
        },
        {
          "filePath": "charts/nodeagent/values.yaml",
          "fileContents": "IwojIG5vZGVhZ2VudCBjb25maWd1cmF0aW9uCiMKZW5hYmxlZDogZmFsc2UKaW1hZ2U6IG5vZGUtYWdlbnQtazhzCmVudjoKICAjIG5hbWUgb2YgYXV0aGVudGljYXRpb24gcHJvdmlkZXIuCiAgQ0FfUFJPVklERVI6ICIiCiAgIyBDQSBlbmRwb2ludC4KICBDQV9BRERSOiAiIiAgCiAgIyBuYW1lcyBvZiBhdXRoZW50aWNhdGlvbiBwcm92aWRlcidzIHBsdWdpbnMuCiAgUGx1Z2luczogIiIKbm9kZVNlbGVjdG9yOiB7fQp0b2xlcmF0aW9uczogW10KCiMgU3BlY2lmeSB0aGUgcG9kIGFudGktYWZmaW5pdHkgdGhhdCBhbGxvd3MgeW91IHRvIGNvbnN0cmFpbiB3aGljaCBub2RlcwojIHlvdXIgcG9kIGlzIGVsaWdpYmxlIHRvIGJlIHNjaGVkdWxlZCBiYXNlZCBvbiBsYWJlbHMgb24gcG9kcyB0aGF0IGFyZQojIGFscmVhZHkgcnVubmluZyBvbiB0aGUgbm9kZSByYXRoZXIgdGhhbiBiYXNlZCBvbiBsYWJlbHMgb24gbm9kZXMuCiMgVGhlcmUgYXJlIGN1cnJlbnRseSB0d28gdHlwZXMgb2YgYW50aS1hZmZpbml0eToKIyAgICAicmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyAgICAicHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgd2hpY2ggZGVub3RlIOKAnGhhcmTigJ0gdnMuIOKAnHNvZnTigJ0gcmVxdWlyZW1lbnRzLCB5b3UgY2FuIGRlZmluZSB5b3VyIHZhbHVlcwojIGluICJwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yIiBhbmQgInBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yIgojIGNvcnJlc3BvbmRpbmdseS4KIyBGb3IgZXhhbXBsZToKIyBwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOgojIC0ga2V5OiBzZWN1cml0eQojICAgb3BlcmF0b3I6IEluCiMgICB2YWx1ZXM6IFMxLFMyCiMgICB0b3BvbG9neUtleTogImt1YmVybmV0ZXMuaW8vaG9zdG5hbWUiCiMgVGhpcyBwb2QgYW50aS1hZmZpbml0eSBydWxlIHNheXMgdGhhdCB0aGUgcG9kIHJlcXVpcmVzIG5vdCB0byBiZSBzY2hlZHVsZWQKIyBvbnRvIGEgbm9kZSBpZiB0aGF0IG5vZGUgaXMgYWxyZWFkeSBydW5uaW5nIGEgcG9kIHdpdGggbGFiZWwgaGF2aW5nIGtleQojIOKAnHNlY3VyaXR54oCdIGFuZCB2YWx1ZSDigJxTMeKAnS4KcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjogW10KcG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3I6IFtdCg=="
        },
        {
          "filePath": "charts/pilot/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogcGlsb3QKdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBwaWxvdCBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHBpbG90CnNvdXJjZXM6CiAgLSBodHRwOi8vZ2l0aHViLmNvbS9pc3Rpby9pc3RpbwplbmdpbmU6IGdvdHBsCmljb246IGh0dHBzOi8vaXN0aW8uaW8vZmF2aWNvbnMvYW5kcm9pZC0xOTJ4MTkyLnBuZwo="
        },
        {
          "filePath": "charts/pilot/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAicGlsb3QubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAicGlsb3QuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJwaWxvdC5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/pilot/templates/autoscale.yaml",
          "fileContents": "e3stIGlmIGFuZCAuVmFsdWVzLmF1dG9zY2FsZUVuYWJsZWQgLlZhbHVlcy5hdXRvc2NhbGVNaW4gLlZhbHVlcy5hdXRvc2NhbGVNYXggfX0KYXBpVmVyc2lvbjogYXV0b3NjYWxpbmcvdjJiZXRhMQpraW5kOiBIb3Jpem9udGFsUG9kQXV0b3NjYWxlcgptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBtYXhSZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGVNYXggfX0KICBtaW5SZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGVNaW4gfX0KICBzY2FsZVRhcmdldFJlZjoKICAgIGFwaVZlcnNpb246IGFwcHMvdjEKICAgIGtpbmQ6IERlcGxveW1lbnQKICAgIG5hbWU6IGlzdGlvLXBpbG90CiAgbWV0cmljczoKICAtIHR5cGU6IFJlc291cmNlCiAgICByZXNvdXJjZToKICAgICAgbmFtZTogY3B1CiAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjoge3sgLlZhbHVlcy5jcHUudGFyZ2V0QXZlcmFnZVV0aWxpemF0aW9uIH19Ci0tLQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/pilot/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJwaWxvdC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInBpbG90LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiY29uZmlnLmlzdGlvLmlvIl0KICByZXNvdXJjZXM6IFsiKiJdCiAgdmVyYnM6IFsiKiJdCi0gYXBpR3JvdXBzOiBbInJiYWMuaXN0aW8uaW8iXQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyJnZXQiLCAid2F0Y2giLCAibGlzdCJdCi0gYXBpR3JvdXBzOiBbIm5ldHdvcmtpbmcuaXN0aW8uaW8iXQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyIqIl0KLSBhcGlHcm91cHM6IFsiYXV0aGVudGljYXRpb24uaXN0aW8uaW8iXQogIHJlc291cmNlczogWyIqIl0KICB2ZXJiczogWyIqIl0KLSBhcGlHcm91cHM6IFsiYXBpZXh0ZW5zaW9ucy5rOHMuaW8iXQogIHJlc291cmNlczogWyJjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zIl0KICB2ZXJiczogWyIqIl0KLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyJdCiAgcmVzb3VyY2VzOiBbImluZ3Jlc3NlcyIsICJpbmdyZXNzZXMvc3RhdHVzIl0KICB2ZXJiczogWyIqIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyJdCiAgdmVyYnM6IFsiY3JlYXRlIiwgImdldCIsICJsaXN0IiwgIndhdGNoIiwgInVwZGF0ZSJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbImVuZHBvaW50cyIsICJwb2RzIiwgInNlcnZpY2VzIiwgIm5hbWVzcGFjZXMiLCAibm9kZXMiLCAic2VjcmV0cyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQo="
        },
        {
          "filePath": "charts/pilot/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tcGlsb3Qte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tcGlsb3Qte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IGlzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/pilot/templates/deployment.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/pilot/templates/meshexpansion.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb24uZW5hYmxlZCB9fQp7ey0gaWYgLlZhbHVlcy5nbG9iYWwubWVzaEV4cGFuc2lvbi51c2VJTEIgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBWaXJ0dWFsU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBtZXNoZXhwYW5zaW9uLWlsYi12cy1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kc3BlYzoKICBob3N0czoKICAtIGlzdGlvLXBpbG90Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogIGdhdGV3YXlzOgogIC0gbWVzaGV4cGFuc2lvbi1pbGItZ2F0ZXdheQogIHRjcDoKICAtIG1hdGNoOgogICAgLSBwb3J0OiAxNTAxMQogICAgcm91dGU6CiAgICAtIGRlc3RpbmF0aW9uOgogICAgICAgIGhvc3Q6IGlzdGlvLXBpbG90Lnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDE1MDExCiAgLSBtYXRjaDoKICAgIC0gcG9ydDogMTUwMTAKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBpc3Rpby1waWxvdC57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0uc3ZjLnt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmNsdXN0ZXJEb21haW4gfX0KICAgICAgICBwb3J0OgogICAgICAgICAgbnVtYmVyOiAxNTAxMAogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDUzNTMKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBrdWJlLWRucy5rdWJlLXN5c3RlbS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDUzCi0tLQp7ey0gZWxzZSB9fQoKYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBWaXJ0dWFsU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBtZXNoZXhwYW5zaW9uLXZzLXBpbG90CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJwaWxvdC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInBpbG90LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIGhvc3RzOgogIC0gaXN0aW8tcGlsb3Que3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogIGdhdGV3YXlzOgogIC0gbWVzaGV4cGFuc2lvbi1nYXRld2F5CiAgdGNwOgogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDE1MDExCiAgICByb3V0ZToKICAgIC0gZGVzdGluYXRpb246CiAgICAgICAgaG9zdDogaXN0aW8tcGlsb3Que3sgJC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDE1MDExCi0tLQp7ey0gZW5kIH19Cgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwuY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkIH19CmFwaVZlcnNpb246IG5ldHdvcmtpbmcuaXN0aW8uaW8vdjFhbHBoYTMKa2luZDogRGVzdGluYXRpb25SdWxlCm1ldGFkYXRhOgogIG5hbWU6IG1lc2hleHBhbnNpb24tZHItcGlsb3QKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInBpbG90Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAicGlsb3QuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgaG9zdDogaXN0aW8tcGlsb3Que3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy57eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5jbHVzdGVyRG9tYWluIH19CiAgdHJhZmZpY1BvbGljeToKICAgIHBvcnRMZXZlbFNldHRpbmdzOgogICAgLSBwb3J0OgogICAgICAgIG51bWJlcjogMTUwMTEKICAgICAgdGxzOgogICAgICAgIG1vZGU6IERJU0FCTEUKLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQoK"
        },
        {
          "filePath": "charts/pilot/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBwaWxvdApzcGVjOgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFBvZERpc3J1cHRpb25CdWRnZXQuZW5hYmxlZCB9fQp7eyBpbmNsdWRlICJwb2REaXNydXB0aW9uQnVkZ2V0LnNwZWMiIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0IH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHt7IHRlbXBsYXRlICJwaWxvdC5uYW1lIiAuIH19CiAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgaXN0aW86IHBpbG90Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/pilot/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBwaWxvdApzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogMTUwMTAKICAgIG5hbWU6IGdycGMteGRzICMgZGlyZWN0CiAgLSBwb3J0OiAxNTAxMQogICAgbmFtZTogaHR0cHMteGRzICMgbVRMUwogIC0gcG9ydDogODA4MAogICAgbmFtZTogaHR0cC1sZWdhY3ktZGlzY292ZXJ5ICMgZGlyZWN0CiAgLSBwb3J0OiB7eyAuVmFsdWVzLmdsb2JhbC5tb25pdG9yaW5nUG9ydCB9fQogICAgbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgc2VsZWN0b3I6CiAgICBpc3RpbzogcGlsb3QK"
        },
        {
          "filePath": "charts/pilot/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAicGlsb3QubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwaWxvdC5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0K"
        },
        {
          "filePath": "charts/pilot/values.yaml",
          "fileContents": "IwojIHBpbG90IGNvbmZpZ3VyYXRpb24KIwplbmFibGVkOiB0cnVlCmF1dG9zY2FsZUVuYWJsZWQ6IHRydWUKYXV0b3NjYWxlTWluOiAxCmF1dG9zY2FsZU1heDogNQojIHNwZWNpZnkgcmVwbGljYUNvdW50IHdoZW4gYXV0b3NjYWxlRW5hYmxlZDogZmFsc2UKIyByZXBsaWNhQ291bnQ6IDEKaW1hZ2U6IHBpbG90CnNpZGVjYXI6IHRydWUKdHJhY2VTYW1wbGluZzogMS4wCiMgUmVzb3VyY2VzIGZvciBhIHNtYWxsIHBpbG90IGluc3RhbGwKcmVzb3VyY2VzOgogIHJlcXVlc3RzOgogICAgY3B1OiA1MDBtCiAgICBtZW1vcnk6IDIwNDhNaQplbnY6CiAgUElMT1RfUFVTSF9USFJPVFRMRTogMTAwCiAgR09ERUJVRzogZ2N0cmFjZT0xCmNwdToKICB0YXJnZXRBdmVyYWdlVXRpbGl6YXRpb246IDgwCm5vZGVTZWxlY3Rvcjoge30KdG9sZXJhdGlvbnM6IFtdCgojIFNwZWNpZnkgdGhlIHBvZCBhbnRpLWFmZmluaXR5IHRoYXQgYWxsb3dzIHlvdSB0byBjb25zdHJhaW4gd2hpY2ggbm9kZXMKIyB5b3VyIHBvZCBpcyBlbGlnaWJsZSB0byBiZSBzY2hlZHVsZWQgYmFzZWQgb24gbGFiZWxzIG9uIHBvZHMgdGhhdCBhcmUKIyBhbHJlYWR5IHJ1bm5pbmcgb24gdGhlIG5vZGUgcmF0aGVyIHRoYW4gYmFzZWQgb24gbGFiZWxzIG9uIG5vZGVzLgojIFRoZXJlIGFyZSBjdXJyZW50bHkgdHdvIHR5cGVzIG9mIGFudGktYWZmaW5pdHk6CiMgICAgInJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgICAgInByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojIHdoaWNoIGRlbm90ZSDigJxoYXJk4oCdIHZzLiDigJxzb2Z04oCdIHJlcXVpcmVtZW50cywgeW91IGNhbiBkZWZpbmUgeW91ciB2YWx1ZXMKIyBpbiAicG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciIgYW5kICJwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvciIKIyBjb3JyZXNwb25kaW5nbHkuCiMgRm9yIGV4YW1wbGU6CiMgcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjoKIyAtIGtleTogc2VjdXJpdHkKIyAgIG9wZXJhdG9yOiBJbgojICAgdmFsdWVzOiBTMSxTMgojICAgdG9wb2xvZ3lLZXk6ICJrdWJlcm5ldGVzLmlvL2hvc3RuYW1lIgojIFRoaXMgcG9kIGFudGktYWZmaW5pdHkgcnVsZSBzYXlzIHRoYXQgdGhlIHBvZCByZXF1aXJlcyBub3QgdG8gYmUgc2NoZWR1bGVkCiMgb250byBhIG5vZGUgaWYgdGhhdCBub2RlIGlzIGFscmVhZHkgcnVubmluZyBhIHBvZCB3aXRoIGxhYmVsIGhhdmluZyBrZXkKIyDigJxzZWN1cml0eeKAnSBhbmQgdmFsdWUg4oCcUzHigJ0uCnBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6IFtdCnBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yOiBbXQoKIyBUaGUgZm9sbG93aW5nIGlzIHVzZWQgdG8gbGltaXQgaG93IGxvbmcgYSBzaWRlY2FyIGNhbiBiZSBjb25uZWN0ZWQKIyB0byBhIHBpbG90LiBJdCBiYWxhbmNlcyBvdXQgbG9hZCBhY3Jvc3MgcGlsb3QgaW5zdGFuY2VzIGF0IHRoZSBjb3N0IG9mCiMgaW5jcmVhc2luZyBzeXN0ZW0gY2h1cm4uCmtlZXBhbGl2ZU1heFNlcnZlckNvbm5lY3Rpb25BZ2U6IDMwbQo="
        },
        {
          "filePath": "charts/prometheus/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiBwcm9tZXRoZXVzCnZlcnNpb246IDEuMS4wCmFwcFZlcnNpb246IDIuOC4wCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/prometheus/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAicHJvbWV0aGV1cy5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJwcm9tZXRoZXVzLmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAicHJvbWV0aGV1cy5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/prometheus/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogcHJvbWV0aGV1cwogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwcm9tZXRoZXVzLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6CiAgLSBub2RlcwogIC0gc2VydmljZXMKICAtIGVuZHBvaW50cwogIC0gcG9kcwogIC0gbm9kZXMvcHJveHkKICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOgogIC0gY29uZmlnbWFwcwogIHZlcmJzOiBbImdldCJdCi0gbm9uUmVzb3VyY2VVUkxzOiBbIi9tZXRyaWNzIl0KICB2ZXJiczogWyJnZXQiXQo="
        },
        {
          "filePath": "charts/prometheus/templates/clusterrolebindings.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogcHJvbWV0aGV1cy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHByb21ldGhldXMKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAicHJvbWV0aGV1cy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogcHJvbWV0aGV1cy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/prometheus/templates/configmap.yaml",
          "fileContents": ""
        },
        {
          "filePath": "charts/prometheus/templates/deployment.yaml",
          "fileContents": "IyBUT0RPOiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgaGFzIHNlcnZpY2UgYWNjb3VudCwgcm9sZXMsIGV0YwphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogcHJvbWV0aGV1cwogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBwcm9tZXRoZXVzCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInByb21ldGhldXMuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7IC5WYWx1ZXMucmVwbGljYUNvdW50IH19CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBwcm9tZXRoZXVzCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogcHJvbWV0aGV1cwogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAicHJvbWV0aGV1cy5jaGFydCIgLiB9fQogICAgICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBwcm9tZXRoZXVzCnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBwcm9tZXRoZXVzCiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuaHViIH19L3Byb21ldGhldXM6e3sgLlZhbHVlcy50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgYXJnczoKICAgICAgICAgICAgLSAnLS1zdG9yYWdlLnRzZGIucmV0ZW50aW9uPXt7IC5WYWx1ZXMucmV0ZW50aW9uIH19JwogICAgICAgICAgICAtICctLWNvbmZpZy5maWxlPS9ldGMvcHJvbWV0aGV1cy9wcm9tZXRoZXVzLnltbCcKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkwOTAKICAgICAgICAgICAgICBuYW1lOiBodHRwCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8tL2hlYWx0aHkKICAgICAgICAgICAgICBwb3J0OiA5MDkwCiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvLS9yZWFkeQogICAgICAgICAgICAgIHBvcnQ6IDkwOTAKICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLnJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZWxzZSB9fQp7eyB0b1lhbWwgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFJlc291cmNlcyB8IGluZGVudCAxMiB9fQp7ey0gZW5kIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL3Byb21ldGhldXMKICAgICAgICAgIC0gbW91bnRQYXRoOiAvZXRjL2lzdGlvLWNlcnRzCiAgICAgICAgICAgIG5hbWU6IGlzdGlvLWNlcnRzCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgIG5hbWU6IHByb21ldGhldXMKICAgICAgLSBuYW1lOiBpc3Rpby1jZXJ0cwogICAgICAgIHNlY3JldDoKICAgICAgICAgIGRlZmF1bHRNb2RlOiA0MjAKe3stIGlmIG5vdCAuVmFsdWVzLnNlY3VyaXR5LmVuYWJsZWQgfX0KICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCnt7LSBlbmQgfX0KICAgICAgICAgIHNlY3JldE5hbWU6IGlzdGlvLmRlZmF1bHQKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0Ke3stIGlmIC5WYWx1ZXMudG9sZXJhdGlvbnMgfX0KICAgICAgdG9sZXJhdGlvbnM6Cnt7IHRvWWFtbCAuVmFsdWVzLnRvbGVyYXRpb25zIHwgaW5kZW50IDYgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/prometheus/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHByb21ldGhldXMKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAicHJvbWV0aGV1cy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsdWUgOj0gLlZhbHVlcy5pbmdyZXNzLmFubm90YXRpb25zIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWx1ZSB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgcnVsZXM6Cnt7LSBpZiAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIHt7LSByYW5nZSAkaG9zdCA6PSAuVmFsdWVzLmluZ3Jlc3MuaG9zdHMgfX0KICAgIC0gaG9zdDoge3sgJGhvc3QgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgaWYgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgJC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgZWxzZSB9fSAvIHt7IGVuZCB9fQogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBwcm9tZXRoZXVzCiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IDkwOTAKICAgIHt7LSBlbmQgLX19Cnt7LSBlbHNlIH19CiAgICAtIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIHBhdGg6IHt7IGlmIC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgLlZhbHVlcy5jb250ZXh0UGF0aCB9fSB7eyBlbHNlIH19IC8ge3sgZW5kIH19CiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHByb21ldGhldXMKICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDogOTA5MAp7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuaW5ncmVzcy50bHMgfX0KICB0bHM6Cnt7IHRvWWFtbCAuVmFsdWVzLmluZ3Jlc3MudGxzIHwgaW5kZW50IDQgfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "charts/prometheus/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBwcm9tZXRoZXVzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBhbm5vdGF0aW9uczoKICAgIHByb21ldGhldXMuaW8vc2NyYXBlOiAndHJ1ZScKICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3sgJGtleSB9fToge3sgJHZhbCB8IHF1b3RlIH19CiAgICB7ey0gZW5kIH19CiAgbGFiZWxzOgogICAgYXBwOiBwcm9tZXRoZXVzCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInByb21ldGhldXMuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBhcHA6IHByb21ldGhldXMKICBwb3J0czoKICAtIG5hbWU6IGh0dHAtcHJvbWV0aGV1cwogICAgcHJvdG9jb2w6IFRDUAogICAgcG9ydDogOTA5MAoKe3stIGlmIC5WYWx1ZXMuc2VydmljZS5ub2RlUG9ydC5lbmFibGVkIH19CiMgVXNpbmcgc2VwYXJhdGUgaW5ncmVzcyBmb3Igbm9kZXBvcnQsIHRvIGF2b2lkIGNvbmZsaWN0IHdpdGggcGlsb3QgZTJlIHRlc3QgY29uZmlncy4KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogcHJvbWV0aGV1cy1ub2RlcG9ydAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBwcm9tZXRoZXVzCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInByb21ldGhldXMuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgdHlwZTogTm9kZVBvcnQKICBwb3J0czoKICAtIHBvcnQ6IDkwOTAKICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2Uubm9kZVBvcnQucG9ydCB9fQogICAgbmFtZTogaHR0cC1wcm9tZXRoZXVzCiAgc2VsZWN0b3I6CiAgICBhcHA6IHByb21ldGhldXMKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/prometheus/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IHByb21ldGhldXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogcHJvbWV0aGV1cwogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwcm9tZXRoZXVzLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/prometheus/templates/tests/test-prometheus-connection.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmVuYWJsZUhlbG1UZXN0IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAicHJvbWV0aGV1cy5mdWxsbmFtZSIgLiB9fS10ZXN0CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHByb21ldGhldXMtdGVzdAogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJwcm9tZXRoZXVzLmNoYXJ0IiAuIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgaXN0aW86IHByb21ldGhldXMKICBhbm5vdGF0aW9uczoKICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICBoZWxtLnNoL2hvb2s6IHRlc3Qtc3VjY2VzcwpzcGVjOgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgY29udGFpbmVyczoKICAgIC0gbmFtZTogInt7IHRlbXBsYXRlICJwcm9tZXRoZXVzLmZ1bGxuYW1lIiAuIH19LXRlc3QiCiAgICAgIGltYWdlOiB7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0ve3sgLlZhbHVlcy5nbG9iYWwucHJveHkuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19CiAgICAgIGltYWdlUHVsbFBvbGljeTogInt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fSIKICAgICAgY29tbWFuZDogWydzaCcsICctYycsICdmb3IgaSBpbiAxIDIgMzsgZG8gY3VybCBodHRwOi8vcHJvbWV0aGV1czo5MDkwLy0vcmVhZHkgJiYgZXhpdCAwIHx8IHNsZWVwIDE1OyBkb25lOyBleGl0IDEnXQogIHJlc3RhcnRQb2xpY3k6IE5ldmVyCiAgYWZmaW5pdHk6CiAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDQgfX0KICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/prometheus/values.yaml",
          "fileContents": "IwojIGFkZG9uIHByb21ldGhldXMgY29uZmlndXJhdGlvbgojCmVuYWJsZWQ6IHRydWUKcmVwbGljYUNvdW50OiAxCmh1YjogZG9ja2VyLmlvL3Byb20KdGFnOiB2Mi44LjAKcmV0ZW50aW9uOiA2aApub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10KCiMgQ29udHJvbHMgdGhlIGZyZXF1ZW5jeSBvZiBwcm9tZXRoZXVzIHNjcmFwaW5nCnNjcmFwZUludGVydmFsOiAxNXMKCmNvbnRleHRQYXRoOiAvcHJvbWV0aGV1cwoKaW5ncmVzczoKICBlbmFibGVkOiBmYWxzZQogICMjIFVzZWQgdG8gY3JlYXRlIGFuIEluZ3Jlc3MgcmVjb3JkLgogIGhvc3RzOgogICAgLSBwcm9tZXRoZXVzLmxvY2FsCiAgYW5ub3RhdGlvbnM6CiAgICAjIGt1YmVybmV0ZXMuaW8vaW5ncmVzcy5jbGFzczogbmdpbngKICAgICMga3ViZXJuZXRlcy5pby90bHMtYWNtZTogInRydWUiCiAgdGxzOgogICAgIyBTZWNyZXRzIG11c3QgYmUgbWFudWFsbHkgY3JlYXRlZCBpbiB0aGUgbmFtZXNwYWNlLgogICAgIyAtIHNlY3JldE5hbWU6IHByb21ldGhldXMtdGxzCiAgICAjICAgaG9zdHM6CiAgICAjICAgICAtIHByb21ldGhldXMubG9jYWwKCnNlcnZpY2U6CiAgYW5ub3RhdGlvbnM6IHt9CiAgbm9kZVBvcnQ6CiAgICBlbmFibGVkOiBmYWxzZQogICAgcG9ydDogMzIwOTAKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "charts/security/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogc2VjdXJpdHkKdmVyc2lvbjogMS4xLjAKYXBwVmVyc2lvbjogMS4xLjAKdGlsbGVyVmVyc2lvbjogIj49Mi43LjIiCmRlc2NyaXB0aW9uOiBIZWxtIGNoYXJ0IGZvciBpc3RpbyBhdXRoZW50aWNhdGlvbgprZXl3b3JkczoKICAtIGlzdGlvCiAgLSBzZWN1cml0eQpzb3VyY2VzOgogIC0gaHR0cDovL2dpdGh1Yi5jb20vaXN0aW8vaXN0aW8KZW5naW5lOiBnb3RwbAppY29uOiBodHRwczovL2lzdGlvLmlvL2Zhdmljb25zL2FuZHJvaWQtMTkyeDE5Mi5wbmcK"
        },
        {
          "filePath": "charts/security/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAic2VjdXJpdHkubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAic2VjdXJpdHkuZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJzZWN1cml0eS5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/security/templates/cleanup-secrets.yaml",
          "fileContents": "IyBUaGUgcmVhc29uIGZvciBjcmVhdGluZyBhIFNlcnZpY2VBY2NvdW50IGFuZCBDbHVzdGVyUm9sZSBzcGVjaWZpY2FsbHkgZm9yIHRoaXMKIyBwb3N0LWRlbGV0ZSBob29rZWQgam9iIGlzIGJlY2F1c2UgdGhlIGNpdGFkZWwgU2VydmljZUFjY291bnQgaXMgYmVpbmcgZGVsZXRlZAojIGJlZm9yZSB0aGlzIGhvb2sgaXMgbGF1bmNoZWQuIE9uIHRoZSBvdGhlciBoYW5kLCBydW5uaW5nIHRoaXMgaG9vayBiZWZvcmUgdGhlCiMgZGVsZXRpb24gb2YgdGhlIGNpdGFkZWwgKGUuZy4gcHJlLWRlbGV0ZSkgd29uJ3QgZGVsZXRlIHRoZSBzZWNyZXRzIGJlY2F1c2UgdGhleQojIHdpbGwgYmUgcmUtY3JlYXRlZCBpbW1lZGlhdGVseSBieSB0aGUgdG8tYmUtZGVsZXRlZCBjaXRhZGVsLgojCiMgSXQncyBhbHNvIGltcG9ydGFudCB0aGF0IHRoZSBTZXJ2aWNlQWNjb3VudCwgQ2x1c3RlclJvbGUgYW5kIENsdXN0ZXJSb2xlQmluZGluZwojIHdpbGwgYmUgcmVhZHkgYmVmb3JlIHJ1bm5pbmcgdGhlIGhvb2tlZCBKb2IgdGhlcmVmb3JlIHRoZSBob29rIHdlaWdodHMuCgphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAp7ey0gaWYgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQppbWFnZVB1bGxTZWNyZXRzOgp7ey0gcmFuZ2UgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQogIC0gbmFtZToge3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXNlcnZpY2UtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1kZWxldGUKICAgICJoZWxtLnNoL2hvb2stZGVsZXRlLXBvbGljeSI6IGhvb2stc3VjY2VlZGVkCiAgICAiaGVsbS5zaC9ob29rLXdlaWdodCI6ICIxIgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxTZWNyZXRzIH19CmltYWdlUHVsbFNlY3JldHM6Cnt7LSByYW5nZSAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxTZWNyZXRzIH19Ci0gbmFtZToge3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHBvc3QtZGVsZXRlCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogICAgImhlbG0uc2gvaG9vay13ZWlnaHQiOiAiMSIKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VjcmV0cyJdCiAgdmVyYnM6IFsibGlzdCIsICJkZWxldGUiXQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHBvc3QtZGVsZXRlCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogICAgImhlbG0uc2gvaG9vay13ZWlnaHQiOiAiMiIKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1jbGVhbnVwLXNlY3JldHMte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IGlzdGlvLWNsZWFudXAtc2VjcmV0cy1zZXJ2aWNlLWFjY291bnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Ci0tLQphcGlWZXJzaW9uOiBiYXRjaC92MQpraW5kOiBKb2IKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXt7IC5WYWx1ZXMuZ2xvYmFsLnRhZyB8IHByaW50ZiAiJXYiIHwgdHJ1bmMgMzIgfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHBvc3QtZGVsZXRlCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogICAgImhlbG0uc2gvaG9vay13ZWlnaHQiOiAiMyIKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIG5hbWU6IGlzdGlvLWNsZWFudXAtc2VjcmV0cwogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tY2xlYW51cC1zZWNyZXRzLXNlcnZpY2UtYWNjb3VudAogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZToga3ViZWN0bAogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0va3ViZWN0bDp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgICAgY29tbWFuZDoKICAgICAgICAgIC0gL2Jpbi9iYXNoCiAgICAgICAgICAtIC1jCiAgICAgICAgICAtID4KICAgICAgICAgICAgICBrdWJlY3RsIGdldCBzZWNyZXQgLS1hbGwtbmFtZXNwYWNlcyB8IGdyZXAgImlzdGlvLmlvL2tleS1hbmQtY2VydCIgfCAgd2hpbGUgcmVhZCAtciBlbnRyeTsgZG8KICAgICAgICAgICAgICAgIG5zPSQoZWNobyAkZW50cnkgfCBhd2sgJ3twcmludCAkMX0nKTsKICAgICAgICAgICAgICAgIG5hbWU9JChlY2hvICRlbnRyeSB8IGF3ayAne3ByaW50ICQyfScpOwogICAgICAgICAgICAgICAga3ViZWN0bCBkZWxldGUgc2VjcmV0ICRuYW1lIC1uICRuczsKICAgICAgICAgICAgICBkb25lCiAgICAgIHJlc3RhcnRQb2xpY3k6IE9uRmFpbHVyZQogICAgICBhZmZpbml0eToKICAgICAge3stIGluY2x1ZGUgIm5vZGVhZmZpbml0eSIgLiB8IGluZGVudCA2IH19CiAgICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQo="
        },
        {
          "filePath": "charts/security/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1jaXRhZGVsLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnJ1bGVzOgotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJjb25maWdtYXBzIl0KICB2ZXJiczogWyJjcmVhdGUiLCAiZ2V0IiwgInVwZGF0ZSJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlY3JldHMiXQogIHZlcmJzOiBbImNyZWF0ZSIsICJnZXQiLCAid2F0Y2giLCAibGlzdCIsICJ1cGRhdGUiLCAiZGVsZXRlIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VydmljZWFjY291bnRzIiwgInNlcnZpY2VzIl0KICB2ZXJiczogWyJnZXQiLCAid2F0Y2giLCAibGlzdCJdCi0gYXBpR3JvdXBzOiBbImF1dGhlbnRpY2F0aW9uLms4cy5pbyJdCiAgcmVzb3VyY2VzOiBbInRva2VucmV2aWV3cyJdCiAgdmVyYnM6IFsiY3JlYXRlIl0K"
        },
        {
          "filePath": "charts/security/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2l0YWRlbC17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1jaXRhZGVsLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1jaXRhZGVsLXNlcnZpY2UtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/security/templates/configmap.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNlY3VyaXR5LWN1c3RvbS1yZXNvdXJjZXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBpc3RpbzogY2l0YWRlbApkYXRhOgogIGN1c3RvbS1yZXNvdXJjZXMueWFtbDogfC0KICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5tdGxzLmVuYWJsZWQgfX0KICAgICAge3stIGluY2x1ZGUgInNlY3VyaXR5LWRlZmF1bHQueWFtbC50cGwiIC4gfCBpbmRlbnQgNH19CiAgICB7ey0gZWxzZSB9fQogICAgICB7ey0gaW5jbHVkZSAic2VjdXJpdHktcGVybWlzc2l2ZS55YW1sLnRwbCIgLiB8IGluZGVudCA0fX0KICAgIHt7LSBlbmQgfX0KICBydW4uc2g6IHwtCiAgICB7ey0gaW5jbHVkZSAiaW5zdGFsbC1jdXN0b20tcmVzb3VyY2VzLnNoLnRwbCIgLiB8IGluZGVudCA0fX0K"
        },
        {
          "filePath": "charts/security/templates/create-custom-resources-job.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuY3JlYXRlTWVzaFBvbGljeSB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwtYWNjb3VudAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbImF1dGhlbnRpY2F0aW9uLmlzdGlvLmlvIl0gIyBuZWVkZWQgdG8gY3JlYXRlIGRlZmF1bHQgYXV0aG4gcG9saWN5CiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbIioiXQotIGFwaUdyb3VwczogWyJuZXR3b3JraW5nLmlzdGlvLmlvIl0gIyBuZWVkZWQgdG8gY3JlYXRlIHNlY3VyaXR5IGRlc3RpbmF0aW9uIHJ1bGVzCiAgcmVzb3VyY2VzOiBbIioiXQogIHZlcmJzOiBbIioiXQotIGFwaUdyb3VwczogWyJhZG1pc3Npb25yZWdpc3RyYXRpb24uazhzLmlvIl0KICByZXNvdXJjZXM6IFsidmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9ucyJdCiAgdmVyYnM6IFsiZ2V0Il0KLSBhcGlHcm91cHM6IFsiZXh0ZW5zaW9ucyIsICJhcHBzIl0KICByZXNvdXJjZXM6IFsiZGVwbG95bWVudHMiLCAicmVwbGljYXNldHMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2VjdXJpdHktcG9zdC1pbnN0YWxsLXJvbGUtYmluZGluZy17eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IGlzdGlvLXNlY3VyaXR5LXBvc3QtaW5zdGFsbC1hY2NvdW50CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQotLS0KYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNlY3VyaXR5LXBvc3QtaW5zdGFsbC17eyAuVmFsdWVzLmdsb2JhbC50YWcgfCBwcmludGYgIiV2IiB8IHRydW5jIDMyICB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogcG9zdC1pbnN0YWxsCiAgICAiaGVsbS5zaC9ob29rLWRlbGV0ZS1wb2xpY3kiOiBob29rLXN1Y2NlZWRlZAogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogaXN0aW8tc2VjdXJpdHktcG9zdC1pbnN0YWxsCiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICAgICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5jaGFydCIgLiB9fQogICAgICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBpc3Rpby1zZWN1cml0eS1wb3N0LWluc3RhbGwtYWNjb3VudAogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZToga3ViZWN0bAogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0va3ViZWN0bDp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0iCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgICAgY29tbWFuZDogWyAiL2Jpbi9iYXNoIiwgIi90bXAvc2VjdXJpdHkvcnVuLnNoIiwgIi90bXAvc2VjdXJpdHkvY3VzdG9tLXJlc291cmNlcy55YW1sIiBdCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAiL3RtcC9zZWN1cml0eSIKICAgICAgICAgICAgICBuYW1lOiB0bXAtY29uZmlnbWFwLXNlY3VyaXR5CiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiB0bXAtY29uZmlnbWFwLXNlY3VyaXR5CiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGlzdGlvLXNlY3VyaXR5LWN1c3RvbS1yZXNvdXJjZXMKICAgICAgcmVzdGFydFBvbGljeTogT25GYWlsdXJlCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/security/templates/deployment.yaml",
          "fileContents": "IyBpc3RpbyBDQSB3YXRjaGluZyBhbGwgbmFtZXNwYWNlcwphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tY2l0YWRlbAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBjaXRhZGVsCnNwZWM6CiAgcmVwbGljYXM6IDEKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBpc3RpbzogY2l0YWRlbAogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDEKICAgICAgbWF4VW5hdmFpbGFibGU6IDAKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgICBpc3RpbzogY2l0YWRlbAogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzaWRlY2FyLmlzdGlvLmlvL2luamVjdDogImZhbHNlIgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBpc3Rpby1jaXRhZGVsLXNlcnZpY2UtYWNjb3VudAp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogY2l0YWRlbAp7ey0gaWYgY29udGFpbnMgIi8iIC5WYWx1ZXMuaW1hZ2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZSB9fSIKe3stIGVsc2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19Igp7ey0gZW5kIH19CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgYXJnczoKICAgICAgICAgICAgLSAtLWFwcGVuZC1kbnMtbmFtZXM9dHJ1ZQogICAgICAgICAgICAtIC0tZ3JwYy1wb3J0PTgwNjAKICAgICAgICAgICAgLSAtLWNpdGFkZWwtc3RvcmFnZS1uYW1lc3BhY2U9e3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICAgICAgICAgIC0gLS1jdXN0b20tZG5zLW5hbWVzPWlzdGlvLXBpbG90LXNlcnZpY2UtYWNjb3VudC57eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX06aXN0aW8tcGlsb3Que3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICAgICAgICAgIC0gLS1tb25pdG9yaW5nLXBvcnQ9e3sgLlZhbHVlcy5nbG9iYWwubW9uaXRvcmluZ1BvcnQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlbGZTaWduZWQgfX0KICAgICAgICAgICAgLSAtLXNlbGYtc2lnbmVkLWNhPXRydWUKICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAgIC0gLS1zZWxmLXNpZ25lZC1jYT1mYWxzZQogICAgICAgICAgICAtIC0tc2lnbmluZy1jZXJ0PS9ldGMvY2FjZXJ0cy9jYS1jZXJ0LnBlbQogICAgICAgICAgICAtIC0tc2lnbmluZy1rZXk9L2V0Yy9jYWNlcnRzL2NhLWtleS5wZW0KICAgICAgICAgICAgLSAtLXJvb3QtY2VydD0vZXRjL2NhY2VydHMvcm9vdC1jZXJ0LnBlbQogICAgICAgICAgICAtIC0tY2VydC1jaGFpbj0vZXRjL2NhY2VydHMvY2VydC1jaGFpbi5wZW0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC50cnVzdERvbWFpbiB9fQogICAgICAgICAgICAtIC0tdHJ1c3QtZG9tYWluPXt7IC5WYWx1ZXMuZ2xvYmFsLnRydXN0RG9tYWluIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC92ZXJzaW9uCiAgICAgICAgICAgICAgcG9ydDoge3sgLlZhbHVlcy5nbG9iYWwubW9uaXRvcmluZ1BvcnQgfX0KICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiA1CiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQp7ey0gaWYgbm90IC5WYWx1ZXMuc2VsZlNpZ25lZCB9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBuYW1lOiBjYWNlcnRzCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jYWNlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogY2FjZXJ0cwogICAgICAgIHNlY3JldDoKICAgICAgICAgc2VjcmV0TmFtZTogY2FjZXJ0cwogICAgICAgICBvcHRpb25hbDogdHJ1ZQp7ey0gZW5kIH19CiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cnt7LSBpZiAuVmFsdWVzLnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOgp7eyB0b1lhbWwgLlZhbHVlcy50b2xlcmF0aW9ucyB8IGluZGVudCA2IH19Cnt7LSBlbmQgfX0="
        },
        {
          "filePath": "charts/security/templates/enable-mesh-mtls.yaml",
          "fileContents": "e3stIGRlZmluZSAic2VjdXJpdHktZGVmYXVsdC55YW1sLnRwbCIgfX0KIyBUaGVzZSBwb2xpY3kgYW5kIGRlc3RpbmF0aW9uIHJ1bGVzIGVmZmVjdGl2ZWx5IGVuYWJsZSBtVExTIGZvciBhbGwgc2VydmljZXMgaW4gdGhlIG1lc2guIEZvciBub3csCiMgdGhleSBhcmUgYWRkZWQgdG8gSXN0aW8gaW5zdGFsbGF0aW9uIHlhbWwgZm9yIGJhY2t3YXJkIGNvbXBhdGlibGUuIEluIGZ1dHVyZSwgdGhleSBzaG91bGQgYmUgaW4KIyBhIHNlcGFyYXRlZCB5YW1sIGZpbGUgc28gdGhhdCBjdXN0b21lciBjYW4gZW5hYmxlIG1UTFMgaW5kZXBlbmRlbnQgZnJvbSBpbnN0YWxsYXRpb24uCgojIEF1dGhlbnRpY2F0aW9uIHBvbGljeSB0byBlbmFibGUgbXV0dWFsIFRMUyBmb3IgYWxsIHNlcnZpY2VzICh0aGF0IGhhdmUgc2lkZWNhcikgaW4gdGhlIG1lc2guCmFwaVZlcnNpb246ICJhdXRoZW50aWNhdGlvbi5pc3Rpby5pby92MWFscGhhMSIKa2luZDogIk1lc2hQb2xpY3kiCm1ldGFkYXRhOgogIG5hbWU6ICJkZWZhdWx0IgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgcGVlcnM6CiAgLSBtdGxzOiB7fQotLS0KIyBDb3JyZXNwb25kaW5nIGRlc3RpbmF0aW9uIHJ1bGUgdG8gY29uZmlndXJlIGNsaWVudCBzaWRlIHRvIHVzZSBtdXR1YWwgVExTIHdoZW4gdGFsa2luZyB0bwojIGFueSBzZXJ2aWNlIChob3N0KSBpbiB0aGUgbWVzaC4KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBEZXN0aW5hdGlvblJ1bGUKbWV0YWRhdGE6CiAgbmFtZTogImRlZmF1bHQiCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIGhvc3Q6ICIqLmxvY2FsIgogIHt7LSBpZiAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0Q29uZmlnVmlzaWJpbGl0eVNldHRpbmdzIH19CiAgZXhwb3J0VG86CiAgLSAnKicKICB7ey0gZW5kIH19CiAgdHJhZmZpY1BvbGljeToKICAgIHRsczoKICAgICAgbW9kZTogSVNUSU9fTVVUVUFMCi0tLQojIERlc3RpbmF0aW9uIHJ1bGUgdG8gZGlzYWJsZSAobSlUTFMgd2hlbiB0YWxraW5nIHRvIEFQSSBzZXJ2ZXIsIGFzIEFQSSBzZXJ2ZXIgZG9lc24ndCBoYXZlIHNpZGVjYXIuCiMgQ3VzdG9tZXIgc2hvdWxkIGFkZCBzaW1pbGFyIGRlc3RpbmF0aW9uIHJ1bGVzIGZvciBvdGhlciBzZXJ2aWNlcyB0aGF0IGRvbid0IGhhdmUgc2lkZWNhci4KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBEZXN0aW5hdGlvblJ1bGUKbWV0YWRhdGE6CiAgbmFtZTogImFwaS1zZXJ2ZXIiCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQpzcGVjOgogIGhvc3Q6ICJrdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLnt7IC5WYWx1ZXMuZ2xvYmFsLnByb3h5LmNsdXN0ZXJEb21haW4gfX0iCiAge3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRDb25maWdWaXNpYmlsaXR5U2V0dGluZ3MgfX0KICBleHBvcnRUbzoKICAtICcqJwogIHt7LSBlbmQgfX0KICB0cmFmZmljUG9saWN5OgogICAgdGxzOgogICAgICBtb2RlOiBESVNBQkxFCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/security/templates/enable-mesh-permissive.yaml",
          "fileContents": "e3stIGRlZmluZSAic2VjdXJpdHktcGVybWlzc2l2ZS55YW1sLnRwbCIgfX0KIyBBdXRoZW50aWNhdGlvbiBwb2xpY3kgdG8gZW5hYmxlIHBlcm1pc3NpdmUgbW9kZSBmb3IgYWxsIHNlcnZpY2VzICh0aGF0IGhhdmUgc2lkZWNhcikgaW4gdGhlIG1lc2guCmFwaVZlcnNpb246ICJhdXRoZW50aWNhdGlvbi5pc3Rpby5pby92MWFscGhhMSIKa2luZDogIk1lc2hQb2xpY3kiCm1ldGFkYXRhOgogIG5hbWU6ICJkZWZhdWx0IgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgcGVlcnM6CiAgLSBtdGxzOgogICAgICBtb2RlOiBQRVJNSVNTSVZFCnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/security/templates/meshexpansion.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLm1lc2hFeHBhbnNpb24uZW5hYmxlZCB9fQp7ey0gaWYgLlZhbHVlcy5nbG9iYWwubWVzaEV4cGFuc2lvbi51c2VJTEIgfX0KYXBpVmVyc2lvbjogbmV0d29ya2luZy5pc3Rpby5pby92MWFscGhhMwpraW5kOiBWaXJ0dWFsU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBtZXNoZXhwYW5zaW9uLXZzLWNpdGFkZWwtaWxiCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IGNpdGFkZWwKc3BlYzoKICBob3N0czoKICAtIGlzdGlvLWNpdGFkZWwue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2Yy57eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5jbHVzdGVyRG9tYWluIH19CiAgZ2F0ZXdheXM6CiAgLSBtZXNoZXhwYW5zaW9uLWlsYi1nYXRld2F5CiAgdGNwOgogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDgwNjAKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBpc3Rpby1jaXRhZGVsLnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDgwNjAKLS0tCnt7LSBlbHNlIH19CgphcGlWZXJzaW9uOiBuZXR3b3JraW5nLmlzdGlvLmlvL3YxYWxwaGEzCmtpbmQ6IFZpcnR1YWxTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IG1lc2hleHBhbnNpb24tdnMtY2l0YWRlbAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBjaXRhZGVsCnNwZWM6CiAgaG9zdHM6CiAgLSBpc3Rpby1jaXRhZGVsLnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogIGdhdGV3YXlzOgogIC0gbWVzaGV4cGFuc2lvbi1nYXRld2F5CiAgdGNwOgogIC0gbWF0Y2g6CiAgICAtIHBvcnQ6IDgwNjAKICAgIHJvdXRlOgogICAgLSBkZXN0aW5hdGlvbjoKICAgICAgICBob3N0OiBpc3Rpby1jaXRhZGVsLnt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fS5zdmMue3sgLlZhbHVlcy5nbG9iYWwucHJveHkuY2x1c3RlckRvbWFpbiB9fQogICAgICAgIHBvcnQ6CiAgICAgICAgICBudW1iZXI6IDgwNjAKLS0tCnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
        },
        {
          "filePath": "charts/security/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICAjIHdlIHVzZSB0aGUgbm9ybWFsIG5hbWUgaGVyZSAoZS5nLiAncHJvbWV0aGV1cycpCiAgIyBhcyBncmFmYW5hIGlzIGNvbmZpZ3VyZWQgdG8gdXNlIHRoaXMgYXMgYSBkYXRhIHNvdXJjZQogIG5hbWU6IGlzdGlvLWNpdGFkZWwKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNlY3VyaXR5Lm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBpc3RpbzogY2l0YWRlbApzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiBncnBjLWNpdGFkZWwKICAgICAgcG9ydDogODA2MAogICAgICB0YXJnZXRQb3J0OiA4MDYwCiAgICAgIHByb3RvY29sOiBUQ1AKICAgIC0gbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuZ2xvYmFsLm1vbml0b3JpbmdQb3J0IH19CiAgc2VsZWN0b3I6CiAgICBpc3RpbzogY2l0YWRlbAo="
        },
        {
          "filePath": "charts/security/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLWNpdGFkZWwtc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzZWN1cml0eS5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNlY3VyaXR5LmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQo="
        },
        {
          "filePath": "charts/security/templates/tests/test-citadel-connection.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmVuYWJsZUhlbG1UZXN0IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuZnVsbG5hbWUiIC4gfX0tdGVzdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiBpc3Rpby1jaXRhZGVsLXRlc3QKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2VjdXJpdHkuY2hhcnQiIC4gfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICBpc3RpbzogY2l0YWRlbAogIGFubm90YXRpb25zOgogICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgIGhlbG0uc2gvaG9vazogdGVzdC1zdWNjZXNzCnNwZWM6Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICBjb250YWluZXJzOgogICAgLSBuYW1lOiAie3sgdGVtcGxhdGUgInNlY3VyaXR5LmZ1bGxuYW1lIiAuIH19LXRlc3QiCiAgICAgIGltYWdlOiB7eyAuVmFsdWVzLmdsb2JhbC5odWIgfX0ve3sgLlZhbHVlcy5nbG9iYWwucHJveHkuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19CiAgICAgIGltYWdlUHVsbFBvbGljeTogInt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fSIKICAgICAgY29tbWFuZDogWydzaCcsICctYycsICdmb3IgaSBpbiAxIDIgMzsgZG8gY3VybCBodHRwOi8vaXN0aW8tY2l0YWRlbDo4MDYwLy0vcmVhZHkgJiYgZXhpdCAwIHx8IHNsZWVwIDE1OyBkb25lOyBleGl0IDEnXQogIHJlc3RhcnRQb2xpY3k6IE5ldmVyCiAgYWZmaW5pdHk6CiAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDQgfX0KICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "charts/security/values.yaml",
          "fileContents": "IwojIHNlY3VyaXR5IGNvbmZpZ3VyYXRpb24KIwplbmFibGVkOiB0cnVlCmltYWdlOiBjaXRhZGVsCnNlbGZTaWduZWQ6IHRydWUgIyBpbmRpY2F0ZSBpZiBzZWxmLXNpZ25lZCBDQSBpcyB1c2VkLgpjcmVhdGVNZXNoUG9saWN5OiB0cnVlCm5vZGVTZWxlY3Rvcjoge30KdG9sZXJhdGlvbnM6IFtdCgojIFNwZWNpZnkgdGhlIHBvZCBhbnRpLWFmZmluaXR5IHRoYXQgYWxsb3dzIHlvdSB0byBjb25zdHJhaW4gd2hpY2ggbm9kZXMKIyB5b3VyIHBvZCBpcyBlbGlnaWJsZSB0byBiZSBzY2hlZHVsZWQgYmFzZWQgb24gbGFiZWxzIG9uIHBvZHMgdGhhdCBhcmUKIyBhbHJlYWR5IHJ1bm5pbmcgb24gdGhlIG5vZGUgcmF0aGVyIHRoYW4gYmFzZWQgb24gbGFiZWxzIG9uIG5vZGVzLgojIFRoZXJlIGFyZSBjdXJyZW50bHkgdHdvIHR5cGVzIG9mIGFudGktYWZmaW5pdHk6CiMgICAgInJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgICAgInByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojIHdoaWNoIGRlbm90ZSDigJxoYXJk4oCdIHZzLiDigJxzb2Z04oCdIHJlcXVpcmVtZW50cywgeW91IGNhbiBkZWZpbmUgeW91ciB2YWx1ZXMKIyBpbiAicG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciIgYW5kICJwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvciIKIyBjb3JyZXNwb25kaW5nbHkuCiMgRm9yIGV4YW1wbGU6CiMgcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjoKIyAtIGtleTogc2VjdXJpdHkKIyAgIG9wZXJhdG9yOiBJbgojICAgdmFsdWVzOiBTMSxTMgojICAgdG9wb2xvZ3lLZXk6ICJrdWJlcm5ldGVzLmlvL2hvc3RuYW1lIgojIFRoaXMgcG9kIGFudGktYWZmaW5pdHkgcnVsZSBzYXlzIHRoYXQgdGhlIHBvZCByZXF1aXJlcyBub3QgdG8gYmUgc2NoZWR1bGVkCiMgb250byBhIG5vZGUgaWYgdGhhdCBub2RlIGlzIGFscmVhZHkgcnVubmluZyBhIHBvZCB3aXRoIGxhYmVsIGhhdmluZyBrZXkKIyDigJxzZWN1cml0eeKAnSBhbmQgdmFsdWUg4oCcUzHigJ0uCnBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6IFtdCnBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yOiBbXQo="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKbmFtZTogc2lkZWNhckluamVjdG9yV2ViaG9vawp2ZXJzaW9uOiAxLjEuMAphcHBWZXJzaW9uOiAxLjEuMAp0aWxsZXJWZXJzaW9uOiAiPj0yLjcuMiIKZGVzY3JpcHRpb246IEhlbG0gY2hhcnQgZm9yIHNpZGVjYXIgaW5qZWN0b3Igd2ViaG9vayBkZXBsb3ltZW50CmtleXdvcmRzOgogIC0gaXN0aW8KICAtIHNpZGVjYXJJbmplY3RvcldlYmhvb2sKc291cmNlczoKICAtIGh0dHA6Ly9naXRodWIuY29tL2lzdGlvL2lzdGlvCmVuZ2luZTogZ290cGwKaWNvbjogaHR0cHM6Ly9pc3Rpby5pby9mYXZpY29ucy9hbmRyb2lkLTE5MngxOTIucG5nCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/OWNERS",
          "fileContents": "YXBwcm92ZXJzOgogIC0gb3N0cm9tYXJ0Cg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAic2lkZWNhci1pbmplY3Rvci5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJzaWRlY2FyLWluamVjdG9yLmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAic2lkZWNhci1pbmplY3Rvci5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/clusterrole.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNpZGVjYXItaW5qZWN0b3IubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IHNpZGVjYXItaW5qZWN0b3IKcnVsZXM6Ci0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLSBhcGlHcm91cHM6IFsiYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pbyJdCiAgcmVzb3VyY2VzOiBbIm11dGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb25zIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCIsICJwYXRjaCJdCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3Rvci1hZG1pbi1yb2xlLWJpbmRpbmcte3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2lkZWNhci1pbmplY3Rvci5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInNpZGVjYXItaW5qZWN0b3IuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBpc3Rpbzogc2lkZWNhci1pbmplY3Rvcgpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yLXt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yLXNlcnZpY2UtYWNjb3VudAogICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0K"
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/deployment.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3IKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNpZGVjYXItaW5qZWN0b3IubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IHNpZGVjYXItaW5qZWN0b3IKc3BlYzoKICByZXBsaWNhczoge3sgLlZhbHVlcy5yZXBsaWNhQ291bnQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBpc3Rpbzogc2lkZWNhci1pbmplY3RvcgogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDEKICAgICAgbWF4VW5hdmFpbGFibGU6IDAKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB7eyB0ZW1wbGF0ZSAic2lkZWNhci1pbmplY3Rvci5uYW1lIiAuIH19CiAgICAgICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLmNoYXJ0IiAuIH19CiAgICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICAgICAgaXN0aW86IHNpZGVjYXItaW5qZWN0b3IKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3Rvci1zZXJ2aWNlLWFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiAie3sgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0iCnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IHNpZGVjYXItaW5qZWN0b3Itd2ViaG9vawp7ey0gaWYgY29udGFpbnMgIi8iIC5WYWx1ZXMuaW1hZ2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZSB9fSIKe3stIGVsc2UgfX0KICAgICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5nbG9iYWwuaHViIH19L3t7IC5WYWx1ZXMuaW1hZ2UgfX06e3sgLlZhbHVlcy5nbG9iYWwudGFnIH19Igp7ey0gZW5kIH19CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFBvbGljeSB9fQogICAgICAgICAgYXJnczoKICAgICAgICAgICAgLSAtLWNhQ2VydEZpbGU9L2V0Yy9pc3Rpby9jZXJ0cy9yb290LWNlcnQucGVtCiAgICAgICAgICAgIC0gLS10bHNDZXJ0RmlsZT0vZXRjL2lzdGlvL2NlcnRzL2NlcnQtY2hhaW4ucGVtCiAgICAgICAgICAgIC0gLS10bHNLZXlGaWxlPS9ldGMvaXN0aW8vY2VydHMva2V5LnBlbQogICAgICAgICAgICAtIC0taW5qZWN0Q29uZmlnPS9ldGMvaXN0aW8vaW5qZWN0L2NvbmZpZwogICAgICAgICAgICAtIC0tbWVzaENvbmZpZz0vZXRjL2lzdGlvL2NvbmZpZy9tZXNoCiAgICAgICAgICAgIC0gLS1oZWFsdGhDaGVja0ludGVydmFsPTJzCiAgICAgICAgICAgIC0gLS1oZWFsdGhDaGVja0ZpbGU9L2hlYWx0aAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jb25maWcKICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAgIC0gbmFtZTogY2VydHMKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2NlcnRzCiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICAtIG5hbWU6IGluamVjdC1jb25maWcKICAgICAgICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2luamVjdAogICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zaWRlY2FyLWluamVjdG9yCiAgICAgICAgICAgICAgICAtIHByb2JlCiAgICAgICAgICAgICAgICAtIC0tcHJvYmUtcGF0aD0vaGVhbHRoCiAgICAgICAgICAgICAgICAtIC0taW50ZXJ2YWw9NHMKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNAogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiA0CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvdXNyL2xvY2FsL2Jpbi9zaWRlY2FyLWluamVjdG9yCiAgICAgICAgICAgICAgICAtIHByb2JlCiAgICAgICAgICAgICAgICAtIC0tcHJvYmUtcGF0aD0vaGVhbHRoCiAgICAgICAgICAgICAgICAtIC0taW50ZXJ2YWw9NHMKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogNAogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiA0CiAgICAgICAgICByZXNvdXJjZXM6Cnt7LSBpZiAuVmFsdWVzLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQogICAgICB2b2x1bWVzOgogICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICBuYW1lOiBpc3RpbwogICAgICAtIG5hbWU6IGNlcnRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZTogaXN0aW8uaXN0aW8tc2lkZWNhci1pbmplY3Rvci1zZXJ2aWNlLWFjY291bnQKICAgICAgLSBuYW1lOiBpbmplY3QtY29uZmlnCiAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3RvcgogICAgICAgICAgaXRlbXM6CiAgICAgICAgICAtIGtleTogY29uZmlnCiAgICAgICAgICAgIHBhdGg6IGNvbmZpZwogICAgICAgICAgLSBrZXk6IHZhbHVlcwogICAgICAgICAgICBwYXRoOiB2YWx1ZXMKICAgICAgYWZmaW5pdHk6CiAgICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQogICAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0K"
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/mutatingwebhook.yaml",
          "fileContents": "YXBpVmVyc2lvbjogYWRtaXNzaW9ucmVnaXN0cmF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IE11dGF0aW5nV2ViaG9va0NvbmZpZ3VyYXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tc2lkZWNhci1pbmplY3RvcgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgInNpZGVjYXItaW5qZWN0b3IubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQp3ZWJob29rczoKICAtIG5hbWU6IHNpZGVjYXItaW5qZWN0b3IuaXN0aW8uaW8KICAgIGNsaWVudENvbmZpZzoKICAgICAgc2VydmljZToKICAgICAgICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgICAgICAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgICAgICBwYXRoOiAiL2luamVjdCIKICAgICAgY2FCdW5kbGU6ICIiCiAgICBydWxlczoKICAgICAgLSBvcGVyYXRpb25zOiBbICJDUkVBVEUiIF0KICAgICAgICBhcGlHcm91cHM6IFsiIl0KICAgICAgICBhcGlWZXJzaW9uczogWyJ2MSJdCiAgICAgICAgcmVzb3VyY2VzOiBbInBvZHMiXQogICAgZmFpbHVyZVBvbGljeTogRmFpbAogICAgbmFtZXNwYWNlU2VsZWN0b3I6Cnt7LSBpZiAuVmFsdWVzLmVuYWJsZU5hbWVzcGFjZXNCeURlZmF1bHQgfX0KICAgICAgbWF0Y2hFeHByZXNzaW9uczoKICAgICAgLSBrZXk6IG5hbWUKICAgICAgICBvcGVyYXRvcjogTm90SW4KICAgICAgICB2YWx1ZXM6CiAgICAgICAgLSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICAgICAgLSBrZXk6IGlzdGlvLWluamVjdGlvbgogICAgICAgIG9wZXJhdG9yOiBOb3RJbgogICAgICAgIHZhbHVlczoKICAgICAgICAtIGRpc2FibGVkCnt7LSBlbHNlIH19CiAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgIGlzdGlvLWluamVjdGlvbjogZW5hYmxlZAp7ey0gZW5kIH19Cgo="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/poddisruptionbudget.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRQb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLm5hbWUiIC4gfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBzaWRlY2FyLWluamVjdG9yCnNwZWM6Cnt7IGluY2x1ZGUgInBvZERpc3J1cHRpb25CdWRnZXQuc3BlYyIgLlZhbHVlcy5nbG9iYWwuZGVmYXVsdFBvZERpc3J1cHRpb25CdWRnZXQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLm5hbWUiIC4gfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgICBpc3Rpbzogc2lkZWNhci1pbmplY3RvcgogICAge3stIGVuZCB9fQ=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2lkZWNhci1pbmplY3Rvci5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBzaWRlY2FyLWluamVjdG9yCnNwZWM6CiAgcG9ydHM6CiAgLSBwb3J0OiA0NDMKICBzZWxlY3RvcjoKICAgIGlzdGlvOiBzaWRlY2FyLWluamVjdG9yCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKe3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KaW1hZ2VQdWxsU2VjcmV0czoKe3stIHJhbmdlIC5WYWx1ZXMuZ2xvYmFsLmltYWdlUHVsbFNlY3JldHMgfX0KICAtIG5hbWU6IHt7IC4gfX0Ke3stIGVuZCB9fQp7ey0gZW5kIH19Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXNpZGVjYXItaW5qZWN0b3Itc2VydmljZS1hY2NvdW50CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJzaWRlY2FyLWluamVjdG9yLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAic2lkZWNhci1pbmplY3Rvci5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGlzdGlvOiBzaWRlY2FyLWluamVjdG9yCg=="
        },
        {
          "filePath": "charts/sidecarInjectorWebhook/values.yaml",
          "fileContents": "IwojIHNpZGVjYXItaW5qZWN0b3Igd2ViaG9vayBjb25maWd1cmF0aW9uCiMKZW5hYmxlZDogdHJ1ZQpyZXBsaWNhQ291bnQ6IDEKaW1hZ2U6IHNpZGVjYXJfaW5qZWN0b3IKZW5hYmxlTmFtZXNwYWNlc0J5RGVmYXVsdDogZmFsc2UKbm9kZVNlbGVjdG9yOiB7fQoKIyBTcGVjaWZ5IHRoZSBwb2QgYW50aS1hZmZpbml0eSB0aGF0IGFsbG93cyB5b3UgdG8gY29uc3RyYWluIHdoaWNoIG5vZGVzCiMgeW91ciBwb2QgaXMgZWxpZ2libGUgdG8gYmUgc2NoZWR1bGVkIGJhc2VkIG9uIGxhYmVscyBvbiBwb2RzIHRoYXQgYXJlCiMgYWxyZWFkeSBydW5uaW5nIG9uIHRoZSBub2RlIHJhdGhlciB0aGFuIGJhc2VkIG9uIGxhYmVscyBvbiBub2Rlcy4KIyBUaGVyZSBhcmUgY3VycmVudGx5IHR3byB0eXBlcyBvZiBhbnRpLWFmZmluaXR5OgojICAgICJyZXF1aXJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojICAgICJwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbiIKIyB3aGljaCBkZW5vdGUg4oCcaGFyZOKAnSB2cy4g4oCcc29mdOKAnSByZXF1aXJlbWVudHMsIHlvdSBjYW4gZGVmaW5lIHlvdXIgdmFsdWVzCiMgaW4gInBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IiIGFuZCAicG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3IiCiMgY29ycmVzcG9uZGluZ2x5LgojIEZvciBleGFtcGxlOgojIHBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6CiMgLSBrZXk6IHNlY3VyaXR5CiMgICBvcGVyYXRvcjogSW4KIyAgIHZhbHVlczogUzEsUzIKIyAgIHRvcG9sb2d5S2V5OiAia3ViZXJuZXRlcy5pby9ob3N0bmFtZSIKIyBUaGlzIHBvZCBhbnRpLWFmZmluaXR5IHJ1bGUgc2F5cyB0aGF0IHRoZSBwb2QgcmVxdWlyZXMgbm90IHRvIGJlIHNjaGVkdWxlZAojIG9udG8gYSBub2RlIGlmIHRoYXQgbm9kZSBpcyBhbHJlYWR5IHJ1bm5pbmcgYSBwb2Qgd2l0aCBsYWJlbCBoYXZpbmcga2V5CiMg4oCcc2VjdXJpdHnigJ0gYW5kIHZhbHVlIOKAnFMx4oCdLgpwb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yOiBbXQpwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvcjogW10KCiMgSWYgdHJ1ZSwgd2ViaG9vayBvciBpc3Rpb2N0bCBpbmplY3RvciB3aWxsIHJld3JpdGUgUG9kU3BlYyBmb3IgbGl2ZW5lc3MKIyBoZWFsdGggY2hlY2sgdG8gcmVkaXJlY3QgcmVxdWVzdCB0byBzaWRlY2FyLiBUaGlzIG1ha2VzIGxpdmVuZXNzIGNoZWNrIHdvcmsKIyBldmVuIHdoZW4gbVRMUyBpcyBlbmFibGVkLgpyZXdyaXRlQXBwSFRUUFByb2JlOiBmYWxzZQoKIyBZb3UgY2FuIHVzZSB0aGUgZmllbGQgY2FsbGVkIGFsd2F5c0luamVjdFNlbGVjdG9yIGFuZCBuZXZlckluamVjdFNlbGVjdG9yIHdoaWNoIHdpbGwgYWx3YXlzIGluamVjdCB0aGUgc2lkZWNhciBvcgojIGFsd2F5cyBza2lwIHRoZSBpbmplY3Rpb24gb24gcG9kcyB0aGF0IG1hdGNoIHRoYXQgbGFiZWwgc2VsZWN0b3IsIHJlZ2FyZGxlc3Mgb2YgdGhlIGdsb2JhbCBwb2xpY3kuCiMgU2VlIGh0dHBzOi8vaXN0aW8uaW8vZG9jcy9zZXR1cC9rdWJlcm5ldGVzL2FkZGl0aW9uYWwtc2V0dXAvc2lkZWNhci1pbmplY3Rpb24vI21vcmUtY29udHJvbC1hZGRpbmctZXhjZXB0aW9ucwpuZXZlckluamVjdFNlbGVjdG9yOiBbXQoKYWx3YXlzSW5qZWN0U2VsZWN0b3I6IFtd"
        },
        {
          "filePath": "charts/tracing/.helmignore",
          "fileContents": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
        },
        {
          "filePath": "charts/tracing/Chart.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKZGVzY3JpcHRpb246IEEgSGVsbSBjaGFydCBmb3IgS3ViZXJuZXRlcwpuYW1lOiB0cmFjaW5nCnZlcnNpb246IDEuMS4wCmFwcFZlcnNpb246IDEuNS4xCnRpbGxlclZlcnNpb246ICI+PTIuNy4yIgo="
        },
        {
          "filePath": "charts/tracing/templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAidHJhY2luZy5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCklmIHJlbGVhc2UgbmFtZSBjb250YWlucyBjaGFydCBuYW1lIGl0IHdpbGwgYmUgdXNlZCBhcyBhIGZ1bGwgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJ0cmFjaW5nLmZ1bGxuYW1lIiAtfX0Ke3stIGlmIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSAtfX0Ke3stIC5WYWx1ZXMuZnVsbG5hbWVPdmVycmlkZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gJG5hbWUgOj0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSAtfX0Ke3stIGlmIGNvbnRhaW5zICRuYW1lIC5SZWxlYXNlLk5hbWUgLX19Cnt7LSAuUmVsZWFzZS5OYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSBwcmludGYgIiVzLSVzIiAuUmVsZWFzZS5OYW1lICRuYW1lIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGNoYXJ0IG5hbWUgYW5kIHZlcnNpb24gYXMgdXNlZCBieSB0aGUgY2hhcnQgbGFiZWwuCiovfX0Ke3stIGRlZmluZSAidHJhY2luZy5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/tracing/templates/deployment-jaeger.yaml",
          "fileContents": "e3sgaWYgZXEgLlZhbHVlcy5wcm92aWRlciAiamFlZ2VyIiB9fQoKYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXRyYWNpbmcKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogamFlZ2VyCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBqYWVnZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBqYWVnZXIKICAgICAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBwcm9tZXRoZXVzLmlvL3NjcmFwZTogInRydWUiCiAgICAgICAgcHJvbWV0aGV1cy5pby9wb3J0OiAiMTY2ODYiCnt7LSBpZiAuVmFsdWVzLmNvbnRleHRQYXRoIH19CiAgICAgICAgcHJvbWV0aGV1cy5pby9wYXRoOiAie3sgLlZhbHVlcy5jb250ZXh0UGF0aCB9fS9tZXRyaWNzIgp7ey0gZWxzZSB9fQogICAgICAgIHByb21ldGhldXMuaW8vcGF0aDogIi97eyAuVmFsdWVzLnByb3ZpZGVyIH19L21ldHJpY3MiCnt7LSBlbmQgfX0KICAgIHNwZWM6Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fQogICAgICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxTZWNyZXRzIH19CiAgICAgIGltYWdlUHVsbFNlY3JldHM6Cnt7LSByYW5nZSAuVmFsdWVzLmdsb2JhbC5pbWFnZVB1bGxTZWNyZXRzIH19CiAgICAgICAgLSBuYW1lOiB7eyAuIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogamFlZ2VyCiAgICAgICAgICBpbWFnZTogInt7IC5WYWx1ZXMuamFlZ2VyLmh1YiB9fS9hbGwtaW4tb25lOnt7IC5WYWx1ZXMuamFlZ2VyLnRhZyB9fSIKICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgLSBjb250YWluZXJQb3J0OiA5NDExCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTY2ODYKICAgICAgICAgICAgLSBjb250YWluZXJQb3J0OiA1Nzc1CiAgICAgICAgICAgICAgcHJvdG9jb2w6IFVEUAogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDY4MzEKICAgICAgICAgICAgICBwcm90b2NvbDogVURQCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogNjgzMgogICAgICAgICAgICAgIHByb3RvY29sOiBVRFAKICAgICAgICAgIGVudjoKICAgICAgICAgIC0gbmFtZTogUE9EX05BTUVTUEFDRQogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBtZXRhZGF0YS5uYW1lc3BhY2UKICAgICAgICAgIC0gbmFtZTogQ09MTEVDVE9SX1pJUEtJTl9IVFRQX1BPUlQKICAgICAgICAgICAgdmFsdWU6ICI5NDExIgogICAgICAgICAgLSBuYW1lOiBNRU1PUllfTUFYX1RSQUNFUwogICAgICAgICAgICB2YWx1ZTogInt7IC5WYWx1ZXMuamFlZ2VyLm1lbW9yeS5tYXhfdHJhY2VzIH19IgogICAgICAgICAgLSBuYW1lOiBRVUVSWV9CQVNFX1BBVEgKICAgICAgICAgICAgdmFsdWU6IHt7IGlmIC5WYWx1ZXMuY29udGV4dFBhdGggfX0ge3sgLlZhbHVlcy5jb250ZXh0UGF0aCB9fSB7eyBlbHNlIH19IC97eyAuVmFsdWVzLnByb3ZpZGVyIH19IHt7IGVuZCB9fQogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvCiAgICAgICAgICAgICAgcG9ydDogMTY2ODYKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8KICAgICAgICAgICAgICBwb3J0OiAxNjY4NgogICAgICAgICAgcmVzb3VyY2VzOgp7ey0gaWYgLlZhbHVlcy5qYWVnZXIucmVzb3VyY2VzIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmphZWdlci5yZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVsc2UgfX0Ke3sgdG9ZYW1sIC5WYWx1ZXMuZ2xvYmFsLmRlZmF1bHRSZXNvdXJjZXMgfCBpbmRlbnQgMTIgfX0Ke3stIGVuZCB9fQogICAgICBhZmZpbml0eToKICAgICAge3stIGluY2x1ZGUgIm5vZGVhZmZpbml0eSIgLiB8IGluZGVudCA2IH19CiAgICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHkiIC4gfCBpbmRlbnQgNiB9fQp7eyBlbmQgfX0K"
        },
        {
          "filePath": "charts/tracing/templates/deployment-zipkin.yaml",
          "fileContents": "e3sgaWYgZXEgLlZhbHVlcy5wcm92aWRlciAiemlwa2luIiB9fQoKYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXRyYWNpbmcKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogemlwa2luCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiB6aXBraW4KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB6aXBraW4KICAgICAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2lkZWNhci5pc3Rpby5pby9pbmplY3Q6ICJmYWxzZSIKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICIiCiAgICBzcGVjOgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICAgICAgcHJpb3JpdHlDbGFzc05hbWU6ICJ7eyAuVmFsdWVzLmdsb2JhbC5wcmlvcml0eUNsYXNzTmFtZSB9fSIKe3stIGVuZCB9fQp7ey0gaWYgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQogICAgICBpbWFnZVB1bGxTZWNyZXRzOgp7ey0gcmFuZ2UgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsU2VjcmV0cyB9fQogICAgICAgIC0gbmFtZToge3sgLiB9fQp7ey0gZW5kIH19Cnt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IHppcGtpbgogICAgICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLnppcGtpbi5odWIgfX0vemlwa2luOnt7IC5WYWx1ZXMuemlwa2luLnRhZyB9fSIKICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgLSBjb250YWluZXJQb3J0OiB7eyAuVmFsdWVzLnppcGtpbi5xdWVyeVBvcnQgfX0KICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IHt7IC5WYWx1ZXMuemlwa2luLnByb2JlU3RhcnR1cERlbGF5IH19CiAgICAgICAgICAgIHRjcFNvY2tldDoKICAgICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLnppcGtpbi5xdWVyeVBvcnQgfX0KICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiB7eyAuVmFsdWVzLnppcGtpbi5wcm9iZVN0YXJ0dXBEZWxheSB9fQogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9oZWFsdGgKICAgICAgICAgICAgICBwb3J0OiB7eyAuVmFsdWVzLnppcGtpbi5xdWVyeVBvcnQgfX0KICAgICAgICAgIHJlc291cmNlczoKe3stIGlmIC5WYWx1ZXMuemlwa2luLnJlc291cmNlcyB9fQp7eyB0b1lhbWwgLlZhbHVlcy56aXBraW4ucmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbHNlIH19Cnt7IHRvWWFtbCAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0UmVzb3VyY2VzIHwgaW5kZW50IDEyIH19Cnt7LSBlbmQgfX0KICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBQT0RfTkFNRVNQQUNFCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHYxCiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogbWV0YWRhdGEubmFtZXNwYWNlCiAgICAgICAgICAgIC0gbmFtZTogUVVFUllfUE9SVAogICAgICAgICAgICAgIHZhbHVlOiAie3sgLlZhbHVlcy56aXBraW4ucXVlcnlQb3J0IH19IgogICAgICAgICAgICAtIG5hbWU6IEpBVkFfT1BUUwogICAgICAgICAgICAgIHZhbHVlOiAiLVhYOkNvbmNHQ1RocmVhZHM9e3sgLlZhbHVlcy56aXBraW4ubm9kZS5jcHVzIH19IC1YWDpQYXJhbGxlbEdDVGhyZWFkcz17eyAuVmFsdWVzLnppcGtpbi5ub2RlLmNwdXMgfX0gLURqYXZhLnV0aWwuY29uY3VycmVudC5Gb3JrSm9pblBvb2wuY29tbW9uLnBhcmFsbGVsaXNtPXt7IC5WYWx1ZXMuemlwa2luLm5vZGUuY3B1cyB9fSAtWG1ze3sgLlZhbHVlcy56aXBraW4uamF2YU9wdHNIZWFwIH19TSAtWG14e3sgLlZhbHVlcy56aXBraW4uamF2YU9wdHNIZWFwIH19TSAtWFg6K1VzZUcxR0MgLXNlcnZlciIKICAgICAgICAgICAgLSBuYW1lOiBTVE9SQUdFX01FVEhPRAogICAgICAgICAgICAgIHZhbHVlOiAibWVtIgogICAgICAgICAgICAtIG5hbWU6IFpJUEtJTl9TVE9SQUdFX01FTV9NQVhTUEFOUwogICAgICAgICAgICAgIHZhbHVlOiAie3sgLlZhbHVlcy56aXBraW4ubWF4U3BhbnMgfX0iCiAgICAgIGFmZmluaXR5OgogICAgICB7ey0gaW5jbHVkZSAibm9kZWFmZmluaXR5IiAuIHwgaW5kZW50IDYgfX0KICAgICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA2IH19Cnt7IGVuZCB9fQo="
        },
        {
          "filePath": "charts/tracing/templates/ingress.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuaW5ncmVzcy5lbmFibGVkIC19fQphcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKa2luZDogSW5ncmVzcwptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAidHJhY2luZy5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyAuVmFsdWVzLnByb3ZpZGVyIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5WYWx1ZXMuaW5ncmVzcy5hbm5vdGF0aW9ucyB9fQogICAgICB7eyAka2V5IH19OiB7eyAkdmFsdWUgfCBxdW90ZSB9fQogICAge3stIGVuZCB9fQpzcGVjOgogIHJ1bGVzOgp7ey0gaWYgLlZhbHVlcy5pbmdyZXNzLmhvc3RzIH19CiAgICB7ey0gcmFuZ2UgJGhvc3QgOj0gLlZhbHVlcy5pbmdyZXNzLmhvc3RzIH19CiAgICAtIGhvc3Q6IHt7ICRob3N0IH19CiAgICAgIGh0dHA6CiAgICAgICAgcGF0aHM6CiAgICAgICAgICAtIHBhdGg6IHt7IGlmICQuVmFsdWVzLmNvbnRleHRQYXRoIH19IHt7ICQuVmFsdWVzLmNvbnRleHRQYXRoIH19IHt7IGVsc2UgfX0gL3t7ICQuVmFsdWVzLnByb3ZpZGVyIH19IHt7IGVuZCB9fQogICAgICAgICAgICBiYWNrZW5kOgogICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiB0cmFjaW5nCiAgICAgICAgICAgICAgc2VydmljZVBvcnQ6IDgwCgogICAge3stIGVuZCAtfX0Ke3stIGVsc2UgfX0KICAgIC0gaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgaWYgLlZhbHVlcy5jb250ZXh0UGF0aCB9fSB7eyAuVmFsdWVzLmNvbnRleHRQYXRoIH19IHt7IGVsc2UgfX0gL3t7IC5WYWx1ZXMucHJvdmlkZXIgfX0ge3sgZW5kIH19CiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHRyYWNpbmcKICAgICAgICAgICAgICBzZXJ2aWNlUG9ydDogODAKe3stIGVuZCB9fQogICB7ey0gaWYgLlZhbHVlcy5pbmdyZXNzLnRscyB9fQogIHRsczoKe3sgdG9ZYW1sIC5WYWx1ZXMuaW5ncmVzcy50bHMgfCBpbmRlbnQgNCB9fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "filePath": "charts/tracing/templates/service-jaeger.yaml",
          "fileContents": "e3sgaWYgZXEgLlZhbHVlcy5wcm92aWRlciAiamFlZ2VyIiB9fQoKYXBpVmVyc2lvbjogdjEKa2luZDogTGlzdAptZXRhZGF0YToKICBuYW1lOiBqYWVnZXItc2VydmljZXMKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogIGxhYmVsczoKICAgIGFwcDogamFlZ2VyCiAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cml0ZW1zOgotIGFwaVZlcnNpb246IHYxCiAga2luZDogU2VydmljZQogIG1ldGFkYXRhOgogICAgbmFtZTogamFlZ2VyLXF1ZXJ5CiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgYW5ub3RhdGlvbnM6CiAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9IC5WYWx1ZXMuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAgICB7eyAka2V5IH19OiB7eyAkdmFsIHwgcXVvdGUgfX0KICAgICAge3stIGVuZCB9fQogICAgbGFiZWxzOgogICAgICBhcHA6IGphZWdlcgogICAgICBqYWVnZXItaW5mcmE6IGphZWdlci1zZXJ2aWNlCiAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAidHJhY2luZy5jaGFydCIgLiB9fQogICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgc3BlYzoKICAgIHBvcnRzOgogICAgICAtIG5hbWU6IHF1ZXJ5LWh0dHAKICAgICAgICBwb3J0OiAxNjY4NgogICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICB0YXJnZXRQb3J0OiAxNjY4NgogICAgc2VsZWN0b3I6CiAgICAgIGFwcDogamFlZ2VyCi0gYXBpVmVyc2lvbjogdjEKICBraW5kOiBTZXJ2aWNlCiAgbWV0YWRhdGE6CiAgICBuYW1lOiBqYWVnZXItY29sbGVjdG9yCiAgICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQogICAgbGFiZWxzOgogICAgICBhcHA6IGphZWdlcgogICAgICBqYWVnZXItaW5mcmE6IGNvbGxlY3Rvci1zZXJ2aWNlCiAgICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAidHJhY2luZy5jaGFydCIgLiB9fQogICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgc3BlYzoKICAgIHBvcnRzOgogICAgLSBuYW1lOiBqYWVnZXItY29sbGVjdG9yLXRjaGFubmVsCiAgICAgIHBvcnQ6IDE0MjY3CiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogMTQyNjcKICAgIC0gbmFtZTogamFlZ2VyLWNvbGxlY3Rvci1odHRwCiAgICAgIHBvcnQ6IDE0MjY4CiAgICAgIHRhcmdldFBvcnQ6IDE0MjY4CiAgICAgIHByb3RvY29sOiBUQ1AKICAgIHNlbGVjdG9yOgogICAgICBhcHA6IGphZWdlcgogICAgdHlwZTogQ2x1c3RlcklQCi0gYXBpVmVyc2lvbjogdjEKICBraW5kOiBTZXJ2aWNlCiAgbWV0YWRhdGE6CiAgICBuYW1lOiBqYWVnZXItYWdlbnQKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICBsYWJlbHM6CiAgICAgIGFwcDogamFlZ2VyCiAgICAgIGphZWdlci1pbmZyYTogYWdlbnQtc2VydmljZQogICAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIHNwZWM6CiAgICBwb3J0czoKICAgIC0gbmFtZTogYWdlbnQtemlwa2luLXRocmlmdAogICAgICBwb3J0OiA1Nzc1CiAgICAgIHByb3RvY29sOiBVRFAKICAgICAgdGFyZ2V0UG9ydDogNTc3NQogICAgLSBuYW1lOiBhZ2VudC1jb21wYWN0CiAgICAgIHBvcnQ6IDY4MzEKICAgICAgcHJvdG9jb2w6IFVEUAogICAgICB0YXJnZXRQb3J0OiA2ODMxCiAgICAtIG5hbWU6IGFnZW50LWJpbmFyeQogICAgICBwb3J0OiA2ODMyCiAgICAgIHByb3RvY29sOiBVRFAKICAgICAgdGFyZ2V0UG9ydDogNjgzMgogICAgY2x1c3RlcklQOiBOb25lCiAgICBzZWxlY3RvcjoKICAgICAgYXBwOiBqYWVnZXIKe3sgZW5kIH19Cgo="
        },
        {
          "filePath": "charts/tracing/templates/service.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogTGlzdAptZXRhZGF0YToKICBuYW1lOiB0cmFjaW5nLXNlcnZpY2VzCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IC5WYWx1ZXMucHJvdmlkZXIgfX0KICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAidHJhY2luZy5jaGFydCIgLiB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KaXRlbXM6Ci0gYXBpVmVyc2lvbjogdjEKICBraW5kOiBTZXJ2aWNlCiAgbWV0YWRhdGE6CiAgICBuYW1lOiB6aXBraW4KICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICBsYWJlbHM6CiAgICAgIGFwcDoge3sgLlZhbHVlcy5wcm92aWRlciB9fQogICAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIHNwZWM6CiAgICB0eXBlOiB7eyAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fQogICAgcG9ydHM6CiAgICAgIC0gcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLmV4dGVybmFsUG9ydCB9fQogICAgICAgIHRhcmdldFBvcnQ6IDk0MTEKICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgbmFtZToge3sgLlZhbHVlcy5zZXJ2aWNlLm5hbWUgfX0KICAgIHNlbGVjdG9yOgogICAgICBhcHA6IHt7IC5WYWx1ZXMucHJvdmlkZXIgfX0KLSBhcGlWZXJzaW9uOiB2MQogIGtpbmQ6IFNlcnZpY2UKICBtZXRhZGF0YToKICAgIG5hbWU6IHRyYWNpbmcKICAgIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgICBhbm5vdGF0aW9uczoKICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5zZXJ2aWNlLmFubm90YXRpb25zIH19CiAgICAgIHt7ICRrZXkgfX06IHt7ICR2YWwgfCBxdW90ZSB9fQogICAgICB7ey0gZW5kIH19CiAgICBsYWJlbHM6CiAgICAgIGFwcDoge3sgLlZhbHVlcy5wcm92aWRlciB9fQogICAgICBjaGFydDoge3sgdGVtcGxhdGUgInRyYWNpbmcuY2hhcnQiIC4gfX0KICAgICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIHNwZWM6CiAgICBwb3J0czoKICAgICAgLSBuYW1lOiBodHRwLXF1ZXJ5CiAgICAgICAgcG9ydDogODAKICAgICAgICBwcm90b2NvbDogVENQCnt7IGlmIGVxIC5WYWx1ZXMucHJvdmlkZXIgImphZWdlciIgfX0KICAgICAgICB0YXJnZXRQb3J0OiAxNjY4Ngp7eyBlbHNlIH19CiAgICAgICAgdGFyZ2V0UG9ydDogOTQxMQp7eyBlbmR9fQogICAgc2VsZWN0b3I6CiAgICAgIGFwcDoge3sgLlZhbHVlcy5wcm92aWRlciB9fQo="
        },
        {
          "filePath": "charts/tracing/templates/tests/test-tracing-connection.yaml",
          "fileContents": "e3stIGlmIC5WYWx1ZXMuZ2xvYmFsLmVuYWJsZUhlbG1UZXN0IH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiB7eyAuUmVsZWFzZS5OYW1lIH19LXt7IC5WYWx1ZXMucHJvdmlkZXIgfX0tdGVzdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CiAgbGFiZWxzOgogICAgYXBwOiB7eyAuVmFsdWVzLnByb3ZpZGVyIH19LXRlc3QKICAgIGNoYXJ0OiB7eyB0ZW1wbGF0ZSAidHJhY2luZy5jaGFydCIgLiB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICBhbm5vdGF0aW9uczoKICAgIHNpZGVjYXIuaXN0aW8uaW8vaW5qZWN0OiAiZmFsc2UiCiAgICBoZWxtLnNoL2hvb2s6IHRlc3Qtc3VjY2VzcwpzcGVjOgp7ey0gaWYgLlZhbHVlcy5nbG9iYWwucHJpb3JpdHlDbGFzc05hbWUgfX0KICBwcmlvcml0eUNsYXNzTmFtZTogInt7IC5WYWx1ZXMuZ2xvYmFsLnByaW9yaXR5Q2xhc3NOYW1lIH19Igp7ey0gZW5kIH19CiAgY29udGFpbmVyczoKICAgIC0gbmFtZTogInt7IC5WYWx1ZXMucHJvdmlkZXIgfX0tdGVzdCIKICAgICAgaW1hZ2U6IHt7IC5WYWx1ZXMuZ2xvYmFsLmh1YiB9fS97eyAuVmFsdWVzLmdsb2JhbC5wcm94eS5pbWFnZSB9fTp7eyAuVmFsdWVzLmdsb2JhbC50YWcgfX0KICAgICAgaW1hZ2VQdWxsUG9saWN5OiAie3sgLlZhbHVlcy5nbG9iYWwuaW1hZ2VQdWxsUG9saWN5IH19IgogICAgICBjb21tYW5kOiBbJ2N1cmwnXQogICAgICB7ey0gaWYgZXEgLlZhbHVlcy5wcm92aWRlciAiamFlZ2VyIiB9fQogICAgICBhcmdzOiBbJ2h0dHA6Ly90cmFjaW5nOjgwe3sgLlZhbHVlcy5qYWVnZXIuY29udGV4dFBhdGh9fSddCiAgICAgIHt7LSBlbHNlIH19CiAgICAgIGFyZ3M6IFsnaHR0cDovL3RyYWNpbmc6ODAnXQogICAgICB7ey0gZW5kIH19CiAgcmVzdGFydFBvbGljeTogTmV2ZXIKICBhZmZpbml0eToKICAgIHt7LSBpbmNsdWRlICJub2RlYWZmaW5pdHkiIC4gfCBpbmRlbnQgNCB9fQogICAge3stIGluY2x1ZGUgInBvZEFudGlBZmZpbml0eSIgLiB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0K"
        },
        {
          "filePath": "charts/tracing/values.yaml",
          "fileContents": "IwojIGFkZG9uIGphZWdlciB0cmFjaW5nIGNvbmZpZ3VyYXRpb24KIwplbmFibGVkOiBmYWxzZQoKcHJvdmlkZXI6IGphZWdlcgpub2RlU2VsZWN0b3I6IHt9CgojIFNwZWNpZnkgdGhlIHBvZCBhbnRpLWFmZmluaXR5IHRoYXQgYWxsb3dzIHlvdSB0byBjb25zdHJhaW4gd2hpY2ggbm9kZXMKIyB5b3VyIHBvZCBpcyBlbGlnaWJsZSB0byBiZSBzY2hlZHVsZWQgYmFzZWQgb24gbGFiZWxzIG9uIHBvZHMgdGhhdCBhcmUKIyBhbHJlYWR5IHJ1bm5pbmcgb24gdGhlIG5vZGUgcmF0aGVyIHRoYW4gYmFzZWQgb24gbGFiZWxzIG9uIG5vZGVzLgojIFRoZXJlIGFyZSBjdXJyZW50bHkgdHdvIHR5cGVzIG9mIGFudGktYWZmaW5pdHk6CiMgICAgInJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb24iCiMgICAgInByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uIgojIHdoaWNoIGRlbm90ZSDigJxoYXJk4oCdIHZzLiDigJxzb2Z04oCdIHJlcXVpcmVtZW50cywgeW91IGNhbiBkZWZpbmUgeW91ciB2YWx1ZXMKIyBpbiAicG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvciIgYW5kICJwb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvciIKIyBjb3JyZXNwb25kaW5nbHkuCiMgRm9yIGV4YW1wbGU6CiMgcG9kQW50aUFmZmluaXR5TGFiZWxTZWxlY3RvcjoKIyAtIGtleTogc2VjdXJpdHkKIyAgIG9wZXJhdG9yOiBJbgojICAgdmFsdWVzOiBTMSxTMgojICAgdG9wb2xvZ3lLZXk6ICJrdWJlcm5ldGVzLmlvL2hvc3RuYW1lIgojIFRoaXMgcG9kIGFudGktYWZmaW5pdHkgcnVsZSBzYXlzIHRoYXQgdGhlIHBvZCByZXF1aXJlcyBub3QgdG8gYmUgc2NoZWR1bGVkCiMgb250byBhIG5vZGUgaWYgdGhhdCBub2RlIGlzIGFscmVhZHkgcnVubmluZyBhIHBvZCB3aXRoIGxhYmVsIGhhdmluZyBrZXkKIyDigJxzZWN1cml0eeKAnSBhbmQgdmFsdWUg4oCcUzHigJ0uCnBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3I6IFtdCnBvZEFudGlBZmZpbml0eVRlcm1MYWJlbFNlbGVjdG9yOiBbXQoKamFlZ2VyOgogIGh1YjogZG9ja2VyLmlvL2phZWdlcnRyYWNpbmcKICB0YWc6IDEuOQogIG1lbW9yeToKICAgIG1heF90cmFjZXM6IDUwMDAwCgp6aXBraW46CiAgaHViOiBkb2NrZXIuaW8vb3BlbnppcGtpbgogIHRhZzogMgogIHByb2JlU3RhcnR1cERlbGF5OiAyMDAKICBxdWVyeVBvcnQ6IDk0MTEKICByZXNvdXJjZXM6CiAgICBsaW1pdHM6CiAgICAgIGNwdTogMzAwbQogICAgICBtZW1vcnk6IDkwME1pCiAgICByZXF1ZXN0czoKICAgICAgY3B1OiAxNTBtCiAgICAgIG1lbW9yeTogOTAwTWkKICBqYXZhT3B0c0hlYXA6IDcwMAogICMgRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL29wZW56aXBraW4vemlwa2luL2Jsb2IvbWFzdGVyL3ppcGtpbi1zZXJ2ZXIvc3JjL21haW4vcmVzb3VyY2VzL3ppcGtpbi1zZXJ2ZXItc2hhcmVkLnltbCNMNTEKICAjIE1heGltdW0gbnVtYmVyIG9mIHNwYW5zIHRvIGtlZXAgaW4gbWVtb3J5LiAgV2hlbiBleGNlZWRlZCwgb2xkZXN0IHRyYWNlcyAoYW5kIHRoZWlyIHNwYW5zKSB3aWxsIGJlIHB1cmdlZC4KICAjIEEgc2FmZSBlc3RpbWF0ZSBpcyAxSyBvZiBtZW1vcnkgcGVyIHNwYW4gKGVhY2ggc3BhbiB3aXRoIDIgYW5ub3RhdGlvbnMgKyAxIGJpbmFyeSBhbm5vdGF0aW9uKSwgcGx1cwogICMgMTAwIE1CIGZvciBhIHNhZmV0eSBidWZmZXIuICBZb3UnbGwgbmVlZCB0byB2ZXJpZnkgaW4geW91ciBvd24gZW52aXJvbm1lbnQuCiAgbWF4U3BhbnM6IDUwMDAwMAogIG5vZGU6CiAgICBjcHVzOiAyCgpzZXJ2aWNlOgogIGFubm90YXRpb25zOiB7fQogIG5hbWU6IGh0dHAKICB0eXBlOiBDbHVzdGVySVAKICBleHRlcm5hbFBvcnQ6IDk0MTEKCmluZ3Jlc3M6CiAgZW5hYmxlZDogZmFsc2UKICAjIFVzZWQgdG8gY3JlYXRlIGFuIEluZ3Jlc3MgcmVjb3JkLgogIGhvc3RzOgogICAgIyAtIHRyYWNpbmcubG9jYWwKICBhbm5vdGF0aW9uczoKICAgICMga3ViZXJuZXRlcy5pby9pbmdyZXNzLmNsYXNzOiBuZ2lueAogICAgIyBrdWJlcm5ldGVzLmlvL3Rscy1hY21lOiAidHJ1ZSIKICB0bHM6CiAgICAjIFNlY3JldHMgbXVzdCBiZSBtYW51YWxseSBjcmVhdGVkIGluIHRoZSBuYW1lc3BhY2UuCiAgICAjIC0gc2VjcmV0TmFtZTogdHJhY2luZy10bHMKICAgICMgICBob3N0czoKICAgICMgICAgIC0gdHJhY2luZy5sb2NhbAoK"
        },
        {
          "filePath": "example-values/README.md",
          "fileContents": "IyBFeGFtcGxlIFZhbHVlcwoKVGhlc2UgZmlsZXMgcHJvdmlkZSB2YXJpb3VzIGV4YW1wbGUgdmFsdWVzIGZvciBkaWZmZXJlbnQgSXN0aW8gc2V0dXBzLgoKVG8gdXNlIHRoZW0sIFtyZWFkIHRoZSBkb2NzXShodHRwczovL2lzdGlvLmlvL2RvY3Mvc2V0dXAva3ViZXJuZXRlcy9oZWxtLWluc3RhbGwvKSBhbmQgYWRkIHRoZSBmbGFnIGAtLXZhbHVlcyBleGFtcGxlLWZpbGUueWFtbGAuCg=="
        },
        {
          "filePath": "example-values/values-istio-example-sds-vault.yaml",
          "fileContents": "Z2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogIHNkczoKICAgIGVuYWJsZWQ6IHRydWUKICAgIHVkc1BhdGg6ICJ1bml4Oi92YXIvcnVuL3Nkcy91ZHNfcGF0aCIKICAgIHVzZU5vcm1hbEp3dDogdHJ1ZQoKbm9kZWFnZW50OgogIGVuYWJsZWQ6IHRydWUKICBpbWFnZTogbm9kZS1hZ2VudC1rOHMKICBlbnY6CiAgICAjIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgcG9ydCBudW1iZXIgb2YgYSBwdWJsaWNseSBhY2Nlc3NpYmxlIGV4YW1wbGUgVmF1bHQgc2VydmVyLgogICAgQ0FfQUREUjogImh0dHBzOi8vMzQuODMuMTI5LjIxMTo4MjAwIgogICAgQ0FfUFJPVklERVI6ICJWYXVsdENBIgogICAgVkFMSURfVE9LRU46IHRydWUKICAgICMgVGhlIElQIGFkZHJlc3MgYW5kIHRoZSBwb3J0IG51bWJlciBvZiBhIHB1YmxpY2x5IGFjY2Vzc2libGUgZXhhbXBsZSBWYXVsdCBzZXJ2ZXIuCiAgICBWQVVMVF9BRERSOiAiaHR0cHM6Ly8zNC44My4xMjkuMjExOjgyMDAiCiAgICBWQVVMVF9BVVRIX1BBVEg6ICJhdXRoL2t1YmVybmV0ZXMvbG9naW4iCiAgICBWQVVMVF9ST0xFOiAiaXN0aW8tY2VydCIKICAgIFZBVUxUX1NJR05fQ1NSX1BBVEg6ICJpc3Rpb19jYS9zaWduL2lzdGlvLXBraS1yb2xlIgogICAgVkFVTFRfVExTX1JPT1RfQ0VSVDogJy0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLVxuTUlJQzNqQ0NBY2FnQXdJQkFnSVJBTzFTN3Z1UlFtbzJIZStSdEJxM2Z2OHdEUVlKS29aSWh2Y05BUUVMQlFBd1xuRURFT01Bd0dBMVVFQ2hNRlZtRjFiSFF3SUJjTk1Ua3dOREkzTVRZMU9ERTFXaGdQTWpFeE9UQTBNRE14TmpVNFxuTVRWYU1CQXhEakFNQmdOVkJBb1RCVlpoZFd4ME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQlxuQ2dLQ0FRRUE3L0NUYm5FTkVJdkZaZzlobVZ0WW5PeDNPZk15L0dOQ3VQN3NxdEFlVlZUb3BBS0trY0FBV1Fja1xucmhwQm9vRUdwQ3VnTnhYR05DdUpoLzJudTBBZkdGUmZkYWZ3U0pSb0k2eUh3UW91RG0wbzRyM2g5dUwzdHU1TlxuRCt4OWorZWVqYkZzb1pWbjg0Q3hHa0VCNm95ZVhZSGpjNmVXaDNQRkdNdEt1T1FENHBlenZESDB5TkN4NXdhS1xuaHRQdVl0bDBlYmZkYnloK1dRdXB0TytROVZTYVFOcUUzaXBaNDYxeThQZHV3UlJsbDI0MVcwZ1FCMmlhc1gwM1xuRDM2RjJack16M0tFVlJWS00xeUNVREN5MlJQSnFrWFBkblZNV21ER2JlOFV3Njl6cjI1Smx0enVSWkZUOUhMM1xuWTFSbk1UZWNtU2M0aWtUVUhjTWhGWDNQWWJmUjV3SURBUUFCb3pFd0x6QU9CZ05WSFE4QkFmOEVCQU1DQmFBd1xuREFZRFZSMFRBUUgvQkFJd0FEQVBCZ05WSFJFRUNEQUdod1FpVTRIVE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQlxuQVFDZExoNm9sRFZRQjcxTEQ2c3JiZkFFNEVzeExFQmJJUm52N05mMVMwS1F3Z1cvUXhLOERIQndKQnhKa3IxTlxuemdFUHg4NmYyRm8yVXNZOW02cnZnUDMraXF1eU1zS2kwb29VYWgzeTNMU25PTnVaY2RmU1RsL0hZZDM4UzZEcFxuVmtWT1o3NzgxeHhwRlZVcVE1dm9RWDFZMUlwbjVxdzBGeUljTllXTGtOWCtpTWYxYjlrcEVJV1FOaFJDL1lpdlxuVFMwVkEvQnpRZW1HeWYyVUI2UXN1WkxIK0pGRVpuelU4NTlxVVJuTklJVGExV2Y0WVV0a2E1U3Axa0RuRWxsM1xud2o0SWxYS1UrV2wxQ3p4SnluNFNTUUFYeS9MYjA4WktyRi9ZU3pjSUlTblJYNWord2E4QXBPU3d3QS9CN2lhVFxuVFd6MWcrUmxWOXFIYXA3MGVJalBzUXZiXG4tLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tJw=="
        },
        {
          "filePath": "example-values/values-istio-gateways.yaml",
          "fileContents": "IyBDb21tb24gc2V0dGluZ3MuCmdsb2JhbDoKICAjIE9taXQgdGhlIGlzdGlvLXNpZGVjYXItaW5qZWN0b3IgY29uZmlnbWFwIHdoZW4gZ2VuZXJhdGUgYQogICMgc3RhbmRhbG9uZSBnYXRld2F5LiBHYXRld2F5cyBtYXkgYmUgY3JlYXRlZCBpbiBuYW1lc3BhY2VzIG90aGVyCiAgIyB0aGFuIGBpc3Rpby1zeXN0ZW1gIGFuZCB3ZSBkb24ndCB3YW50IHRvIHJlLWNyZWF0ZSB0aGUgaW5qZWN0b3IKICAjIGNvbmZpZ21hcCBpbiB0aG9zZS4KICBvbWl0U2lkZWNhckluamVjdG9yQ29uZmlnTWFwOiB0cnVlCgogICMgSXN0aW8gY29udHJvbCBwbGFuZSBuYW1lc3BhY2U6IFRoaXMgc3BlY2lmaWVzIHdoZXJlIHRoZSBJc3RpbyBjb250cm9sCiAgIyBwbGFuZSB3YXMgaW5zdGFsbGVkIGVhcmxpZXIuICBNb2RpZnkgdGhpcyBpZiB5b3UgaW5zdGFsbGVkIHRoZSBjb250cm9sCiAgIyBwbGFuZSBpbiBhIGRpZmZlcmVudCBuYW1lc3BhY2UgdGhhbiBpc3Rpby1zeXN0ZW0uCiAgaXN0aW9OYW1lc3BhY2U6IGlzdGlvLXN5c3RlbQoKICBwcm94eToKICAgICMgU2V0cyB0aGUgZGVzdGluYXRpb24gU3RhdHNkIGluIGVudm95ICh0aGUgdmFsdWUgb2YgdGhlICItLXN0YXRzZFVkcEFkZHJlc3MiIHByb3h5IGFyZ3VtZW50CiAgICAjIHdvdWxkIGJlIDxob3N0Pjo8cG9ydD4pLgogICAgIyBEaXNhYmxlZCBieSBkZWZhdWx0LgogICAgIyBUaGUgaXN0aW8tc3RhdHNkLXByb20tYnJpZGdlIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBtb3ZpbmcgZm9yd2FyZC4KICAgIGVudm95U3RhdHNkOgogICAgICAjIElmIGVuYWJsZWQgaXMgc2V0IHRvIHRydWUsIGhvc3QgYW5kIHBvcnQgbXVzdCBhbHNvIGJlIHByb3ZpZGVkLiBJc3RpbyBubyBsb25nZXIgcHJvdmlkZXMgYSBzdGF0c2QgY29sbGVjdG9yLgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBob3N0OiAjIGV4YW1wbGU6IHN0YXRzZC1zdmMuaXN0aW8tc3lzdGVtCiAgICAgIHBvcnQ6ICMgZXhhbXBsZTogOTEyNQoKCiMKIyBHYXRld2F5cyBDb25maWd1cmF0aW9uCiMgQnkgZGVmYXVsdCAoaWYgZW5hYmxlZCkgYSBwYWlyIG9mIEluZ3Jlc3MgYW5kIEVncmVzcyBHYXRld2F5cyB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSBtZXNoLgojIFlvdSBjYW4gYWRkIG1vcmUgZ2F0ZXdheXMgaW4gYWRkaXRpb24gdG8gdGhlIGRlZmF1bHRzIGJ1dCBtYWtlIHN1cmUgdGhvc2UgYXJlIHVuaXF1ZWx5IG5hbWVkCiMgYW5kIHRoYXQgTm9kZVBvcnRzIGFyZSBub3QgY29uZmxpY3RpbmcuCiMgRGlzYWJsZSBzcGVjaWZpYyBnYXRld2F5IGJ5IHNldHRpbmcgdGhlIGBlbmFibGVkYCB0byBmYWxzZS4KIwpnYXRld2F5czoKICBlbmFibGVkOiB0cnVlCgogIGN1c3RvbS1nYXRld2F5OgogICAgZW5hYmxlZDogdHJ1ZQogICAgbGFiZWxzOgogICAgICBhcHA6IGN1c3RvbS1nYXRld2F5CiAgICByZXBsaWNhQ291bnQ6IDEKICAgIGF1dG9zY2FsZU1pbjogMQogICAgYXV0b3NjYWxlTWF4OiA1CiAgICByZXNvdXJjZXM6IHt9CiAgICAgICMgbGltaXRzOgogICAgICAjICBjcHU6IDEwMG0KICAgICAgIyAgbWVtb3J5OiAxMjhNaQogICAgICAjcmVxdWVzdHM6CiAgICAgICMgIGNwdTogMTgwMG0KICAgICAgIyAgbWVtb3J5OiAyNTZNaQogICAgY3B1OgogICAgICB0YXJnZXRBdmVyYWdlVXRpbGl6YXRpb246IDgwCiAgICBsb2FkQmFsYW5jZXJJUDogIiIKICAgIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoge30KICAgIGV4dGVybmFsSVBzOiBbXQogICAgc2VydmljZUFubm90YXRpb25zOiB7fQogICAgcG9kQW5ub3RhdGlvbnM6IHt9CiAgICB0eXBlOiBMb2FkQmFsYW5jZXIgI2NoYW5nZSB0byBOb2RlUG9ydCwgQ2x1c3RlcklQIG9yIExvYWRCYWxhbmNlciBpZiBuZWVkIGJlCiAgICAjZXh0ZXJuYWxUcmFmZmljUG9saWN5OiBMb2NhbCAjY2hhbmdlIHRvIExvY2FsIHRvIHByZXNlcnZlIHNvdXJjZSBJUCBvciBDbHVzdGVyIGZvciBkZWZhdWx0IGJlaGF2aW91ciBvciBsZWF2ZSBjb21tZW50ZWQgb3V0CiAgICBwb3J0czoKICAgICAgIyMgWW91IGNhbiBhZGQgY3VzdG9tIGdhdGV3YXkgcG9ydHMKICAgIC0gcG9ydDogODAKICAgICAgdGFyZ2V0UG9ydDogODAKICAgICAgbmFtZTogaHR0cDIKICAgICAgIyBub2RlUG9ydDogMzEzODAKICAgIC0gcG9ydDogNDQzCiAgICAgIG5hbWU6IGh0dHBzCiAgICAgICMgbm9kZVBvcnQ6IDMxMzkwCiAgICAtIHBvcnQ6IDMxNDAwCiAgICAgIG5hbWU6IHRjcAogICAgICAjIG5vZGVQb3J0OiAzMTQwMAogICAgIyBQaWxvdCBhbmQgQ2l0YWRlbCBNVExTIHBvcnRzIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0CiAgICAjIHRvIHBpbG90L2NpdGFkZWwgaWYgZ2xvYmFsLm1lc2hFeHBhbnNpb24gc2V0dGluZ3MgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDExCiAgICAgIHRhcmdldFBvcnQ6IDE1MDExCiAgICAgIG5hbWU6IHRjcC1waWxvdC1ncnBjLXRscwogICAgLSBwb3J0OiA4MDYwCiAgICAgIHRhcmdldFBvcnQ6IDgwNjAKICAgICAgbmFtZTogdGNwLWNpdGFkZWwtZ3JwYy10bHMKICAgICMgQWRkb24gcG9ydHMgZm9yIGtpYWxpIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0IGlmCiAgICAjIHRoZSBnYXRld2F5IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDI5CiAgICAgIHRhcmdldFBvcnQ6IDE1MDI5CiAgICAgIG5hbWU6IGh0dHAyLWtpYWxpCiAgICAjIFRlbGVtZXRyeS1yZWxhdGVkIHBvcnRzIGFyZSBlbmFibGVkIGluIGdhdGV3YXkgLSBidXQgd2lsbCBvbmx5IHJlZGlyZWN0IGlmCiAgICAjIHRoZSBnYXRld2F5IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgYXJlIGVuYWJsZWQuCiAgICAtIHBvcnQ6IDE1MDMwCiAgICAgIHRhcmdldFBvcnQ6IDE1MDMwCiAgICAgIG5hbWU6IGh0dHAyLXByb21ldGhldXMKICAgIC0gcG9ydDogMTUwMzEKICAgICAgdGFyZ2V0UG9ydDogMTUwMzEKICAgICAgbmFtZTogaHR0cDItZ3JhZmFuYQogICAgLSBwb3J0OiAxNTAzMgogICAgICB0YXJnZXRQb3J0OiAxNTAzMgogICAgICBuYW1lOiBodHRwMi10cmFjaW5nCiAgICBzZWNyZXRWb2x1bWVzOgogICAgLSBuYW1lOiBjdXN0b21nYXRld2F5LWNlcnRzCiAgICAgIHNlY3JldE5hbWU6IGlzdGlvLWN1c3RvbWdhdGV3YXktY2VydHMKICAgICAgbW91bnRQYXRoOiAvZXRjL2lzdGlvL2N1c3RvbWdhdGV3YXktY2VydHMKICAgIC0gbmFtZTogY3VzdG9tZ2F0ZXdheS1jYS1jZXJ0cwogICAgICBzZWNyZXROYW1lOiBpc3Rpby1jdXN0b21nYXRld2F5LWNhLWNlcnRzCiAgICAgIG1vdW50UGF0aDogL2V0Yy9pc3Rpby9jdXN0b21nYXRld2F5LWNhLWNlcnRzCgojIGFsbCBvdGhlciBjb21wb25lbnRzIGFyZSBkaXNhYmxlZCBleGNlcHQgdGhlIGdhdGV3YXlzCnNlY3VyaXR5OgogIGVuYWJsZWQ6IGZhbHNlCgpzaWRlY2FySW5qZWN0b3JXZWJob29rOgogIGVuYWJsZWQ6IGZhbHNlCgpnYWxsZXk6CiAgZW5hYmxlZDogZmFsc2UKCm1peGVyOgogIHBvbGljeToKICAgIGVuYWJsZWQ6IGZhbHNlCiAgdGVsZW1ldHJ5OgogICAgZW5hYmxlZDogZmFsc2UKCnBpbG90OgogIGVuYWJsZWQ6IGZhbHNlCgpncmFmYW5hOgogIGVuYWJsZWQ6IGZhbHNlCgpwcm9tZXRoZXVzOgogIGVuYWJsZWQ6IGZhbHNlCgp0cmFjaW5nOgogIGVuYWJsZWQ6IGZhbHNlCgpraWFsaToKICBlbmFibGVkOiBmYWxzZQoKY2VydG1hbmFnZXI6CiAgZW5hYmxlZDogZmFsc2UK"
        },
        {
          "filePath": "example-values/values-istio-googleca.yaml",
          "fileContents": "Z2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogIHNkczoKICAgIGVuYWJsZWQ6IHRydWUKICAgIHVkc1BhdGg6ICJ1bml4Oi92YXIvcnVuL3Nkcy91ZHNfcGF0aCIKICAgIHVzZVRydXN0d29ydGh5Snd0OiB0cnVlIAoKICB0cnVzdERvbWFpbjogIiIKCm5vZGVhZ2VudDoKICBlbmFibGVkOiB0cnVlCiAgaW1hZ2U6IG5vZGUtYWdlbnQtazhzCiAgZW52OgogICAgQ0FfUFJPVklERVI6ICJHb29nbGVDQSIKICAgIENBX0FERFI6ICJpc3Rpb2NhLmdvb2dsZWFwaXMuY29tOjQ0MyIKICAgIFBsdWdpbnM6ICJHb29nbGVUb2tlbkV4Y2hhbmdlIgo="
        },
        {
          "filePath": "example-values/values-istio-multicluster-gateways.yaml",
          "fileContents": "Z2xvYmFsOgogICMgUHJvdmlkZXMgZG5zIHJlc29sdXRpb24gZm9yIGdsb2JhbCBzZXJ2aWNlcwogIHBvZEROU1NlYXJjaE5hbWVzcGFjZXM6CiAgLSBnbG9iYWwKICAtICJ7eyB2YWx1ZU9yRGVmYXVsdCAuRGVwbG95bWVudE1ldGEuTmFtZXNwYWNlIFwiZGVmYXVsdFwiIH19Lmdsb2JhbCIKCiAgbXVsdGlDbHVzdGVyOgogICAgZW5hYmxlZDogdHJ1ZQoKICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKCiMgTXVsdGljbHVzdGVyIHdpdGggZ2F0ZXdheXMgcmVxdWlyZXMgYSByb290IENBCiMgQ2x1c3RlciBsb2NhbCBDQXMgYXJlIGJvb3RzdHJhcHBlZCB3aXRoIHRoZSByb290IENBLgpzZWN1cml0eToKICBzZWxmU2lnbmVkOiBmYWxzZQoKIyBQcm92aWRlcyBkbnMgcmVzb2x1dGlvbiBmb3Igc2VydmljZSBlbnRyaWVzIG9mIGZvcm0KIyBuYW1lLm5hbWVzcGFjZS5nbG9iYWwKaXN0aW9jb3JlZG5zOgogIGVuYWJsZWQ6IHRydWUKCmdhdGV3YXlzOgogIGlzdGlvLWVncmVzc2dhdGV3YXk6CiAgICBlbmFibGVkOiB0cnVlCiAgICBlbnY6CiAgICAgICMgTmVlZGVkIHRvIHJvdXRlIHRyYWZmaWMgdmlhIGVncmVzcyBnYXRld2F5IGlmIGRlc2lyZWQuCiAgICAgIElTVElPX01FVEFfUkVRVUVTVEVEX05FVFdPUktfVklFVzogImV4dGVybmFsIgo="
        },
        {
          "filePath": "files/injection-template.yaml",
          "fileContents": ""
        },
        {
          "filePath": "requirements.yaml",
          "fileContents": "ZGVwZW5kZW5jaWVzOgogIC0gbmFtZTogc2lkZWNhckluamVjdG9yV2ViaG9vawogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogc2lkZWNhckluamVjdG9yV2ViaG9vay5lbmFibGVkCiAgLSBuYW1lOiBzZWN1cml0eQogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogc2VjdXJpdHkuZW5hYmxlZAogIC0gbmFtZTogZ2F0ZXdheXMKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGdhdGV3YXlzLmVuYWJsZWQKICAtIG5hbWU6IG1peGVyCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBvciBtaXhlci5wb2xpY3kuZW5hYmxlZCBtaXhlci50ZWxlbWV0cnkuZW5hYmxlZAogIC0gbmFtZTogbm9kZWFnZW50CiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBub2RlYWdlbnQuZW5hYmxlZAogIC0gbmFtZTogcGlsb3QKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IHBpbG90LmVuYWJsZWQKICAtIG5hbWU6IGdyYWZhbmEKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGdyYWZhbmEuZW5hYmxlZAogIC0gbmFtZTogcHJvbWV0aGV1cwogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogcHJvbWV0aGV1cy5lbmFibGVkCiAgLSBuYW1lOiB0cmFjaW5nCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiB0cmFjaW5nLmVuYWJsZWQKICAtIG5hbWU6IGdhbGxleQogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogZ2FsbGV5LmVuYWJsZWQKICAtIG5hbWU6IGtpYWxpCiAgICB2ZXJzaW9uOiAxLjEuMAogICAgY29uZGl0aW9uOiBraWFsaS5lbmFibGVkCiAgLSBuYW1lOiBpc3Rpb2NvcmVkbnMKICAgIHZlcnNpb246IDEuMS4wCiAgICBjb25kaXRpb246IGlzdGlvY29yZWRucy5lbmFibGVkCiAgLSBuYW1lOiBjZXJ0bWFuYWdlcgogICAgdmVyc2lvbjogMS4xLjAKICAgIGNvbmRpdGlvbjogY2VydG1hbmFnZXIuZW5hYmxlZAo="
        },
        {
          "filePath": "templates/NOTES.txt",
          "fileContents": "VGhhbmsgeW91IGZvciBpbnN0YWxsaW5nIHt7IC5DaGFydC5OYW1lIH19LgoKWW91ciByZWxlYXNlIGlzIG5hbWVkIHt7IC5SZWxlYXNlLk5hbWUgfX0uCgpUbyBnZXQgc3RhcnRlZCBydW5uaW5nIGFwcGxpY2F0aW9uIHdpdGggSXN0aW8sIGV4ZWN1dGUgdGhlIGZvbGxvd2luZyBzdGVwczoKCnt7LSBpZiBpbmRleCAuVmFsdWVzICJzaWRlY2FySW5qZWN0b3JXZWJob29rIiAiZW5hYmxlZCIgfX0KMS4gTGFiZWwgbmFtZXNwYWNlIHRoYXQgYXBwbGljYXRpb24gb2JqZWN0IHdpbGwgYmUgZGVwbG95ZWQgdG8gYnkgdGhlIGZvbGxvd2luZyBjb21tYW5kICh0YWtlIGRlZmF1bHQgbmFtZXNwYWNlIGFzIGFuIGV4YW1wbGUpCgokIGt1YmVjdGwgbGFiZWwgbmFtZXNwYWNlIGRlZmF1bHQgaXN0aW8taW5qZWN0aW9uPWVuYWJsZWQKJCBrdWJlY3RsIGdldCBuYW1lc3BhY2UgLUwgaXN0aW8taW5qZWN0aW9uCgoyLiBEZXBsb3kgeW91ciBhcHBsaWNhdGlvbnMKCiQga3ViZWN0bCBhcHBseSAtZiA8eW91ci1hcHBsaWNhdGlvbj4ueWFtbAp7ey0gZWxzZSB9fQoxLiBEb3dubG9hZCB0aGUgbGF0ZXN0IHJlbGVhc2UgcGFja2FnZSB0byBnZXQgc2lkZWNhciBpbmplY3Rpb24gdG9vbAoKJCBjdXJsIC1MIGh0dHBzOi8vZ2l0LmlvL2dldExhdGVzdElzdGlvIHwgc2ggLQokIG12IGlzdGlvLSogaXN0aW8tbGF0ZXN0CiQgZXhwb3J0IFBBVEg9IiRQQVRIOiRQV0QvaXN0aW8tbGF0ZXN0L2JpbiIKCjIuIERlcGxveSB5b3VyIGFwcGxpY2F0aW9uIGJ5IG1hbnVhbGx5IGluamVjdGluZyBlbnZveSBzaWRlY2FyIHdpdGggYGlzdGlvY3RsIGt1YmUtaW5qZWN0YAoKJCBrdWJlY3RsIGFwcGx5IC1mIDwoaXN0aW9jdGwga3ViZS1pbmplY3QgLWYgPHlvdXItYXBwbGljYXRpb24+LnlhbWwpCnt7LSBlbmQgfX0KCkZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHJ1bm5pbmcgSXN0aW8sIHZpc2l0OgpodHRwczovL2lzdGlvLmlvLw=="
        },
        {
          "filePath": "templates/_affinity.tpl",
          "fileContents": "e3svKiBhZmZpbml0eSAtIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vYXNzaWduLXBvZC1ub2RlLyAqL319Cgp7ey0gZGVmaW5lICJub2RlYWZmaW5pdHkiIH19CiAgbm9kZUFmZmluaXR5OgogICAgcmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJub2RlQWZmaW5pdHlSZXF1aXJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0KICAgIHByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmdJZ25vcmVkRHVyaW5nRXhlY3V0aW9uOgogICAge3stIGluY2x1ZGUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIC4gfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAibm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiB9fQogICAgICBub2RlU2VsZWN0b3JUZXJtczoKICAgICAgLSBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgIC0ga2V5OiBiZXRhLmt1YmVybmV0ZXMuaW8vYXJjaAogICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAgICAgICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAgICAgICAtIHt7ICRrZXkgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stICRub2RlU2VsZWN0b3IgOj0gZGVmYXVsdCAuVmFsdWVzLmdsb2JhbC5kZWZhdWx0Tm9kZVNlbGVjdG9yIC5WYWx1ZXMubm9kZVNlbGVjdG9yIC19fQogICAgICAgIHt7LSByYW5nZSAka2V5LCAkdmFsIDo9ICRub2RlU2VsZWN0b3IgfX0KICAgICAgICAtIGtleToge3sgJGtleSB9fQogICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAtIHt7ICR2YWwgfX0KICAgICAgICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIH19CiAge3stIHJhbmdlICRrZXksICR2YWwgOj0gLlZhbHVlcy5nbG9iYWwuYXJjaCB9fQogICAge3stIGlmIGd0ICgkdmFsIHwgaW50KSAwIH19CiAgICAtIHdlaWdodDoge3sgJHZhbCB8IGludCB9fQogICAgICBwcmVmZXJlbmNlOgogICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgLSBrZXk6IGJldGEua3ViZXJuZXRlcy5pby9hcmNoCiAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgIHZhbHVlczoKICAgICAgICAgIC0ge3sgJGtleSB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAicG9kQW50aUFmZmluaXR5IiB9fQp7ey0gaWYgb3IgLlZhbHVlcy5wb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yIC5WYWx1ZXMucG9kQW50aUFmZmluaXR5VGVybUxhYmVsU2VsZWN0b3J9fQogIHBvZEFudGlBZmZpbml0eToKICAgIHt7LSBpZiAuVmFsdWVzLnBvZEFudGlBZmZpbml0eUxhYmVsU2VsZWN0b3IgfX0KICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICB7ey0gaW5jbHVkZSAicG9kQW50aUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiAuIH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgb3IgLlZhbHVlcy5wb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3Rvcn19CiAgICBwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSBpbmNsdWRlICJwb2RBbnRpQWZmaW5pdHlQcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nIiAuIH19CiAgICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQoKe3stIGRlZmluZSAicG9kQW50aUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIiB9fQogICAge3stIHJhbmdlICRpbmRleCwgJGl0ZW0gOj0gLlZhbHVlcy5wb2RBbnRpQWZmaW5pdHlMYWJlbFNlbGVjdG9yIH19CiAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAtIGtleToge3sgJGl0ZW0ua2V5IH19CiAgICAgICAgICBvcGVyYXRvcjoge3sgJGl0ZW0ub3BlcmF0b3IgfX0KICAgICAgICAgIHt7LSBpZiAkaXRlbS52YWx1ZXMgfX0KICAgICAgICAgIHZhbHVlczoKICAgICAgICAgIHt7LSAkdmFscyA6PSBzcGxpdCAiLCIgJGl0ZW0udmFsdWVzIH19CiAgICAgICAgICB7ey0gcmFuZ2UgJGksICR2IDo9ICR2YWxzIH19CiAgICAgICAgICAtIHt7ICR2IH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgIHRvcG9sb2d5S2V5OiB7eyAkaXRlbS50b3BvbG9neUtleSB9fQogICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cgp7ey0gZGVmaW5lICJwb2RBbnRpQWZmaW5pdHlQcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nIiB9fQogICAge3stIHJhbmdlICRpbmRleCwgJGl0ZW0gOj0gLlZhbHVlcy5wb2RBbnRpQWZmaW5pdHlUZXJtTGFiZWxTZWxlY3RvciB9fQogICAgLSBwb2RBZmZpbml0eVRlcm06CiAgICAgICAgbGFiZWxTZWxlY3RvcjoKICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAtIGtleToge3sgJGl0ZW0ua2V5IH19CiAgICAgICAgICAgIG9wZXJhdG9yOiB7eyAkaXRlbS5vcGVyYXRvciB9fQogICAgICAgICAgICB7ey0gaWYgJGl0ZW0udmFsdWVzIH19CiAgICAgICAgICAgIHZhbHVlczoKICAgICAgICAgICAge3stICR2YWxzIDo9IHNwbGl0ICIsIiAkaXRlbS52YWx1ZXMgfX0KICAgICAgICAgICAge3stIHJhbmdlICRpLCAkdiA6PSAkdmFscyB9fQogICAgICAgICAgICAtIHt7ICR2IH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHRvcG9sb2d5S2V5OiB7eyAkaXRlbS50b3BvbG9neUtleSB9fQogICAgICB3ZWlnaHQ6IDEwMAogICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/_helpers.tpl",
          "fileContents": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiaXN0aW8ubmFtZSIgLX19Cnt7LSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgYXBwIG5hbWUuCldlIHRydW5jYXRlIGF0IDYzIGNoYXJzIGJlY2F1c2Ugc29tZSBLdWJlcm5ldGVzIG5hbWUgZmllbGRzIGFyZSBsaW1pdGVkIHRvIHRoaXMgKGJ5IHRoZSBETlMgbmFtaW5nIHNwZWMpLgpJZiByZWxlYXNlIG5hbWUgY29udGFpbnMgY2hhcnQgbmFtZSBpdCB3aWxsIGJlIHVzZWQgYXMgYSBmdWxsIG5hbWUuCiovfX0Ke3stIGRlZmluZSAiaXN0aW8uZnVsbG5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIC19fQp7ey0gLlZhbHVlcy5mdWxsbmFtZU92ZXJyaWRlIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVsc2UgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gaWYgY29udGFpbnMgJG5hbWUgLlJlbGVhc2UuTmFtZSAtfX0Ke3stIC5SZWxlYXNlLk5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIC5SZWxlYXNlLk5hbWUgJG5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgY2hhcnQgbmFtZSBhbmQgdmVyc2lvbiBhcyB1c2VkIGJ5IHRoZSBjaGFydCBsYWJlbC4KKi99fQp7ey0gZGVmaW5lICJpc3Rpby5jaGFydCIgLX19Cnt7LSAuQ2hhcnQuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGZ1bGx5IHF1YWxpZmllZCBjb25maWdtYXAgbmFtZS4KKi99fQp7ey0gZGVmaW5lICJpc3Rpby5jb25maWdtYXAuZnVsbG5hbWUiIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAiaXN0aW8tbWVzaC1jb25maWciIHwgdHJ1bmMgNjMgfCB0cmltU3VmZml4ICItIiAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ29uZmlnbWFwIGNoZWNrc3VtLgoqL319Cnt7LSBkZWZpbmUgImlzdGlvLmNvbmZpZ21hcC5jaGVja3N1bSIgLX19Cnt7LSBwcmludCAkLlRlbXBsYXRlLkJhc2VQYXRoICIvY29uZmlnbWFwLnlhbWwiIHwgc2hhMjU2c3VtIC19fQp7ey0gZW5kIC19fQo="
        },
        {
          "filePath": "templates/_podDisruptionBudget.tpl",
          "fileContents": "e3stIGRlZmluZSAicG9kRGlzcnVwdGlvbkJ1ZGdldC5zcGVjIiB9fQogIG1pbkF2YWlsYWJsZTogMQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/clusterrole.yaml",
          "fileContents": "a2luZDogQ2x1c3RlclJvbGUKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1yZWFkZXIKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsnJ10KICAgIHJlc291cmNlczogWydub2RlcycsICdwb2RzJywgJ3NlcnZpY2VzJywgJ2VuZHBvaW50cycsICJyZXBsaWNhdGlvbmNvbnRyb2xsZXJzIl0KICAgIHZlcmJzOiBbJ2dldCcsICd3YXRjaCcsICdsaXN0J10KICAtIGFwaUdyb3VwczogWyJleHRlbnNpb25zIiwgImFwcHMiXQogICAgcmVzb3VyY2VzOiBbInJlcGxpY2FzZXRzIl0KICAgIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0K"
        },
        {
          "filePath": "templates/clusterrolebinding.yaml",
          "fileContents": "YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbXVsdGkKICBsYWJlbHM6CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0Kcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogaXN0aW8tcmVhZGVyCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogaXN0aW8tbXVsdGkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "templates/configmap.yaml",
          "fileContents": ""
        },
        {
          "filePath": "templates/endpoints.yaml",
          "fileContents": "e3stIGlmIG9yIC5WYWx1ZXMuZ2xvYmFsLnJlbW90ZVBpbG90Q3JlYXRlU3ZjRW5kcG9pbnQgLlZhbHVlcy5nbG9iYWwuY3JlYXRlUmVtb3RlU3ZjRW5kcG9pbnRzIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IEVuZHBvaW50cwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1waWxvdAogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnN1YnNldHM6Ci0gYWRkcmVzc2VzOgogIC0gaXA6IHt7IC5WYWx1ZXMuZ2xvYmFsLnJlbW90ZVBpbG90QWRkcmVzcyB9fQogIHBvcnRzOgogIC0gcG9ydDogMTUwMDMKICAgIG5hbWU6IGh0dHAtb2xkLWRpc2NvdmVyeSAjIG1UTFMgb3Igbm9uLW1UTFMgZGVwZW5kaW5nIG9uIGF1dGggc2V0dGluZwogIC0gcG9ydDogMTUwMDUKICAgIG5hbWU6IGh0dHBzLWRpc2NvdmVyeSAjIGFsd2F5cyBtVExTCiAgLSBwb3J0OiAxNTAwNwogICAgbmFtZTogaHR0cC1kaXNjb3ZlcnkgIyBhbHdheXMgcGxhaW4tdGV4dAogIC0gcG9ydDogMTUwMTAKICAgIG5hbWU6IGdycGMteGRzICMgZGlyZWN0CiAgLSBwb3J0OiAxNTAxMQogICAgbmFtZTogaHR0cHMteGRzICMgbVRMUyBvciBub24tbVRMUyBkZXBlbmRpbmcgb24gYXV0aCBzZXR0aW5nCiAgLSBwb3J0OiA4MDgwCiAgICBuYW1lOiBodHRwLWxlZ2FjeS1kaXNjb3ZlcnkgIyBkaXJlY3QKICAtIHBvcnQ6IDE1MDE0CiAgICBuYW1lOiBodHRwLW1vbml0b3JpbmcKe3stIGVuZCB9fQp7ey0gaWYgYW5kIC5WYWx1ZXMuZ2xvYmFsLnJlbW90ZVBvbGljeUFkZHJlc3MgLlZhbHVlcy5nbG9iYWwuY3JlYXRlUmVtb3RlU3ZjRW5kcG9pbnRzIH19Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBFbmRwb2ludHMKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tcG9saWN5CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0Kc3Vic2V0czoKLSBhZGRyZXNzZXM6CiAgLSBpcDoge3sgLlZhbHVlcy5nbG9iYWwucmVtb3RlUG9saWN5QWRkcmVzcyB9fQogIHBvcnRzOgogIC0gbmFtZTogZ3JwYy1taXhlcgogICAgcG9ydDogOTA5MQogIC0gbmFtZTogZ3JwYy1taXhlci1tdGxzCiAgICBwb3J0OiAxNTAwNAogIC0gbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgICBwb3J0OiAxNTAxNAp7ey0gZW5kIH19Cnt7LSBpZiBhbmQgLlZhbHVlcy5nbG9iYWwucmVtb3RlVGVsZW1ldHJ5QWRkcmVzcyAuVmFsdWVzLmdsb2JhbC5jcmVhdGVSZW1vdGVTdmNFbmRwb2ludHMgfX0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IEVuZHBvaW50cwptZXRhZGF0YToKICBuYW1lOiBpc3Rpby10ZWxlbWV0cnkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzdWJzZXRzOgotIGFkZHJlc3NlczoKICAtIGlwOiB7eyAuVmFsdWVzLmdsb2JhbC5yZW1vdGVUZWxlbWV0cnlBZGRyZXNzIH19CiAgcG9ydHM6CiAgLSBuYW1lOiBncnBjLW1peGVyCiAgICBwb3J0OiA5MDkxCiAgLSBuYW1lOiBncnBjLW1peGVyLW10bHMKICAgIHBvcnQ6IDE1MDA0CiAgLSBuYW1lOiBodHRwLW1vbml0b3JpbmcKICAgIHBvcnQ6IDE1MDE0CiAgLSBuYW1lOiBwcm9tZXRoZXVzCiAgICBwb3J0OiA0MjQyMgp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "templates/install-custom-resources.sh.tpl",
          "fileContents": "e3sgZGVmaW5lICJpbnN0YWxsLWN1c3RvbS1yZXNvdXJjZXMuc2gudHBsIiB9fQojIS9iaW4vc2gKCnNldCAteAoKaWYgWyAiJCMiIC1uZSAiMSIgXTsgdGhlbgogICAgZWNobyAiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIHBhdGggdG8gY3VzdG9tIHJlc291cmNlIHlhbWwiCiAgICBleGl0IDEKZmkKCnBhdGhUb1Jlc291cmNlWUFNTD0kezF9CgprdWJlY3RsIGdldCB2YWxpZGF0aW5nd2ViaG9va2NvbmZpZ3VyYXRpb24gaXN0aW8tZ2FsbGV5IDI+L2Rldi9udWxsCmlmIFsgIiQ/IiAtZXEgMCBdOyB0aGVuCiAgICBlY2hvICJpc3Rpby1nYWxsZXkgdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9uIGZvdW5kIC0gd2FpdGluZyBmb3IgaXN0aW8tZ2FsbGV5IGRlcGxveW1lbnQgdG8gYmUgcmVhZHkiCiAgICB3aGlsZSB0cnVlOyBkbwogICAgICAgIGt1YmVjdGwgLW4ge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IGdldCBkZXBsb3ltZW50IGlzdGlvLWdhbGxleSAyPi9kZXYvbnVsbAogICAgICAgIGlmIFsgIiQ/IiAtZXEgMCBdOyB0aGVuCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgICAgICBzbGVlcCAxCiAgICBkb25lCiAgICBrdWJlY3RsIC1uIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSByb2xsb3V0IHN0YXR1cyBkZXBsb3ltZW50IGlzdGlvLWdhbGxleQogICAgaWYgWyAiJD8iIC1uZSAwIF07IHRoZW4KICAgICAgICBlY2hvICJpc3Rpby1nYWxsZXkgZGVwbG95bWVudCByb2xsb3V0IHN0YXR1cyBjaGVjayBmYWlsZWQiCiAgICAgICAgZXhpdCAxCiAgICBmaQogICAgZWNobyAiaXN0aW8tZ2FsbGV5IGRlcGxveW1lbnQgcmVhZHkgZm9yIGNvbmZpZ3VyYXRpb24gdmFsaWRhdGlvbiIKZmkKc2xlZXAgNQprdWJlY3RsIGFwcGx5IC1mICR7cGF0aFRvUmVzb3VyY2VZQU1MfQp7eyBlbmQgfX0K"
        },
        {
          "filePath": "templates/service.yaml",
          "fileContents": "e3stIGlmIG9yIC5WYWx1ZXMuZ2xvYmFsLnJlbW90ZVBpbG90Q3JlYXRlU3ZjRW5kcG9pbnQgLlZhbHVlcy5nbG9iYWwuY3JlYXRlUmVtb3RlU3ZjRW5kcG9pbnRzIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tcGlsb3QKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogMTUwMDMKICAgIG5hbWU6IGh0dHAtb2xkLWRpc2NvdmVyeSAjIG1UTFMgb3Igbm9uLW1UTFMgZGVwZW5kaW5nIG9uIGF1dGggc2V0dGluZwogIC0gcG9ydDogMTUwMDUKICAgIG5hbWU6IGh0dHBzLWRpc2NvdmVyeSAjIGFsd2F5cyBtVExTCiAgLSBwb3J0OiAxNTAwNwogICAgbmFtZTogaHR0cC1kaXNjb3ZlcnkgIyBhbHdheXMgcGxhaW4tdGV4dAogIC0gcG9ydDogMTUwMTAKICAgIG5hbWU6IGdycGMteGRzICMgZGlyZWN0CiAgLSBwb3J0OiAxNTAxMQogICAgbmFtZTogaHR0cHMteGRzICMgbVRMUyBvciBub24tbVRMUyBkZXBlbmRpbmcgb24gYXV0aCBzZXR0aW5nCiAgLSBwb3J0OiA4MDgwCiAgICBuYW1lOiBodHRwLWxlZ2FjeS1kaXNjb3ZlcnkgIyBkaXJlY3QKICAtIHBvcnQ6IDE1MDE0CiAgICBuYW1lOiBodHRwLW1vbml0b3JpbmcKICBjbHVzdGVySVA6IE5vbmUKe3stIGVuZCB9fQp7ey0gaWYgYW5kIC5WYWx1ZXMuZ2xvYmFsLnJlbW90ZVBvbGljeUFkZHJlc3MgLlZhbHVlcy5nbG9iYWwuY3JlYXRlUmVtb3RlU3ZjRW5kcG9pbnRzIH19Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IGlzdGlvLXBvbGljeQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19CnNwZWM6CiAgcG9ydHM6CiAgLSBuYW1lOiBncnBjLW1peGVyCiAgICBwb3J0OiA5MDkxCiAgLSBuYW1lOiBncnBjLW1peGVyLW10bHMKICAgIHBvcnQ6IDE1MDA0CiAgLSBuYW1lOiBodHRwLW1vbml0b3JpbmcKICAgIHBvcnQ6IDE1MDE0CiAgY2x1c3RlcklQOiBOb25lCnt7LSBlbmQgfX0Ke3stIGlmIGFuZCAuVmFsdWVzLmdsb2JhbC5yZW1vdGVUZWxlbWV0cnlBZGRyZXNzIC5WYWx1ZXMuZ2xvYmFsLmNyZWF0ZVJlbW90ZVN2Y0VuZHBvaW50cyB9fQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiBpc3Rpby10ZWxlbWV0cnkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQpzcGVjOgogIHBvcnRzOgogIC0gbmFtZTogZ3JwYy1taXhlcgogICAgcG9ydDogOTA5MQogIC0gbmFtZTogZ3JwYy1taXhlci1tdGxzCiAgICBwb3J0OiAxNTAwNAogIC0gbmFtZTogaHR0cC1tb25pdG9yaW5nCiAgICBwb3J0OiAxNTAxNAogIC0gbmFtZTogcHJvbWV0aGV1cwogICAgcG9ydDogNDI0MjIKICBjbHVzdGVySVA6IE5vbmUKe3stIGVuZCB9fQo="
        },
        {
          "filePath": "templates/serviceaccount.yaml",
          "fileContents": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogaXN0aW8tbXVsdGkKICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQo="
        },
        {
          "filePath": "templates/sidecar-injector-configmap.yaml",
          "fileContents": "e3stIGlmIG5vdCAuVmFsdWVzLmdsb2JhbC5vbWl0U2lkZWNhckluamVjdG9yQ29uZmlnTWFwIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBpc3Rpby1zaWRlY2FyLWluamVjdG9yCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJpc3Rpby5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgdGVtcGxhdGUgImlzdGlvLmNoYXJ0IiAuIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogICAgaXN0aW86IHNpZGVjYXItaW5qZWN0b3IKZGF0YToKICB2YWx1ZXM6IHwtCiAgICB7eyAuVmFsdWVzIHwgdG9Kc29uIH19CgogIGNvbmZpZzogfC0KICAgIHBvbGljeToge3sgLlZhbHVlcy5nbG9iYWwucHJveHkuYXV0b0luamVjdCB9fQogICAgYWx3YXlzSW5qZWN0U2VsZWN0b3I6Cnt7IHRvWWFtbCAuVmFsdWVzLnNpZGVjYXJJbmplY3RvcldlYmhvb2suYWx3YXlzSW5qZWN0U2VsZWN0b3IgfCBpbmRlbnQgNiB9fQogICAgbmV2ZXJJbmplY3RTZWxlY3RvcjoKe3sgdG9ZYW1sIC5WYWx1ZXMuc2lkZWNhckluamVjdG9yV2ViaG9vay5uZXZlckluamVjdFNlbGVjdG9yIHwgaW5kZW50IDYgfX0KICAgIHRlbXBsYXRlOiB8LQp7eyAuRmlsZXMuR2V0ICJmaWxlcy9pbmplY3Rpb24tdGVtcGxhdGUueWFtbCIgfCBpbmRlbnQgNiB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "filePath": "test-values/README.md",
          "fileContents": "IyBUZXN0IFZhbHVlcwoKVGhlc2UgZmlsZXMgYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgdG8gaW5zdGFsbCBJc3RpbyBmb3IgRTJFIHRlc3RzLgoKVGhlIHJlbmRlcmVkIGZpbGVzIGNhbiBiZSBnZW5lcmF0ZWQgd2l0aCBgbWFrZSBnZW5lcmF0ZV9lMmVfeWFtbGAuCgpUaGVzZSBmaWxlcyB3aWxsIGFsbCBoYXZlIGB2YWx1ZXMtZTJlLnlhbWxgIGFwcGxpZWQgdG8gdGhlbSAqZmlyc3QqLCBzbyBpZiB0aGVyZSBhcmUgc2V0dGluZ3MgdGhlcmUgdGhhdCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSB0ZXN0IHRoZSBtdXN0IGJlIG92ZXJyaWRkZW4uCg=="
        },
        {
          "filePath": "test-values/values-e2e.yaml",
          "fileContents": "IyBUaGlzIGZpbGUgb3ZlcnJpZGVzIHZhbHVlcyBmb3IgZTJlIHRlc3RpbmcuCgpnbG9iYWw6CiAgcHJveHk6CiAgICBjb25jdXJyZW5jeTogMAogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDEwbQogICAgICAgIG1lbW9yeTogNDBNaQoKICAgIGFjY2Vzc0xvZ0ZpbGU6ICIvZGV2L3N0ZG91dCIKICAgIGVuYWJsZUNvcmVEdW1wOiB0cnVlCgogIGRpc2FibGVQb2xpY3lDaGVja3M6IGZhbHNlCiAgb3V0Ym91bmRUcmFmZmljUG9saWN5OgogICAgbW9kZTogUkVHSVNUUllfT05MWQoKcHJvbWV0aGV1czoKICBzY3JhcGVJbnRlcnZhbDogNXMKCmdhdGV3YXlzOgogIGlzdGlvLWluZ3Jlc3NnYXRld2F5OgogICAgYXV0b3NjYWxlTWF4OiAxCiAgICByZXNvdXJjZXM6CiAgICAgIHJlcXVlc3RzOgogICAgICAgIGNwdTogMTBtCiAgICAgICAgbWVtb3J5OiA0ME1pCiAgICAgIGxpbWl0czoKICAgICAgICBjcHU6IDEwMG0KICAgICAgICBtZW1vcnk6IDEyOE1pCgogIGlzdGlvLWVncmVzc2dhdGV3YXk6CiAgICBlbmFibGVkOiB0cnVlCiAgICBhdXRvc2NhbGVNYXg6IDEKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAxMG0KICAgICAgICBtZW1vcnk6IDQwTWkKICAgICAgbGltaXRzOgogICAgICAgIGNwdTogMTAwbQogICAgICAgIG1lbW9yeTogMTI4TWkKCm1peGVyOgogIHBvbGljeToKICAgIGVuYWJsZWQ6IHRydWUKICAgIHJlcGxpY2FDb3VudDogMgogICAgYXV0b3NjYWxlRW5hYmxlZDogZmFsc2UKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAxMG0KICAgICAgICBtZW1vcnk6IDEwME1pCiAgICAgIGxpbWl0czoKICAgICAgICBjcHU6IDEwMG0KICAgICAgICBtZW1vcnk6IDEwME1pCiAgdGVsZW1ldHJ5OgogICAgZW5hYmxlZDogdHJ1ZQogICAgbG9hZHNoZWRkaW5nOgogICAgICBtb2RlOiBkaXNhYmxlZAogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDUwbQogICAgICAgIG1lbW9yeTogMTAwTWkKICAgICAgbGltaXRzOgogICAgICAgIGNwdTogMTAwbQogICAgICAgIG1lbW9yeTogMTAwTWkKICBhZGFwdGVyczoKICAgIHN0ZGlvOgogICAgICBlbmFibGVkOiB0cnVlCiAga2lhbGk6CiAgICBlbmFibGVkOiB0cnVlCg=="
        },
        {
          "filePath": "test-values/values-istio-auth-mcp.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIHdpdGggTUNQIGVuYWJsZWQKZ2xvYmFsOgogICMgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKICAKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKICAKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RlciBjb25maWd1cmVkIHdpdGggcHJpdmF0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIKICAKICB1c2VNQ1A6IHRydWUKCg=="
        },
        {
          "filePath": "test-values/values-istio-auth-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC1tdWx0aWNsdXN0ZXIueWFtbCwgdXNlZCBmb3IgQ0kvQ0QuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiB0cnVlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogdHJ1ZQoKICBwcm94eToKICAgIGFjY2Vzc0xvZ0ZpbGU6ICIvZGV2L3N0ZG91dCIKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0ZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgojIEluIGEgbXVsdGlwbGUgY2x1c3RlciBlbnZpcm9ubWVudCwgY2l0YWRlbCB1c2VzIHRoZSBzYW1lIHJvb3QgY2VydGlmaWNhdGUgaW4gYWxsIHRoZSBjbHVzdGVycwpzZWN1cml0eToKICBzZWxmU2lnbmVkOiBmYWxzZQo="
        },
        {
          "filePath": "test-values/values-istio-auth-non-mcp.yaml",
          "fileContents": "Z2xvYmFsOgogIG10bHM6CiAgICBlbmFibGVkOiB0cnVlCgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICB1c2VNQ1A6IGZhbHNl"
        },
        {
          "filePath": "test-values/values-istio-auth-sds.yaml",
          "fileContents": "Z2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogIHNkczoKICAgIGVuYWJsZWQ6IHRydWUKICAgIHVkc1BhdGg6ICJ1bml4Oi92YXIvcnVuL3Nkcy91ZHNfcGF0aCIKICAgIHVzZU5vcm1hbEp3dDogdHJ1ZQoKICBwcm94eToKICAgIGVuYWJsZUNvcmVEdW1wOiB0cnVlCgpub2RlYWdlbnQ6CiAgZW5hYmxlZDogdHJ1ZQogIGltYWdlOiBub2RlLWFnZW50LWs4cwogIGVudjoKICAgIENBX1BST1ZJREVSOiAiQ2l0YWRlbCIKICAgIENBX0FERFI6ICJpc3Rpby1jaXRhZGVsOjgwNjAiCiAgICBWQUxJRF9UT0tFTjogdHJ1ZQ=="
        },
        {
          "filePath": "test-values/values-istio-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBhdXRvbWF0ZWQgQ0kvQ0QgdGVzdCwgdXNpbmcgdjEvYWxwaGExCiMgb3IgdjIvYWxwaGEzIHdpdGggJ2dyYWR1YWwgbWlncmF0aW9uJyAodXNpbmcgZW52IHZhcmlhYmxlIGF0IGluamVjdCB0aW1lKS4KZ2xvYmFsOgogICMgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkIGVuYWJsZWQuIFdpbGwgcmVzdWx0IGluIGRlbGF5cyBzdGFydGluZyB0aGUgcG9kcyB3aGlsZSBzZWNyZXRzIGFyZQogICMgcHJvcGFnYXRlZCwgbm90IHJlY29tbWVuZGVkIGZvciB0ZXN0cy4KICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKICAKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RlciBjb25maWd1cmVkIHdpdGggcHJpdmF0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIK"
        },
        {
          "filePath": "test-values/values-istio-mcp.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB3aXRoIE1DUCBlbmFibGVkCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiBmYWxzZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IGZhbHNlCgogICMjIGltYWdlUHVsbFNlY3JldHMgZm9yIGFsbCBTZXJ2aWNlQWNjb3VudC4gTXVzdCBiZSBzZXQgZm9yIGFueSBjbHVzdGVyIGNvbmZpZ3VyZWQgd2l0aCBwcml2YXRlIGRvY2tlciByZWdpc3RyeS4KICAjIGltYWdlUHVsbFNlY3JldHM6CiAgIyAgIC0gbmFtZTogInByaXZhdGUtcmVnaXN0cnkta2V5IgoKICB1c2VNQ1A6IHRydWUKCgo="
        },
        {
          "filePath": "test-values/values-istio-multicluster-split-horizon.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tbXVsdGljbHVzdGVyLXNwbGl0LWhvcml6b24ueWFtbCwgdXNlZCBmb3IgQ0kvQ0QuCmdsb2JhbDoKICBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQ6IHRydWUKICBtdGxzOgogICAgZW5hYmxlZDogdHJ1ZQogIHByb3h5OgogICAgYWNjZXNzTG9nRmlsZTogIi9kZXYvc3Rkb3V0IgogIG91dGJvdW5kVHJhZmZpY1BvbGljeToKICAgIG1vZGU6IEFMTE9XX0FOWQogIG1lc2hFeHBhbnNpb246CiAgICBlbmFibGVkOiB0cnVlCiAgbWVzaE5ldHdvcmtzOgogICAgbmV0d29yazI6CiAgICAgIGVuZHBvaW50czoKICAgICAgLSBmcm9tUmVnaXN0cnk6IE4yX1JFR0lTVFJZX1RPS0VOCiAgICAgIGdhdGV3YXlzOgogICAgICAtIGFkZHJlc3M6IDAuMC4wLjAKICAgICAgICBwb3J0OiA0NDMKc2VjdXJpdHk6CiAgc2VsZlNpZ25lZDogZmFsc2UKZ2F0ZXdheXM6CiAgaXN0aW8tZWdyZXNzZ2F0ZXdheToKICAgIGVuYWJsZWQ6IGZhbHNlCgoK"
        },
        {
          "filePath": "test-values/values-istio-multicluster.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tbXVsdGljbHVzdGVyLnlhbWwsIHVzZWQgZm9yIENJL0NELgpnbG9iYWw6CiAgIyBjb250cm9sUGxhbmVTZWN1cml0eUVuYWJsZWQgZW5hYmxlZC4gV2lsbCByZXN1bHQgaW4gZGVsYXlzIHN0YXJ0aW5nIHRoZSBwb2RzIHdoaWxlIHNlY3JldHMgYXJlCiAgIyBwcm9wYWdhdGVkLCBub3QgcmVjb21tZW5kZWQgZm9yIHRlc3RzLgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiBmYWxzZQoKICBwcm94eToKICAgIGFjY2Vzc0xvZ0ZpbGU6ICIvZGV2L3N0ZG91dCIKCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0ZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgojIEluIGEgbXVsdGlwbGUgY2x1c3RlciBlbnZpcm9ubWVudCwgY2l0YWRlbCB1c2VzIHRoZSBzYW1lIHJvb3QgY2VydGlmaWNhdGUgaW4gYWxsIHRoZSBjbHVzdGVycwpzZWN1cml0eToKICBzZWxmU2lnbmVkOiBmYWxzZQo="
        },
        {
          "filePath": "test-values/values-istio-non-mcp.yaml",
          "fileContents": "Z2xvYmFsOgogIHVzZU1DUDogZmFsc2U="
        },
        {
          "filePath": "test-values/values-istio-one-namespace-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiB0cnVlCiAgCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCiAgCiAgIyMgaW1hZ2VQdWxsU2VjcmV0cyBmb3IgYWxsIFNlcnZpY2VBY2NvdW50LiBNdXN0IGJlIHNldCBmb3IgYW55IGNsdXN0ZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCgogICMgUmVzdHJpY3QgdGhlIGFwcGxpY2F0aW9ucyBpbiBvbmUgbmFtZXNwYWNlIHRoZSBjb250cm9sbGVyIG1hbmFnZXMKICBvbmVOYW1lc3BhY2U6IHRydWUK"
        },
        {
          "filePath": "test-values/values-istio-one-namespace-trust-domain.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiB0cnVlCgogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogdHJ1ZQoKICAjIERlZmF1bHQgaXMgMTBzIHNlY29uZAogIHJlZnJlc2hJbnRlcnZhbDogMXMKCiAgIyBUaGUgdHJ1c3QgZG9tYWluIGNvcnJlc3BvbmRzIHRvIHRoZSB0cnVzdCByb290IG9mIGEgc3lzdGVtCiAgdHJ1c3REb21haW46IHRlc3QubG9jYWwKCiAgIyBSZXN0cmljdCB0aGUgYXBwbGljYXRpb25zIGluIG9uZSBuYW1lc3BhY2UgdGhlIGNvbnRyb2xsZXIgbWFuYWdlcwogIG9uZU5hbWVzcGFjZTogdHJ1ZQo="
        },
        {
          "filePath": "test-values/values-istio-one-namespace.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCB1c2VkIGZvciBkZXByZWNhdGVkIENJL0NEIHRlc3RpbmcuCmdsb2JhbDoKICAjIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZCBlbmFibGVkLiBXaWxsIHJlc3VsdCBpbiBkZWxheXMgc3RhcnRpbmcgdGhlIHBvZHMgd2hpbGUgc2VjcmV0cyBhcmUKICAjIHByb3BhZ2F0ZWQsIG5vdCByZWNvbW1lbmRlZCBmb3IgdGVzdHMuCiAgY29udHJvbFBsYW5lU2VjdXJpdHlFbmFibGVkOiBmYWxzZQogIAogIG10bHM6CiAgICAjIERlZmF1bHQgc2V0dGluZyBmb3Igc2VydmljZS10by1zZXJ2aWNlIG10bHMuIENhbiBiZSBzZXQgZXhwbGljaXRseSB1c2luZwogICAgIyBkZXN0aW5hdGlvbiBydWxlcyBvciBzZXJ2aWNlIGFubm90YXRpb25zLgogICAgZW5hYmxlZDogZmFsc2UKICAKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RlciBjb25maWd1cmVkIHdpdGggcHJpdmF0ZSBkb2NrZXIgcmVnaXN0cnkuCiAgIyBpbWFnZVB1bGxTZWNyZXRzOgogICMgICAtIG5hbWU6ICJwcml2YXRlLXJlZ2lzdHJ5LWtleSIKCiAgIyBSZXN0cmljdCB0aGUgYXBwbGljYXRpb25zIGluIG9uZSBuYW1lc3BhY2UgdGhlIGNvbnRyb2xsZXIgbWFuYWdlcwogIG9uZU5hbWVzcGFjZTogdHJ1ZQo="
        },
        {
          "filePath": "test-values/values-istio.yaml",
          "fileContents": "CiMgVGhpcyBpcyB1c2VkIHRvIGdlbmVyYXRlIGlzdGlvLnlhbWwgZm9yIGF1dG9tYXRlZCBDSS9DRCB0ZXN0LCB1c2luZyB2MS9hbHBoYTEKIyBvciB2Mi9hbHBoYTMgd2l0aCAnZ3JhZHVhbCBtaWdyYXRpb24nICh1c2luZyBlbnYgdmFyaWFibGUgYXQgaW5qZWN0IHRpbWUpLgojIGdsb2JhbDoKICAjIyBpbWFnZVB1bGxTZWNyZXRzIGZvciBhbGwgU2VydmljZUFjY291bnQuIE11c3QgYmUgc2V0IGZvciBhbnkgY2x1c3RzZXIgY29uZmlndXJlZCB3aXRoIHByaXZhdGUgZG9ja2VyIHJlZ2lzdHJ5LgogICMgaW1hZ2VQdWxsU2VjcmV0czoKICAjICAgLSBuYW1lOiAicHJpdmF0ZS1yZWdpc3RyeS1rZXkiCg=="
        },
        {
          "filePath": "values-istio-demo-auth.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8tYXV0aC55YW1sIGZvciBtaW5pbWFsLCBkZW1vIG1vZGUgd2l0aCBNVExTIGVuYWJsZWQuCiMgSXQgaXMgc2hpcHBlZCB3aXRoIHRoZSByZWxlYXNlLCB1c2VkIGZvciBib29raW5mbyBvciBxdWljayBpbnN0YWxsYXRpb24gb2YgaXN0aW8uCiMgSW5jbHVkZXMgY29tcG9uZW50cyB1c2VkIGluIHRoZSBkZW1vLCBkZWZhdWx0cyB0byBhbHBoYTMgcnVsZXMuCgojIEBpbmNsdWRlIDx2YWx1ZXMtaXN0aW8tZGVtby1jb21tb24ueWFtbD4KZ2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogdHJ1ZQoKICBtdGxzOgogICAgIyBEZWZhdWx0IHNldHRpbmcgZm9yIHNlcnZpY2UtdG8tc2VydmljZSBtdGxzLiBDYW4gYmUgc2V0IGV4cGxpY2l0bHkgdXNpbmcKICAgICMgZGVzdGluYXRpb24gcnVsZXMgb3Igc2VydmljZSBhbm5vdGF0aW9ucy4KICAgIGVuYWJsZWQ6IHRydWUK"
        },
        {
          "filePath": "values-istio-demo-common.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgbWluaW1hbCBkZW1vIG1vZGUuIEl0IGlzIGluY2x1ZGVkIGZyb20gZGVtbyBhbmQgZGVtby1hdXRoIHZhbHVlcy4KIyBJdCBpcyBzaGlwcGVkIHdpdGggdGhlIHJlbGVhc2UsIHVzZWQgZm9yIGJvb2tpbmZvIG9yIHF1aWNrIGluc3RhbGxhdGlvbiBvZiBpc3Rpby4KIyBJbmNsdWRlcyBjb21wb25lbnRzIHVzZWQgaW4gdGhlIGRlbW8sIGRlZmF1bHRzIHRvIGFscGhhMyBydWxlcy4KIyBOb3RlOiBwbGVhc2Ugb25seSBwdXQgY29tbW9uIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBkZW1vIHByb2ZpbGVzIGhlcmUuCmdsb2JhbDoKICBwcm94eToKICAgIGFjY2Vzc0xvZ0ZpbGU6ICIvZGV2L3N0ZG91dCIKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAxMG0KICAgICAgICBtZW1vcnk6IDQwTWkKCiAgZGlzYWJsZVBvbGljeUNoZWNrczogZmFsc2UKCiAgc2lkZWNhckluamVjdG9yV2ViaG9vazoKICAgIGVuYWJsZWQ6IHRydWUKICAgICMgSWYgdHJ1ZSwgd2ViaG9vayBvciBpc3Rpb2N0bCBpbmplY3RvciB3aWxsIHJld3JpdGUgUG9kU3BlYyBmb3IgbGl2ZW5lc3MKICAgICMgaGVhbHRoIGNoZWNrIHRvIHJlZGlyZWN0IHJlcXVlc3QgdG8gc2lkZWNhci4gVGhpcyBtYWtlcyBsaXZlbmVzcyBjaGVjayB3b3JrCiAgICAjIGV2ZW4gd2hlbiBtVExTIGlzIGVuYWJsZWQuCiAgICByZXdyaXRlQXBwSFRUUFByb2JlOiBmYWxzZQoKcGlsb3Q6CiAgdHJhY2VTYW1wbGluZzogMTAwLjAKICByZXNvdXJjZXM6CiAgICByZXF1ZXN0czoKICAgICAgY3B1OiAxMG0KICAgICAgbWVtb3J5OiAxMDBNaQoKbWl4ZXI6CiAgcG9saWN5OgogICAgZW5hYmxlZDogdHJ1ZQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDEwbQogICAgICAgIG1lbW9yeTogMTAwTWkKCiAgdGVsZW1ldHJ5OgogICAgZW5hYmxlZDogdHJ1ZQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDUwbQogICAgICAgIG1lbW9yeTogMTAwTWkKIAogIGFkYXB0ZXJzOgogICAgc3RkaW86CiAgICAgIGVuYWJsZWQ6IHRydWUKIApncmFmYW5hOgogIGVuYWJsZWQ6IHRydWUKCnRyYWNpbmc6CiAgZW5hYmxlZDogdHJ1ZQoKa2lhbGk6CiAgZW5hYmxlZDogdHJ1ZQogIGNyZWF0ZURlbW9TZWNyZXQ6IHRydWUKCmdhdGV3YXlzOgogIGlzdGlvLWluZ3Jlc3NnYXRld2F5OgogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDEwbQogICAgICAgIG1lbW9yeTogNDBNaQoKICBpc3Rpby1lZ3Jlc3NnYXRld2F5OgogICAgZW5hYmxlZDogdHJ1ZQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDEwbQogICAgICAgIG1lbW9yeTogNDBNaQo="
        },
        {
          "filePath": "values-istio-demo.yaml",
          "fileContents": "IyBUaGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGUgaXN0aW8ueWFtbCBmb3IgbWluaW1hbCwgZGVtbyBtb2RlLgojIEl0IGlzIHNoaXBwZWQgd2l0aCB0aGUgcmVsZWFzZSwgdXNlZCBmb3IgYm9va2luZm8gb3IgcXVpY2sgaW5zdGFsbGF0aW9uIG9mIGlzdGlvLgojIEluY2x1ZGVzIGNvbXBvbmVudHMgdXNlZCBpbiB0aGUgZGVtbywgZGVmYXVsdHMgdG8gYWxwaGEzIHJ1bGVzLgoKIyBAaW5jbHVkZSA8dmFsdWVzLWlzdGlvLWRlbW8tY29tbW9uLnlhbWw+CiMKZ2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiBmYWxzZQo="
        },
        {
          "filePath": "values-istio-minimal.yaml",
          "fileContents": "IwojIE1pbmltYWwgSXN0aW8gQ29uZmlndXJhdGlvbjogaHR0cHM6Ly9pc3Rpby5pby9kb2NzL3NldHVwL2t1YmVybmV0ZXMvbWluaW1hbC1pbnN0YWxsLwojCnBpbG90OgogIGVuYWJsZWQ6IHRydWUKICBzaWRlY2FyOiBmYWxzZQoKZ2F0ZXdheXM6CiAgZW5hYmxlZDogZmFsc2UKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IGZhbHNlCgpzaWRlY2FySW5qZWN0b3JXZWJob29rOgogIGVuYWJsZWQ6IGZhbHNlCgpnYWxsZXk6CiAgZW5hYmxlZDogZmFsc2UKCm1peGVyOgogIHBvbGljeToKICAgIGVuYWJsZWQ6IGZhbHNlCiAgdGVsZW1ldHJ5OgogICAgZW5hYmxlZDogZmFsc2UKCnByb21ldGhldXM6CiAgZW5hYmxlZDogZmFsc2UKCgojIENvbW1vbiBzZXR0aW5ncy4KZ2xvYmFsOgoKICBwcm94eToKICAgICMgU2V0cyB0aGUgZGVzdGluYXRpb24gU3RhdHNkIGluIGVudm95ICh0aGUgdmFsdWUgb2YgdGhlICItLXN0YXRzZFVkcEFkZHJlc3MiIHByb3h5IGFyZ3VtZW50CiAgICAjIHdvdWxkIGJlIDxob3N0Pjo8cG9ydD4pLgogICAgIyBEaXNhYmxlZCBieSBkZWZhdWx0LgogICAgIyBUaGUgaXN0aW8tc3RhdHNkLXByb20tYnJpZGdlIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBtb3ZpbmcgZm9yd2FyZC4KICAgIGVudm95U3RhdHNkOgogICAgICAjIElmIGVuYWJsZWQgaXMgc2V0IHRvIHRydWUsIGhvc3QgYW5kIHBvcnQgbXVzdCBhbHNvIGJlIHByb3ZpZGVkLiBJc3RpbyBubyBsb25nZXIgcHJvdmlkZXMgYSBzdGF0c2QgY29sbGVjdG9yLgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBob3N0OiAjIGV4YW1wbGU6IHN0YXRzZC1zdmMuaXN0aW8tc3lzdGVtCiAgICAgIHBvcnQ6ICMgZXhhbXBsZTogOTEyNQogIAogIHVzZU1DUDogZmFsc2UKCgo="
        },
        {
          "filePath": "values-istio-remote.yaml",
          "fileContents": "Z2F0ZXdheXM6CiAgZW5hYmxlZDogZmFsc2UKCmdhbGxleToKICBlbmFibGVkOiBmYWxzZQoKbWl4ZXI6CiAgcG9saWN5OgogICAgZW5hYmxlZDogZmFsc2UKICB0ZWxlbWV0cnk6CiAgICBlbmFibGVkOiBmYWxzZQoKcGlsb3Q6CiAgZW5hYmxlZDogZmFsc2UKCnNlY3VyaXR5OgogIGVuYWJsZWQ6IHRydWUKICBjcmVhdGVNZXNoUG9saWN5OiBmYWxzZQoKcHJvbWV0aGV1czoKICBlbmFibGVkOiBmYWxzZQoKZ2xvYmFsOgogIGlzdGlvUmVtb3RlOiB0cnVlCgogIGVuYWJsZVRyYWNpbmc6IGZhbHNlCgogICMgU2V0cyBhbiBpZGVudGlmaWVyIGZvciB0aGUgcmVtb3RlIG5ldHdvcmsgdG8gYmUgdXNlZCBmb3IgU3BsaXQgSG9yaXpvbiBFRFMuIFRoZSBuZXR3b3JrIHdpbGwgYmUgc2VudAogICMgdG8gdGhlIFBpbG90IHdoZW4gY29ubmVjdGVkIGJ5IHRoZSBzaWRlY2FyIGFuZCB3aWxsIGFmZmVjdCB0aGUgcmVzdWx0cyByZXR1cm5lZCBpbiBFRFMgcmVxdWVzdHMuCiAgIyBCYXNlZCBvbiB0aGUgbmV0d29yayBpZGVudGlmaWVyIFBpbG90IHdpbGwgcmV0dXJuIGFsbCBsb2NhbCBlbmRwb2ludHMgKyBlbmRwb2ludHMgb2YgZ2F0ZXdheXMgdG8KICAjIG90aGVyIG5ldHdvcmtzLgogICMKICAjIE11c3QgbWF0Y2ggdGhlIG5hbWVzIGluIHRoZSBtZXNoTmV0d29ya3Mgc2VjdGlvbiBpbiB0aGUgSXN0aW8gbG9jYWwuCiAgbmV0d29yazogIiIK"
        },
        {
          "filePath": "values-istio-sds-auth.yaml",
          "fileContents": "Z2xvYmFsOgogIGNvbnRyb2xQbGFuZVNlY3VyaXR5RW5hYmxlZDogZmFsc2UKCiAgbXRsczoKICAgICMgRGVmYXVsdCBzZXR0aW5nIGZvciBzZXJ2aWNlLXRvLXNlcnZpY2UgbXRscy4gQ2FuIGJlIHNldCBleHBsaWNpdGx5IHVzaW5nCiAgICAjIGRlc3RpbmF0aW9uIHJ1bGVzIG9yIHNlcnZpY2UgYW5ub3RhdGlvbnMuCiAgICBlbmFibGVkOiB0cnVlCgogIHNkczoKICAgIGVuYWJsZWQ6IHRydWUKICAgIHVkc1BhdGg6ICJ1bml4Oi92YXIvcnVuL3Nkcy91ZHNfcGF0aCIKICAgIHVzZU5vcm1hbEp3dDogdHJ1ZQoKbm9kZWFnZW50OgogIGVuYWJsZWQ6IHRydWUKICBpbWFnZTogbm9kZS1hZ2VudC1rOHMKICBlbnY6CiAgICBDQV9QUk9WSURFUjogIkNpdGFkZWwiCiAgICBDQV9BRERSOiAiaXN0aW8tY2l0YWRlbDo4MDYwIgogICAgVkFMSURfVE9LRU46IHRydWU="
        },
        {
          "filePath": "values.yaml",
          "fileContents": ""
        }
      ]
    },
    "shipVersion": {
      "version": "0.45.0",
      "buildTime": "2019-06-12T18:46:57Z",
      "dependencies": {
        "helm": "v2.14.1",
        "kustomize": "v2.0.3",
        "terraform": "v0.11.14"
      }
    },
    "contentSHA": "8e9a77e25c8dd2a9a218b3f99151b662ede04e73df204817ea0b403dc2f12278",
    "lifecycle": {
      "stepsCompleted": {
        "intro": true,
        "kustomize": true,
        "kustomize-intro": true,
        "outro": true,
        "render": true,
        "values": true
      }
    }
  }
}