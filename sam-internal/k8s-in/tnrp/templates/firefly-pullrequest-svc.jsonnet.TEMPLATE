local serviceDeployment = import "firefly-service-deployment.jsonnet.TEMPLATE";
local images = import "fireflyimages.jsonnet";
local portConfig = import "portconfig.jsonnet";
local configs = import "config.jsonnet";
local prConfig = import "configs/firefly-pullrequest.jsonnet";
local fireflyConfigs = import "fireflyconfigs.jsonnet";

serviceDeployment {
    serviceConf:: {
        dindEnabled: true,
        healthPort: portConfig.firefly.pullrequest_mgmt,
        pool: if configs.estate == "prd-samtwo" then 'prd-sam_tnrp_merger' else configs.estate,
        port: [],
        darkLaunch: "false",
    },
    serviceName:: "firefly-pullrequest",
    role:: "firefly",
    dockerImage:: images.fireflypullrequest,
    portAnnotations::
    [
        {
             port: portConfig.firefly.pullrequest_mgmt,
             targetPort: portConfig.firefly.pullrequest_mgmt,
             lbtype: "http",
             tls: false,
             reencrypt: false,
             sticky: 0,
        },
    ],
    portConfigs:: [portConfig.service_health_port('pullrequest_mgmt_nodeport')],
    replicas:: 1,
    command:: ["java", "-jar", "/pullrequest-svc.jar", "--spring.profiles.active=" + configs.estate, "--spring.config.location=/etc/firefly/config/"],
    env:: super.commonEnv + [
        {
            name: "CONFIG_VERSION",
            value: fireflyConfigs.fireflypullrequest,
        },
        {
            name: "DARKLAUNCH",
            value: $.serviceConf["darkLaunch"],
        },
    ],
    volumeMounts:: super.commonVolMounts + [
        {
            name: "docker-build-dir",
            mountPath: "/tmp",
        },
        {
            name: "firefly-root-dir",
            mountPath: "/firefly",
        },
    ],
    data:: {
        "application.yml": std.manifestJson(prConfig.config("firefly-pullrequest")),
    },
}
