<%# INPUT DEFINITIONS %>
<%# Collect log files in /var/log/container %>
input(
  type="imfile"
  File="/var/log/containers/*.log"
  Tag="kubernetes"
  ruleset="kubernetes_dockercontainers_ruleset"
  addmetadata="on"
  escapelf="off"
  discardTruncatedMsg="on"
)

<%# ------- Start of definition of schema templates ------- %>

<%# Align universal schema envelope %>
template(name="tpl_containers_log" type="list") {
  constant(value="{\"schema_type\":\"json-schema\",\"schema_id\":\"event-envelope:1\",\"data\":{")
  constant(value="\"event\":")
  property(name="$!event")
  constant(value=",")
  property(name="hostname" format="jsonfr")
  constant(value=",")
  property(name="$!logdata!time" outname="event_timestamp" format="jsonfr")
  constant(value=",")
  property(name="timegenerated" outname="agent_timestamp" dateFormat="rfc3339" date.inUTC="on" format="jsonfr")
  constant(value=",")
  property(name="$!owner" outname="owner" format="jsonfr")
  constant(value=",\"annotations\": ")
  property(name="$!annotations")
  constant(value="}}\n")
}

<%# kubernetes container logs event %>
template(name="kubernetes_event" type="list") {
  constant(value="{\"schema_type\":\"json-schema\",\"schema_id\":\"kubernetes:1\",\"data\":{")
  property(name="$!logdata!log" outname="message" format="jsonf")
  constant(value=",")
  property(name="syslogfacility-text" outname="facility" format="jsonfr")
  constant(value=",")
  property(name="$!severity" outname="severity" format="jsonfr")
  constant(value="}}\n")
}

<%# rsyslog base annotations %>
template(name = "kubernetes_annotation_rsyslog_base" 
         type="string" 
         string="{\"schema_type\":\"json-schema\",\"schema_id\":\"rsyslog-base:1\",\"data\":{\"dc\":\"<%= config.cluster%>\",\"node\":\"<%= config.node %>\",\"superpod\":\"NONE\",\"source\":\"<%= config.project_id %>\",\"source_type\":\"container-streaming\",\"index\":\"true\"}}")

<%# container logs anotations %>
template(name = "kubernetes_annotation_kubernetes_container" type="list") {
  constant(value = "{\"schema_type\":\"json-schema\",\"schema_id\":\"kubernetes-container:1\",\"data\":")
  property(name = "$!kubernetes_container_data")
  constant(value = "}")
}

ruleset(name = "kubernetes_dockercontainers_ruleset") {
  <%# mmjsonparse to parse log message %>
  action(type="mmjsonparse" cookie="" container="$!logdata")
  
  if $!logdata!stream == 'stderr' then {
    set $!severity = "error";
  } else {
    set $!severity = "info";
  }

  <%# ------------ parsing kubernetes container annotation information -------------%>
  <%# retrieve file name from /var/log/containers/kube-proxy-gke-gao-collection-poc-larger-pool-7372f548-5v3r_kube-system_kube-proxy-7a7cad04f5245c7d12f05e380b9f3a77098d01ff36184529c245e57463c3686a.log %>
  set $!file_name = field($!metadata!filename, 47, 5);

  <%# [POD name]_[namespace]_[container-name-container-UID].log %>
  <%# kube-dns-788979dc8f-q7zzr_kube-system_prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log %>
  set $!kubernetes_container_data!pod = field($!file_name, 95, 1);
  set $!kubernetes_container_data!namespace = field($!file_name, 95, 2);

  <%# [container-name-container-UID].log %>
  <%# prometheus-to-sd-3ff752152adaa93096aaf558cdc78c270dd0e47daebae928ee5a94628ff82a63.log %>
  set $!container_info = field($!filename, 95, 3);
  set $!kubernetes_container_data!container_id = re_extract($!container_info, "-([^-]+).log", 0, 1, "");
  set $!kubernetes_container_data!container_name = substring($!container_info, 0, strlen($!container_info) - 5 - strlen($!kubernetes_container_data!container_id));

  <%# forces the annotation to be indexed in splunk %>
  set $!kubernetes_container_data!index = "true";

  <%# ------------ end of parsing kubernetes container annotations ----------------%>
  

  <%# container logs event %>
  set $!event = exec_template("kubernetes_event");

  <%# kubernetes app log annotation array %>
  set $!annotations = "[" & exec_template("kubernetes_annotation_kubernetes_container") & ", " & exec_template("kubernetes_annotation_rsyslog_base") & "]";

<%# ---- UNCOMMENT to TEST ----- %>
  action(
    name="syslog_file_action"
    type="omfile"
    file="/var/log/kubernetes_dockercontainers_ruleset.log"
    template="tpl_containers_log"
  )
<%# ---- / UNCOMMENT to TEST ----- %>

  <%# Output action %>
  action(
    type="omkafka"
    name="kafka_kubernetes_kafka_action"
    broker="<%= config.broker_vip %>"
    template="tpl_containers_log"
    topic= "<%= config.topic %>"
    keepFailedMessages="on"
    partitions.auto="on"
    resubmitOnFailure="off"
    reopenonhup="on"
    action.resumeRetryCount="-1"
    confParam=[
      "batch.num.messages=10000",
      "client.id=collections.rsyslog.syslog",
      "compression.codec=gzip",
      "max.in.flight.requests.per.connection=2",
      "message.max.bytes=1000000",
      "queue.buffering.max.ms=5000",
      "retries=2",
      "retry.backoff.ms=100",
      "socket.keepalive.enable=true"
      "security.protocol=ssl",
      "ssl.ca.location=/etc/pki_service/ca/cacerts.pem",
      "ssl.certificate.location=/etc/pki_service/root/rsyslog_agent/certificates/rsyslog_agent.pem",
      "ssl.key.location=/etc/pki_service/root/rsyslog_agent/keys/rsyslog_agent-key.pem"
    ]
    topicConfParam=[
      "acks=-1"
    ]
  ) & stop

}
<%# ---- / End of definition for docker containers tenant ---- %>
